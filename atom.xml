<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>网记本</title>
  
  <subtitle>网络记事本-huangguangzhi</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://freefuncode.github.io/"/>
  <updated>2019-10-06T09:44:21.963Z</updated>
  <id>https://freefuncode.github.io/</id>
  
  <author>
    <name>网记本</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>《蛮荒故事》电影观后感</title>
    <link href="https://freefuncode.github.io/2019/10/04/post%E3%80%8A%E8%9B%AE%E8%8D%92%E6%95%85%E4%BA%8B%E3%80%8B%E7%94%B5%E5%BD%B1%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    <id>https://freefuncode.github.io/2019/10/04/post《蛮荒故事》电影观后感/</id>
    <published>2019-10-04T01:37:22.000Z</published>
    <updated>2019-10-06T09:44:21.963Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/%E8%9B%AE%E8%8D%92%E6%95%85%E4%BA%8B.jpg" alt="蛮荒故事"></p><blockquote><p>这个电影由六个毫无关系的小故事构成，每个故事都不长但高潮迭起，看了让人欲罢不能，情节都充斥着复仇成功的快感，看的时候就觉得有些类似于贾樟柯的天注定，但贾樟柯更妙在每个独立故事中的主角之间有着千丝万缕的联系，而蛮荒故事则像六个独立的小剧集拼凑而成。</p></blockquote><blockquote><p>第一个故事是特别短，发生在一架航班上，一个中年男人和一个模特搭话，接着有人听到他们谈论的一个人，最后发现整架飞机里的乘客都认识最开始谈论的那个人，因为飞机里的每个乘客都或多或少伤害过他，后来他们才得知这架飞机的机长就是他们都伤害过的那个人，最后飞机冲向一对在花园里的夫妇，不用说，应该就是那个人的父母，因为他们从小就给他巨大的精神压力。</p></blockquote><blockquote><p>第二个故事发生在一个饭店里，女主发现夜里新来的客人是自己的仇人，他放高利贷最后逼女主的爸爸自杀，后来又诱奸了女主的母亲，不得已女主的妈妈带着女主逃到了现在生活的城市。女主把这个消息告诉了店里另一个女服务员，性格泼辣剽悍，她建议女主给仇人的饭里下老鼠药，但女主犹犹豫豫最后没有这么做。但那个女服务员自作主张在仇人的饭里下了药，但后来仇人的儿子也来吃饭，女主不想因此弄死两个人，故意惹怒了仇人让他停止吃饭，但仇人反过来开始欺凌女主，那个女服务员情急之下用刀捅死了仇人。</p></blockquote><blockquote><p>第三个故事想一个公路片，男主因为前面一辆破旧的车挡着路自己难以超车，就骂了那个车主，但走到半路车胎突然漏气，他不得已把车停到一座桥边开始换轮胎。后来那个车主赶上来，吓得男主赶紧跑到车里。那个司机一看就是瞟形大汉，浑身充满了野气，看到男主把车停到路边，就开始复仇，先用千斤顶砸车玻璃，后来当着男主的面在车上拉屎撒尿。男主气不过，正巧那个司机把车停在他的车前，就用自己的车把那辆车顶到河里。后来发现那个司机没有死，准备上来复仇，就赶紧开车溜之大吉。但想想还是觉得自己受到巨大的侮辱，男主就又掉头想撞死那个司机，那个司机赶紧躲开，后来男主的车几轮漂移，但因为车轮本身还没有加固，最后车轮脱落，整个车失去控制也翻到河里。男主和瞟形大汉就在河里几番挣扎想要互相弄死对方，最后车爆炸把两个人都烧死了。</p></blockquote><blockquote><p>第四个关于反抗政府腐败的故事，因为一些政府官员为了敛财，随意把停在路边的车拖走，借口是违章停车，必须交高额的赎金。男主几次找政府部门理论都没有结果，还因此弄得妻离子散，最后也丢了工作。男主本身是建筑设计师，平时会有工作要求把一些旧楼给炸掉，于是男主在自己的车里放了易炸品，一次拖车部分又来把男主的车拖走，等到被拖车辆的集中地，男主的车爆炸，造成重大损失，男主被因此关进监狱。但很多普通人视男主为英雄，敢于反抗政府，并要求政府释放男主，声称是因为拖车才导致车辆爆炸。最后男主的妻子和女儿也回到他身边。</p></blockquote><blockquote><p>第五个故事是在影射司法不公。一个富二代开车撞死一个孕妇后逃逸，后来他的父亲请律师想法设法帮他逃脱法律的制裁，最后决定请家中的园丁顶替他的罪名，并决定给园丁50万美金。但后来检察官来检查车查询证据时，发现园丁并不符合犯罪者的特征。后来律师想用钱贿赂律师并告诉富二代的父亲说得拿100万美金才能摆平，但后来律师，检察官还有园丁都想再在这一家人身上多捞点油水，富二代的父亲忍无可忍，决定放弃合作，让富二代自己去自首。最后经过几轮协商达成一致后，在警察带园丁去警局时，潜伏在声讨人群中孕妇的丈夫用酒瓶砸死了园丁。</p></blockquote><blockquote><p>第六个故事特别荒诞。新娘在婚礼上发现丈夫和他的女同事有染，在婚礼进行中先是和饭店的服务员发生关系，后来又故意把新郎的女同事弄受伤，在婚礼上疯疯癫癫，把整个仪式弄得一团糟。新郎和他的家人也都要精神崩溃。但后来这对新人发现最后的结果是两败俱伤，男主主动邀请女主跳舞，后来两个人开始激吻，让在场所有的人瞠目结舌，因为他们都觉得这对儿新人不可能再在一起了。但在一片混乱中，这对新人开始在放着他们新婚蛋糕的桌子上做爱，电影就在这样荒诞的喜剧中收场。</p></blockquote><ul><li>每个复仇故事的都体现了人性中野蛮的一面，谋杀，隐藏，放纵，每个故事都把人性的阴暗面血淋淋的放到台面上，让观众忘却所谓的文明，忘却束缚人性所谓的道德。爱就是爱，恨就是恨，受伤害了就要复仇，不管什么伦理仁慈，把人性的蛮荒充分展现出来。本该就没有什么所谓的圣人，人大部分时候都是压抑着活着，除非被逼的迫不得已，人性的蛮荒只是被秘密的隐藏，但不不代表它就不存在。等蛮荒占了上风，那种释放，会似火山爆发一般蔓延。</li></ul><hr><ul><li>精彩翻转，一波三折，细思又只是意料之内，因为电影拍的其实生活本来的样子，始于荒谬，止于更荒谬，是真实残酷的白描，与我们也能产生很多共鸣。因为每个人都有过一闪而过的犯罪念头，但大多困于法律、困与人自身的道德良知选择不作为，这部片子就把我们没敢做出来的那部分呈现了出来，狠狠戳中我们的软肋。这个世界总是如此厌倦又可笑。</li></ul><hr><ul><li>人不管在多优越的环境下成长受了多么良好的教育，本质里的兽性是不会被抹灭的，它只是蛰伏着，如同一座长年植被覆盖的活火山，随时有爆发的可能。人作为高级动物，生来是自带蛮力的，这在孩童时期得到充分体现，可以动不动为了争夺而肉搏，你打了我一下我就必须还以颜色才能体现公平，儿时的人类划分等级，依靠本能的身体素质，这是确保自己不吃亏的最直观指标，无法随着时代的进步而改变，我们口中形容孩子的“幼稚”，无知的那部分随着成长得到填充，暴力的那部分始终潜伏在基因深处脉动着。成人，作为社会的一员，在文明的世界里被无数的框架限制，隐忍的弹性不断增强，人人都习惯了身不由己，看人眼色，遵从规则行事。</li></ul><hr><ul><li>将生活中的矛盾冲突无限放大，把人性的阴暗暴露得彻彻底底，从航班到公路到婚礼，在极致的绝境下，不同主题的复仇行动都压抑又快意。每一个故事都很荒诞，每一个故事又都很真实。</li></ul><hr><ul><li>这个几个故事，直接而露骨地揭露人性中的另一面。一方面，你会说故事中的人物太过激动，一方面，你看见他们为了报复所作所为，又多少可以理解和畅快，这就是人性的复杂，它不仅仅只有善，有时候压抑怒火的伪善，撕开那层皮囊就成为了恶。不同的报复，结果也不同，有死亡，有和解，有引起公众的同情，也看见社会的不公。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/%E8%9B%AE%E8%8D%92%E6%95%85%E4%BA%8B.jpg&quot; alt=&quot;蛮荒故事&quot;&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这个电影由六个毫无关系的小故事构成，每个故事都不长但高潮迭起，看了让人欲罢不能，情节都充斥
      
    
    </summary>
    
    
      <category term="心情" scheme="https://freefuncode.github.io/categories/%E5%BF%83%E6%83%85/"/>
    
    
      <category term="电影" scheme="https://freefuncode.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>Android View绘制流程</title>
    <link href="https://freefuncode.github.io/2019/10/03/AndroidView%E7%BB%98%E5%88%B6%E6%B5%81%E7%A8%8B/"/>
    <id>https://freefuncode.github.io/2019/10/03/AndroidView绘制流程/</id>
    <published>2019-10-03T04:18:40.000Z</published>
    <updated>2019-10-06T09:44:21.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android-View绘制流程"><a href="#Android-View绘制流程" class="headerlink" title="Android View绘制流程"></a>Android View绘制流程</h1><blockquote><p>Android绘制经历了三个步骤：</p><ul><li>1.Measure 测量View大小</li><li>2.layout 计算摆放位置</li><li>3.draw 画View</li></ul></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android-View绘制流程&quot;&gt;&lt;a href=&quot;#Android-View绘制流程&quot; class=&quot;headerlink&quot; title=&quot;Android View绘制流程&quot;&gt;&lt;/a&gt;Android View绘制流程&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;A
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="知识点" scheme="https://freefuncode.github.io/categories/Android/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="view绘制" scheme="https://freefuncode.github.io/tags/view%E7%BB%98%E5%88%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android屏幕适配</title>
    <link href="https://freefuncode.github.io/2019/10/03/Android%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D/"/>
    <id>https://freefuncode.github.io/2019/10/03/Android屏幕适配/</id>
    <published>2019-10-03T01:07:38.000Z</published>
    <updated>2019-10-06T09:44:21.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Android屏幕适配方案"><a href="#Android屏幕适配方案" class="headerlink" title="Android屏幕适配方案"></a>Android屏幕适配方案</h1><blockquote><p>先讲述一些屏幕适配相关概念，然后介绍下3种主要的适配方案以及优缺点。</p></blockquote><h3 id="一-基本概念"><a href="#一-基本概念" class="headerlink" title="一.基本概念"></a>一.基本概念</h3><h4 id="1-像素（px）"><a href="#1-像素（px）" class="headerlink" title="1. 像素（px）"></a>1. 像素（px）</h4><ul><li>像素是手机屏幕的最小构成单元。<h4 id="2-分辨率-（px）"><a href="#2-分辨率-（px）" class="headerlink" title="2. 分辨率 （px）"></a>2. 分辨率 （px）</h4></li><li>手机在横向、纵向上的像素点数总和，一般描述成 宽高 ，即横向像素点个数纵向像素点个数。</li><li>例如：1080x1920，即宽度方向上有1080个像素点，在高度方向上有1920个像素点。<h4 id="3-屏幕尺寸（inch）"><a href="#3-屏幕尺寸（inch）" class="headerlink" title="3.屏幕尺寸（inch）"></a>3.屏幕尺寸（inch）</h4></li><li>手机对角线的物理尺寸，单位 英寸（inch），一英寸大约2.54cm，</li><li>例如：常见的尺寸有4.7寸、5寸、5.5寸、6寸<h4 id="4-屏幕像素密度-dpi"><a href="#4-屏幕像素密度-dpi" class="headerlink" title="4.屏幕像素密度 (dpi)"></a>4.屏幕像素密度 (dpi)</h4></li><li>每英寸长度上像素点个数。”dot per inch”:</li><li>例如每英寸内有160个像素点，则其像素密度为160dpi。<h5 id="以上四者之间关系"><a href="#以上四者之间关系" class="headerlink" title="以上四者之间关系"></a>以上四者之间关系</h5></li><li>$ √(（宽px）²+（高px）²)  /  (屏幕尺寸inch) = (屏幕像素密度dpi) $ <h4 id="5-dp，dip，sp"><a href="#5-dp，dip，sp" class="headerlink" title="5. dp，dip，sp"></a>5. dp，dip，sp</h4></li><li>dip和dp是一个意思，都是Density Independent Pixels的缩写，即密度无关像素。</li><li>例如：在Android中，规定以160dpi为基准，1dip=1px，如果密度是320dpi，则1dip=2px，以此类推。</li><li>android中的dp在渲染前会将dp转为px，计算公式：<br>$px = density * dp;$<br>$density = dpi / 160;$<br>$px = dp * (dpi / 160);$</li><li>注意：dp与px不一定都是2倍的关系，与屏幕像素密度dpi有关。<h4 id="6-hdpi，mdpi，xhdpi，xxhdpi，xxxhdpi"><a href="#6-hdpi，mdpi，xhdpi，xxhdpi，xxxhdpi" class="headerlink" title="6. hdpi，mdpi，xhdpi，xxhdpi，xxxhdpi"></a>6. hdpi，mdpi，xhdpi，xxhdpi，xxxhdpi</h4></li><li>用来修饰Android中的drawable文件夹及values文件夹，用来区分不同像素密度下的图片和dimen值。</li><li>在设计图标时，对于五种主流的像素密度（mdpi、hdpi、xhdpi、xxhdpi 和 xxxhdpi）应按照 2:3:4:6:8 的比例进行缩放。</li></ul><hr><h3 id="2-适配方案"><a href="#2-适配方案" class="headerlink" title="2.适配方案"></a>2.适配方案</h3><blockquote><p>主要介绍一些适配方案，至于布局编码注意的问题，不详细介绍了。</p><ul><li>使用 “wrap_content” 和 “match_parent” 尺寸值而不是硬编码的尺寸，视图就会相应地仅使用自身所需的空间或展开以填满可用空间。</li><li>weight是线性布局的一个独特的属性，我们可以使用这个属性来按照比例对界面进行分配。</li><li>使用相对布局，禁用绝对布局。等等…</li></ul><p>适配目的是使得某一元素在Android不同尺寸、不同分辨率的手机上具备相同的显示效果。</p></blockquote><h4 id="1-屏幕分辨率限定符（宽高限定符）"><a href="#1-屏幕分辨率限定符（宽高限定符）" class="headerlink" title="1.屏幕分辨率限定符（宽高限定符）"></a>1.屏幕分辨率限定符（宽高限定符）</h4><blockquote><p>设定一个基准的分辨率，也就是设计图对应的分辨率，其他分辨率都根据这个基准分辨率来计算，在不同的尺寸文件夹内部，根据该尺寸编写对应的dimens文件。</p></blockquote><ul><li>屏幕分辨率限定符适配需要在 res 文件夹下创建各种屏幕分辨率对应的 values-xxx 文件夹。</li><li>然后根据一个基准分辨率，例如基准分辨率为 1280x720，将宽度分成 720 份，取值为 1px~720px，将高度分成 1280 份，取值为1px—1280px，生成各种分辨率对应的 dimens.xml 文件。<blockquote><p>基准分辨率 1280x720 对应的dimes文件:</p><ul><li>宽度为720，将任何分辨率的宽度整分为720份，取值为x1-x720</li><li>高度为1280，将任何分辨率的高度整分为1280份，取值为y1-y1280</li></ul><p>那么对于1080*1920的分辨率的dimens文件来说,宽度如下:</p><ul><li>x1=(1080/720)*1=1.5px </li><li>x2=(1080/720)*2=3px<br>…</li><li>x719=(1080/720)*719=1078.5px</li><li>x720=(1080/720)*720=1080px</li></ul></blockquote></li></ul><p>如下分别为分辨率 1280x720 与 1920x1080 所对应的横向dimens.xml 文件：<br><img src="/images/dimens_01.jpg" alt="分辨率 1280x720 与 1920x1080 所对应的横向dimens"></p><ul><li>缺点<br>这个方案有一个致命的缺陷，那就是需要精准命中才能适配，比如1920x1080的手机就一定要找到1920x1080的限定符，否则就只能用统一的默认的dimens文件了。而使用默认的尺寸的话，UI就很可能变形，简单说，就是容错机制很差。</li></ul><h4 id="2-smallestWidth-限定符"><a href="#2-smallestWidth-限定符" class="headerlink" title="2. smallestWidth 限定符"></a>2. smallestWidth 限定符</h4><blockquote><p>smallestWidth适配，或者叫sw限定符适配。指的是Android会识别屏幕可用高度和宽度的最小尺寸的dp值（其实就是手机的宽度值），然后根据识别到的结果去资源文件中寻找对应限定符的文件夹下的资源文件。<br><strong>smallestWidth 限定符 和宽高限定符适配原理上是一样的，都是系统通过特定的规则来选择对应的文件。</strong></p></blockquote><ul><li>smallestWidth 限定符屏幕适配方案 只是把 dimens.xml 文件中的值从 px 换成了 dp，原理和使用方式都是没变的。</li></ul><p><img src="/images/dimens_02.jpg" alt="最小宽度为 360dp 与最小宽度为 640dp 所对应的 dimens"></p><ul><li><p>插件ScreenMatch自动生成dimes文件<br><a href="https://www.jianshu.com/p/1302ad5a4b04" target="_blank" rel="noopener">一种非常好用的Android屏幕适配</a></p></li><li><p>优点：</p><blockquote><ul><li>smallestWidth 限定符比屏幕分辨率限定符需要少量 dimens.xml 文件</li><li>smallestWidth 限定符适配采用的单位是 dp 和 sp。屏幕分辨率限定符采用px。</li><li>屏幕分辨率限定符需要精准命中才能适配，而 smallestWidth 限定符适配寻找 dimens.xml 文件的原理是从大往小找，即使没有完全匹配也能达到不错的适配效果。</li></ul></blockquote></li><li><p>缺点：</p><blockquote><ul><li>侵入性高，在所有地方都需要引用。</li><li>还是没有办法覆盖所有的机型分辨率，部分机型可能适配效果还是不佳。</li><li>不能以高度为基准进行适配。</li><li>生成很多文件，增大APP体积1~2M。</li></ul></blockquote></li></ul><h4 id="3-今日头条适配方案"><a href="#3-今日头条适配方案" class="headerlink" title="3. 今日头条适配方案"></a>3. 今日头条适配方案</h4><blockquote><p>今日头条屏幕适配方案的核心原理在于，动态计算density，通过系统api，将density赋值给系统，抛弃掉系统默认计算density的计算公式。<br>公式: $density = 屏幕宽度px / 设计图宽度（375dp）$</p></blockquote><ul><li><p>如何使用<br><a href="https://blog.csdn.net/wang_yong_hui_1234/article/details/82113714" target="_blank" rel="noopener">今日头条屏幕适配方案</a></p></li><li><p>优点</p><blockquote><ul><li>使用成本非常低，操作非常简单</li><li>侵入性非常低</li><li>可适配三方库的控件和系统的控件</li></ul></blockquote></li><li><p>缺点</p><blockquote><ul><li>会全局影响APP的控件大小，例如一些第三方库控件，他们设计的时候可能设计图尺寸并不是像我们一样是375dp，这样就会导致控件大小变形等一些问题。<br>当某个系统控件或三方库控件的设计图尺寸和和我们项目自身的设计图尺寸差距非常大时，这个问题就越严重。</li></ul></blockquote></li></ul><hr><p>参考：<a href="https://cloud.tencent.com/developer/article/1426238" target="_blank" rel="noopener">Android屏幕适配方案分析</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Android屏幕适配方案&quot;&gt;&lt;a href=&quot;#Android屏幕适配方案&quot; class=&quot;headerlink&quot; title=&quot;Android屏幕适配方案&quot;&gt;&lt;/a&gt;Android屏幕适配方案&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;先讲述一些屏幕适配相关概念
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="知识点" scheme="https://freefuncode.github.io/categories/Android/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="屏幕适配" scheme="https://freefuncode.github.io/tags/%E5%B1%8F%E5%B9%95%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>《蝴蝶效应》电影观后感</title>
    <link href="https://freefuncode.github.io/2019/10/02/%E8%9D%B4%E8%9D%B6%E6%95%88%E5%BA%94-%E7%94%B5%E5%BD%B1%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    <id>https://freefuncode.github.io/2019/10/02/蝴蝶效应-电影观后感/</id>
    <published>2019-10-02T09:04:13.000Z</published>
    <updated>2019-10-06T09:44:21.964Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/TheButterflyEffect.jpg" alt="蝴蝶效应"></p><p>丢失一个钉子，坏了一只蹄铁；<br>坏了一只蹄铁，折了一匹战马；<br>折了一匹战马，伤了一位骑士；<br>伤了一位骑士，输了一场战斗；<br>输了一场战斗，亡了一个帝国。</p><hr><blockquote><p>　　蝴蝶效应（The Butterfly Effect）：<br>　　主角伊万曾经有一个糟糕的童年，因为他行为闯下了大祸，令他童年充满不堪回忆的往事。而事实上，他确实只是依稀记得一点可怕的情景，这些情景一直纠缠着他的正常生活。伊万接受心理学家建议，把琐碎生活记在记事本里，却偶然发现通过记事本回到过去。<br>　　这时他才清楚记起，童年时候的自己做了那么多的错事。他幻想着用现在的意识，潜入童年的身体，去弥补种种过失给人们带来的伤害，尤其是希望与当年暗恋的凯西最终走回一起。然而他一次次的跨越时空的更改，只能越来越招致现实世界的不可救药。</p></blockquote><hr><h5 id="精彩影评："><a href="#精彩影评：" class="headerlink" title="精彩影评："></a>精彩影评：</h5><ul><li>每一次的选择已经是最好的选择了。改变未必是优化。</li><li>你无法改变一个人又不毁掉他。</li><li>我们都有过回到过去的冲动，都想重新开始做个更好的自己，然而宿命横亘在前，不管你怎样做，无论你做怎样的选择，最终都避不开无休无止的挫败伤痛。最干净的办法就是从未来过。这似乎有些悲观消极，因此圣贤又谆谆告诫我们，往者不可谏，来者犹可追，告诉我们满目山河空念远，不如怜取眼前人。</li></ul><hr><p>暂且不谈，我如果具备这样改变过去的特异能力，当然如果我有，我也许会去改变一些事，但是改变什么？当然是买彩票了，哈哈哈。</p><p>其实回归现实的说，特异功能是不会有的，也许影片导演在告诉我们，反思过去的人生，你活的开心吗。最后，你会发现其实现在这样平平淡淡挺好，改变从来不是一下子，国学讲究中庸，也许这就是古人悟出的生活真谛。改变都是从一点一滴开始，用力过猛适得其反。永远不知道未来事情走向，能做的就是坦然面对所有即将发生的事，做好现在正在做的事，对已发生的事释然。</p><p>改变总是在不经意间。同样每一个不经意间都可能改变所有事。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/TheButterflyEffect.jpg&quot; alt=&quot;蝴蝶效应&quot;&gt;&lt;/p&gt;
&lt;p&gt;丢失一个钉子，坏了一只蹄铁；&lt;br&gt;坏了一只蹄铁，折了一匹战马；&lt;br&gt;折了一匹战马，伤了一位骑士；&lt;br&gt;伤了一位骑士，输了一场战斗；&lt;br&gt;输了一场
      
    
    </summary>
    
    
      <category term="心情" scheme="https://freefuncode.github.io/categories/%E5%BF%83%E6%83%85/"/>
    
    
      <category term="电影" scheme="https://freefuncode.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>关于职业生涯的想法</title>
    <link href="https://freefuncode.github.io/2019/10/01/%E5%85%B3%E4%BA%8E%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF%E7%9A%84%E6%83%B3%E6%B3%95/"/>
    <id>https://freefuncode.github.io/2019/10/01/关于职业生涯的想法/</id>
    <published>2019-10-01T04:31:39.000Z</published>
    <updated>2019-10-01T04:32:46.010Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于职业生涯的想法"><a href="#关于职业生涯的想法" class="headerlink" title="关于职业生涯的想法"></a>关于职业生涯的想法</h3><blockquote><p>一边看着国庆阅兵直播一边写写最近的一些想法。<br>最近因为香港问题，还有70年建国，网上很多爱国的段子，软件行业发展这么迅速，前提是中国高速发展的保障，此生不悔入华夏，来世还做中国人。我不是愤青，但是作为中国人真的很自豪。</p></blockquote><hr><p>前不久一篇文章：“一年前,我月薪两万被人叫老总,如今35岁在美团送外卖” 火爆互联网，更有衍生的段子，工程师的进阶之路：25岁软件工程师，28岁:高级软件工程师，32岁:架构师，35岁: 外卖员。</p><p>于自己：中年人，家里有娃要养，背负房贷，车贷，不敢随便动、不能随心选，因为稍微一随便就是牵一发而动全身。于公司：新人看潜力、“老人”看能力。互联网公司追求年轻化，35岁+需求量越来越少，但是当我们这批到35岁时候，程序员从业人数巨大，企业需求量能不能跟上，毕竟大把后浪等着拍你呢！能想想到的是，35岁+ 厮杀会比现在阶段更惨烈。</p><blockquote><p>35岁彷佛是一道坎，程序员职业生涯的分水岭，程序员生涯往上走理想的进阶无非两条路：<br>1.技术专家（架构师），2.管理。</p></blockquote><p>第一条路：技术专家。对于安卓来说，目前大部分公司很多技术专家层都是后端开发提升上来的，安卓端毕竟还是前端用户交互，核心业务数据还是在后端管理，换句话说，前端需要的技术专家远远少于后端，况且前端不仅仅是安卓，还包括ios，h5，react native等等种类繁多。相比之下，重要性不言而喻。总之最后能成功进阶到企业需要的技术专家，从概率讲，战场厮杀惨重。也需要考虑到35岁+，身体，思维活跃能否跟的上。小公司的技术专家，工作量也还是很大的，需要考虑加班承受力。</p><p>第二条路：程序员转管理层，这也是一条不错的路，但是需要训练自己不仅仅是专业技能，需要提升自己的管理技能。可以先从项目经理转型过渡。相比于第一个技术专家，正常来说厮杀会小点，风险也小点，因为对于我来说，技术栈是有风险的，工作7年，也见证过php，.net从兴盛到没落。像现在成立的一些互联网公司的技术栈与七年前的传统软件行业技术栈是不同的，尤其前端。2012年刚毕业，安卓才慢慢火起来，但是那时候苹果已经开始到达顶峰，我周边苹果用户量是超过安卓的；现在，我有感觉，我周边安卓用户超越了苹果。曾经的移动手机霸主，诺基亚早已宣布倒闭，前端这个行业日新月异，你不知道你现在精通的技术领域，不知道什么时候可能就没落了，保持持续学习，没有年轻人有活力和冲劲。转管理层是目前来看是比走技术领域发展方向要宽广，成本更小。</p><p>我之前看过这样一句话，大概意思，30岁之前如果在行业领域没有突出成就，应该就要转行了。如果30岁没有达到设定的技术高度，如果30岁后还把所有精力放到技术上，风险有点大，因为基本你不会再有什么突出成就了。也许有人会反驳我，程序员就应该搞技术研究，一直朝技术专家，架构师职业发展。这些话你说给公司听就行了，因为从投资角度出发，30岁后你要考虑提升自己的综合实力了，不仅仅是技术，反之我也不是说技术不重要了，只是说把精力需要适当从关注技术上，分散一部分精力提升自己的综合管理能力。</p><blockquote><p>技术是最后保障你有一口饭吃的基本，但是综合实力决定你能走多远，走多好。</p></blockquote><p>曾经，我对于新鲜的一些技术，都乐于尝鲜，也经常活跃各个网络技术博客论坛中。不知道什么时候态度有点转变了，不大愿意花时间去研究目前用不上的技术，除非对我很有诱惑力，也许是见多了新技术的层出不穷，也许是势利了。工作七年也接过几个熟人介绍的外包，心态有点转变。曾经因为兴趣爱好，非常乐于花时间去研究新技术，现在或许只有需求驱动，换句话说就是因为挣钱才会去研究一些项目中需要的技术。现在学习，工作，生活，心里都在考虑成本，值不值。因为程序员时间真的不够用，在现在很多公司996市场环境下，如果换算成时薪，工资真的不算高。程序员除去工作时间，留给自己的时间真的不多。</p><p>经常在想，还有半年时间后，我也要步入30岁了，30岁后的人生需要哪些技能才能让自己走的更远呢？</p><p>曾经对于存钱没有概念，存钱对我来说就是攒钱，不让自己乱挥霍，那就是存银行定期，也不愿花时间去研究什么基金和股票等等投资知识，因为本钱就那么多，即使年化率很高，好像最终的收益也没多多少，不疼不痒。现在观念转变，即使收益少，苍蝇蚊子也是肉，就当是给自己设定的目标去了解更多领域，提升自己各领域知识。</p><hr><p>接下来的半年，目标还是想在技术领域有所突破，越来越在其他领域投入更多时间，增加知识储备，提升综合实力。</p><p>思考良久，其实，都是扯废话，也没得出努力方向，30岁一切皆有可能。能做的只是继续提升自己，全面提升自己。</p><p>加油吧！中年人！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;关于职业生涯的想法&quot;&gt;&lt;a href=&quot;#关于职业生涯的想法&quot; class=&quot;headerlink&quot; title=&quot;关于职业生涯的想法&quot;&gt;&lt;/a&gt;关于职业生涯的想法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一边看着国庆阅兵直播一边写写最近的一些想法。&lt;br&gt;最近因
      
    
    </summary>
    
    
      <category term="心情" scheme="https://freefuncode.github.io/categories/%E5%BF%83%E6%83%85/"/>
    
    
      <category term="职业生涯" scheme="https://freefuncode.github.io/tags/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF/"/>
    
  </entry>
  
  <entry>
    <title>mac搭建hexo环境</title>
    <link href="https://freefuncode.github.io/2019/09/30/mac%E6%90%AD%E5%BB%BAhexo%E7%8E%AF%E5%A2%83/"/>
    <id>https://freefuncode.github.io/2019/09/30/mac搭建hexo环境/</id>
    <published>2019-09-30T07:47:50.000Z</published>
    <updated>2019-10-01T04:30:06.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mac搭建hexo环境"><a href="#mac搭建hexo环境" class="headerlink" title="mac搭建hexo环境"></a>mac搭建hexo环境</h2><h3 id="1-安装homebrew"><a href="#1-安装homebrew" class="headerlink" title="1. 安装homebrew"></a>1. 安装homebrew</h3><h5 id="1-1-Mac-OS-X-10-11系统以后，否则跳至1-2先授权。"><a href="#1-1-Mac-OS-X-10-11系统以后，否则跳至1-2先授权。" class="headerlink" title="1.1 Mac OS X 10.11系统以后，否则跳至1.2先授权。"></a>1.1 Mac OS X 10.11系统以后，否则跳至1.2先授权。</h5><p>安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><h5 id="1-2-授权"><a href="#1-2-授权" class="headerlink" title="1.2 授权:"></a>1.2 授权:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown -R $USER /usr/local</span><br></pre></td></tr></table></figure><h3 id="2-安装npm"><a href="#2-安装npm" class="headerlink" title="2.安装npm"></a>2.安装npm</h3><h5 id="2-1-命令安装："><a href="#2-1-命令安装：" class="headerlink" title="2.1 命令安装："></a>2.1 命令安装：</h5><p><code>$  brew install npm</code></p><h5 id="2-2-pkg文件下载安装，需要设置环境变量："><a href="#2-2-pkg文件下载安装，需要设置环境变量：" class="headerlink" title="2.2 pkg文件下载安装，需要设置环境变量："></a>2.2 pkg文件下载安装，需要设置环境变量：</h5><p>创建：<code>touch ~/.bash_profile</code><br>打开：<code>open -t ~/.bash_profile</code><br>打开的文档里末尾加上：<code>export PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</code><br>执行：<code>source .bash_profile</code></p><h3 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h3><h5 id="3-1-设置淘宝镜像，安装hexo"><a href="#3-1-设置淘宝镜像，安装hexo" class="headerlink" title="3.1 设置淘宝镜像，安装hexo"></a>3.1 设置淘宝镜像，安装hexo</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><h5 id="3-2-如果权限报错（npm-ERR-Error-EACCES-permission-denied-access-39-usr-local-lib-node-modules-39-）"><a href="#3-2-如果权限报错（npm-ERR-Error-EACCES-permission-denied-access-39-usr-local-lib-node-modules-39-）" class="headerlink" title="3.2 如果权限报错（npm ERR! Error: EACCES: permission denied, access &#39;/usr/local/lib/node_modules&#39;）"></a>3.2 如果权限报错（<code>npm ERR! Error: EACCES: permission denied, access &#39;/usr/local/lib/node_modules&#39;</code>）</h5><p>修改安装目录的权限： <code>sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}</code></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p> 如果抛开安装过程中遇到的权限问题，整个安装过程命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br><span class="line">brew install git</span><br><span class="line">brew install node</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>Hexo init命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init hexo_blog</span><br><span class="line">cd hexo_blog</span><br><span class="line">cnpm install</span><br></pre></td></tr></table></figure><p>目前用到的两个插件：</p><ul><li>cnpm install hexo-deployer-git –save</li><li>cnpm install –save hexo-tag-aplayer</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mac搭建hexo环境&quot;&gt;&lt;a href=&quot;#mac搭建hexo环境&quot; class=&quot;headerlink&quot; title=&quot;mac搭建hexo环境&quot;&gt;&lt;/a&gt;mac搭建hexo环境&lt;/h2&gt;&lt;h3 id=&quot;1-安装homebrew&quot;&gt;&lt;a href=&quot;#1-安装h
      
    
    </summary>
    
    
      <category term="GitHub" scheme="https://freefuncode.github.io/categories/GitHub/"/>
    
    
      <category term="hexo" scheme="https://freefuncode.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin与java对比</title>
    <link href="https://freefuncode.github.io/2019/09/28/Kotlin%E4%B8%8Ejava%E5%AF%B9%E6%AF%94/"/>
    <id>https://freefuncode.github.io/2019/09/28/Kotlin与java对比/</id>
    <published>2019-09-28T09:48:07.000Z</published>
    <updated>2019-09-28T09:52:54.261Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5d8f2aa4e51d4577ea077ead" target="_blank" rel="noopener">点击查看原文</a></p><h2 id="Kotlin与java对比"><a href="#Kotlin与java对比" class="headerlink" title="Kotlin与java对比"></a>Kotlin与java对比</h2><blockquote><p>最近因为工作关系，需要迭代维护公司现有kotlin客服聊天的项目。之前一直使用java，对于kotlin还是比较陌生的。<br>使用kotlin一段时间后，感触还是有点。kotlin比java真是太简洁了，一段代码，刚开始可能按java语法习惯编写，然后根据ide的提示，一步一步优化，缩减代码量，最后发现，代码量的差距很大。最后剩下的代码可能就只剩下了业务逻辑了。<br>kotlin结合mvvm架构，项目非常简洁。<br>kotlin是基于jvm编程语言，同java一样可以编译成class字节码文件。同java之间可以相互调用。</p></blockquote><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><hr><h4 id="1-定义函数"><a href="#1-定义函数" class="headerlink" title="1.定义函数"></a>1.定义函数</h4><p>java：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public String retrunStr(String str)&#123;</span><br><span class="line">        return str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kotlin：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fun returnStr(str: String): String &#123;</span><br><span class="line">        return str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="2-定义变量"><a href="#2-定义变量" class="headerlink" title="2.定义变量"></a>2.定义变量</h4><p>java：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public String str1;</span><br><span class="line">public static final String str2 = &quot;HelloWorld&quot;;</span><br></pre></td></tr></table></figure><p>kotlin：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str1: String? = null</span><br><span class="line">val str2 = &quot;HelloWorld&quot;</span><br></pre></td></tr></table></figure><hr><h4 id="3-空置判断-：-和"><a href="#3-空置判断-：-和" class="headerlink" title="3. 空置判断 ：? 和 !!"></a>3. 空置判断 ：? 和 !!</h4><p>java：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">?</span><br><span class="line">public String retrunStr2(String str) &#123;</span><br><span class="line">        if (str != null) &#123;</span><br><span class="line">            return str1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">!!</span><br><span class="line">public void toLowerStr(String str) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            str.toLowerCase();</span><br><span class="line">        &#125; catch (NullPointerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kotlin：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">?</span><br><span class="line">fun retrunStr2(str: String?): String &#123;</span><br><span class="line">        return str ?: &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">!!</span><br><span class="line">fun toLowerStr(str: String) &#123;</span><br><span class="line">        str!!.toLowerCase()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="4-for循环"><a href="#4-for循环" class="headerlink" title="4.for循环"></a>4.for循环</h4><p>java：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public void test() &#123;</span><br><span class="line">        List&lt;String&gt; arr = Arrays.asList(&quot;java&quot;, &quot;kotlin&quot;);</span><br><span class="line">        for (int i = 0; i &lt; arr.size(); i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; arr.size(); i++) &#123;</span><br><span class="line">            System.out.println(arr.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (Iterator it = arr.iterator(); it.hasNext(); ) &#123;</span><br><span class="line">            System.out.println(it);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kotlin：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fun test() &#123;</span><br><span class="line">        val arr = Arrays.asList(&quot;java&quot;, &quot;kotlin&quot;)</span><br><span class="line">        for (i in arr.indices) &#123;</span><br><span class="line">            println(i)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (i in arr.indices) &#123;</span><br><span class="line">            println(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        val it = arr.iterator()</span><br><span class="line">        while (it.hasNext()) &#123;</span><br><span class="line">            println(it)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(item in arr)&#123;</span><br><span class="line">            println(item)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="5-when-表达式"><a href="#5-when-表达式" class="headerlink" title="5.when 表达式"></a>5.when 表达式</h4><p>java：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void test1() &#123;</span><br><span class="line">        int item = 3;</span><br><span class="line">        switch (item) &#123;</span><br><span class="line">            case 1:</span><br><span class="line">                System.out.println(1);</span><br><span class="line">                break;</span><br><span class="line">            case 2:</span><br><span class="line">                System.out.println(2);</span><br><span class="line">                break;</span><br><span class="line">            case 3:</span><br><span class="line">                System.out.println(3);</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                System.out.println(0);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kotlin：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fun test1() &#123;</span><br><span class="line">        val item = 3</span><br><span class="line">        when (item) &#123;</span><br><span class="line">            1 -&gt; println(1)</span><br><span class="line">            2 -&gt; println(2)</span><br><span class="line">            3 -&gt; println(3)</span><br><span class="line">            else -&gt; println(0)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="标准函数"><a href="#标准函数" class="headerlink" title="标准函数"></a>标准函数</h3><hr><h4 id="1-let"><a href="#1-let" class="headerlink" title="1.let"></a>1.let</h4><blockquote><p>let 扩展函数是一个作用域函数，当你需要去定义一个变量在一个特定的作用域范围内，可以使用let函数。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">object.let&#123;</span><br><span class="line">   it.todo()//在函数体内使用it替代object对象去访问其公有的属性和方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">java示例:</span><br><span class="line">------------</span><br><span class="line">public static final void main(@NotNull String[] args) &#123;</span><br><span class="line">        Intrinsics.checkParameterIsNotNull(args, &quot;args&quot;);</span><br><span class="line">        String var2 = &quot;testLet&quot;;</span><br><span class="line">        System.out.println(var2.length());//输出 7</span><br><span class="line">        int result = 1000;</span><br><span class="line">        System.out.println(result); //输出 1000</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">kotlin示例:</span><br><span class="line">------------</span><br><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">        val result = &quot;testLet&quot;.let &#123;</span><br><span class="line">            println(it.length) //输出 7</span><br><span class="line">            1000 //在函数块内可以通过 it 指代该对象。</span><br><span class="line">        &#125;</span><br><span class="line">        //返回值为函数块的最后一行或指定return表达式。1000</span><br><span class="line">        println(result) //输出1000</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="2-with"><a href="#2-with" class="headerlink" title="2.with"></a>2.with</h4><blockquote><p>with 将某对象作为函数的参数，在函数块内可以通过 this 指代该对象。返回值为函数块的最后一行或指定return表达式。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with(object)&#123;</span><br><span class="line">  //todo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">java示例:</span><br><span class="line">------------</span><br><span class="line">public final void main(@NotNull String[] args) &#123;</span><br><span class="line">        Intrinsics.checkParameterIsNotNull(args, &quot;args&quot;);</span><br><span class="line">        User user = new User(&quot;Kotlin&quot;, 1, &quot;1111111&quot;);</span><br><span class="line">        System.out.println(&quot;my name is &quot; + user.getName() + &quot;, I am &quot; + user.getAge() + &quot; years old, my phone number is &quot; + user.getPhoneNum());</span><br><span class="line">        //输出 my name is Kotlin, I am 1 years old, my phone number is 1111111</span><br><span class="line">        int result = 1000;</span><br><span class="line">        System.out.println(&quot;result: &quot; + result); //输出 1000</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private class User &#123;</span><br><span class="line">        String name;</span><br><span class="line">        Integer age;</span><br><span class="line">        String phoneNum;</span><br><span class="line"></span><br><span class="line">        public User(String name, int age, String phoneNum) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getName() &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Integer getAge() &#123;</span><br><span class="line">            return age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getPhoneNum() &#123;</span><br><span class="line">            return phoneNum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">kotlin示例:</span><br><span class="line">------------</span><br><span class="line"> fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">        val user = User(&quot;Kotlin&quot;, 3, &quot;1111111&quot;)</span><br><span class="line">        val result = with(user) &#123;</span><br><span class="line">        //这里this 指 user,this可以省略</span><br><span class="line">            println(&quot;my name is $this.name, I am $age years old, my phone number is $phoneNum&quot;)</span><br><span class="line">            //输出 my name is Kotlin, I am 1 years old, my phone number is 1111111</span><br><span class="line">            1000</span><br><span class="line">        &#125;</span><br><span class="line">        //返回值为函数块的最后一行或指定return表达式。1000</span><br><span class="line">        println(&quot;result: $result&quot;)//输出 1000</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">class User(name: String, age: Int, phoneNum: String) &#123;</span><br><span class="line">        var name: String</span><br><span class="line">            get() &#123;</span><br><span class="line">                return name</span><br><span class="line">            &#125;</span><br><span class="line">            set(value) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        var age: Int</span><br><span class="line">            get() &#123;</span><br><span class="line">                return age</span><br><span class="line">            &#125;</span><br><span class="line">            set(value) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        var phoneNum: String</span><br><span class="line">            get() &#123;</span><br><span class="line">                return phoneNum</span><br><span class="line">            &#125;</span><br><span class="line">            set(value) &#123;&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="3-run"><a href="#3-run" class="headerlink" title="3.run"></a>3.run</h4><blockquote><p>run 函数实际上可以说是let和with两个函数的结合体，run函数只接收一个lambda函数为参数，以闭包形式返回，返回值为最后一行的值或者指定的return的表达式。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">object.run&#123;</span><br><span class="line">//todo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">java示例:</span><br><span class="line">------------</span><br><span class="line">    public final void main(@NotNull String[] args) &#123;</span><br><span class="line">        Intrinsics.checkParameterIsNotNull(args, &quot;args&quot;);</span><br><span class="line">        User user = new User(&quot;Kotlin&quot;, 1, &quot;1111111&quot;);</span><br><span class="line">        System.out.println(&quot;my name is &quot; + user.getName() + &quot;, I am &quot; + user.getAge() + &quot; years old, my phone number is &quot; + user.getPhoneNum());</span><br><span class="line">        int result = 1000;</span><br><span class="line">        System.out.println(&quot;result: &quot; + result);//输出 1000</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">kotlin示例:</span><br><span class="line">------------</span><br><span class="line">    fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">        val user = User(&quot;Kotlin&quot;, 1, &quot;1111111&quot;)</span><br><span class="line">        val result = user.run &#123;</span><br><span class="line">        //这里this 指 user,this可以省略.</span><br><span class="line">            println(&quot;my name is $this.name, I am $age years old, my phone number is $phoneNum&quot;)</span><br><span class="line">            1000</span><br><span class="line">        &#125;</span><br><span class="line">        //返回值为最后一行的值或者指定的return的表达式 1000</span><br><span class="line">        println(&quot;result: $result&quot;)//输出 1000</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="4-apply"><a href="#4-apply" class="headerlink" title="4.apply"></a>4.apply</h4><blockquote><p>apply 函数和run函数很像，唯一不同点就是它们各自返回的值不一样，run函数是以闭包形式返回最后一行代码的值，而apply函数的返回的是传入对象的本身。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">object.apply&#123;</span><br><span class="line">//todo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">java示例:</span><br><span class="line">------------</span><br><span class="line">    public final void main(String[] args) &#123;</span><br><span class="line">        User user = new User(&quot;Kotlin&quot;, 1, &quot;1111111&quot;);</span><br><span class="line">        String var5 = &quot;my name is &quot; + user.getName() + &quot;, I am &quot; + user.getAge() + &quot; years old, my phone number is &quot; + user.getPhoneNum();</span><br><span class="line">        System.out.println(var5);</span><br><span class="line">        String var3 = &quot;result: &quot; + user;</span><br><span class="line">        System.out.println(var3); //打印 user对象</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">kotlin示例:</span><br><span class="line">------------</span><br><span class="line">    fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">        val user = User(&quot;Kotlin&quot;, 1, &quot;1111111&quot;)</span><br><span class="line">        val result = user.apply &#123;</span><br><span class="line">        //这里this 指 user,this可以省略.</span><br><span class="line">            println(&quot;my name is $this.name, I am $age years old, my phone number is $phoneNum&quot;)</span><br><span class="line">            1000</span><br><span class="line">        &#125;</span><br><span class="line">        //apply函数的返回的是传入对象的本身 user</span><br><span class="line">        println(&quot;result: $result&quot;) //打印 user对象</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="5-also"><a href="#5-also" class="headerlink" title="5.also"></a>5.also</h4><blockquote><p>also 函数的结构实际上和let很像唯一的区别就是返回值的不一样，let是以闭包的形式返回，返回函数体内最后一行的值，如果最后一行为空就返回一个Unit类型的默认值。而also函数返回的则是传入对象的本身。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">object.also&#123;</span><br><span class="line">//todo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">java示例:</span><br><span class="line">------------</span><br><span class="line">    public void main(String[] args) &#123;</span><br><span class="line">        String var1 = &quot;test&quot;;</span><br><span class="line">        System.out.println(var1.length());//输出 4</span><br><span class="line">        System.out.println(var1);//输出 test</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">kotlin示例:</span><br><span class="line">------------</span><br><span class="line">    fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">        val result = &quot;test&quot;.also &#123;</span><br><span class="line">        //it 指的是 &quot;test&quot;</span><br><span class="line">            println(it.length) //输出 4</span><br><span class="line">            1000</span><br><span class="line">        &#125;</span><br><span class="line">        //also函数返回的是传入对象的本身 &quot;test&quot;</span><br><span class="line">        println(result) //输出 test</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="函数小结：let-with-run-apply-also函数区别"><a href="#函数小结：let-with-run-apply-also函数区别" class="headerlink" title="函数小结：let,with,run,apply,also函数区别"></a>函数小结：let,with,run,apply,also函数区别</h3><table><thead><tr><th align="left">函数名</th><th align="left">使用方法</th><th align="left">it,this对象</th><th align="left">返回值</th><th align="center">是否是扩展函数</th><th align="left">适用的场景</th></tr></thead><tbody><tr><td align="left">let</td><td align="left">object.let{ it.xxx }</td><td align="left">it指代当前对象</td><td align="left">闭包形式返回</td><td align="center">是</td><td align="left">适用于处理不为null的操作场景</td></tr><tr><td align="left">with</td><td align="left">with(object){ xxx }</td><td align="left">this指代当前对象或者省略</td><td align="left">闭包形式返回</td><td align="center">否</td><td align="left">适用于调用同一个类的多个方法时，可以省去类名重复，直接调用类的方法即可，经常用于Android中RecyclerView中onBinderViewHolder中，数据model的属性映射到UI上</td></tr><tr><td align="left">run</td><td align="left">object.run{ xxx }</td><td align="left">this指代当前对象或者省略</td><td align="left">闭包形式返回</td><td align="center">是</td><td align="left">适用于let,with函数任何场景。</td></tr><tr><td align="left">apply</td><td align="left">object.apply{ xxx }</td><td align="left">this指代当前对象或者省略</td><td align="left">返回this</td><td align="center">是</td><td align="left">1、适用于run函数的任何场景，一般用于初始化一个对象实例的时候，操作对象属性，并最终返回这个对象。<br>2、动态inflate出一个XML的View的时候需要给View绑定数据也会用到.<br>3、一般可用于多个扩展函数链式调用 <br>4、数据model多层级包裹判空处理的问题</td></tr><tr><td align="left">also</td><td align="left">object.also{ xxx }</td><td align="left">it指代当前对象</td><td align="left">返回it</td><td align="center">是</td><td align="left">适用于let函数的任何场景，一般可用于多个扩展函数链式调用</td></tr></tbody></table><p>参考文章：<a href="https://blog.csdn.net/u013064109/article/details/78786646" target="_blank" rel="noopener">Kotlin系列之let、with、run、apply、also函数的使用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5d8f2aa4e51d4577ea077ead&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Kotlin与java对比&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="kotlin" scheme="https://freefuncode.github.io/categories/Android/kotlin/"/>
    
    
      <category term="kotlin" scheme="https://freefuncode.github.io/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>《巴比龙》电影观后感</title>
    <link href="https://freefuncode.github.io/2019/09/28/%E5%B7%B4%E6%AF%94%E9%BE%99%E7%94%B5%E5%BD%B1%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    <id>https://freefuncode.github.io/2019/09/28/巴比龙电影观后感/</id>
    <published>2019-09-28T05:06:52.000Z</published>
    <updated>2019-09-28T05:10:29.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《巴比龙》电影观后感"><a href="#《巴比龙》电影观后感" class="headerlink" title="《巴比龙》电影观后感"></a>《巴比龙》电影观后感</h1><hr><p><img src="/images/xinqing_babilong_01.jpg" alt="恶魔岛"></p><p>巴比龙 音译：Papillon，在法语里意为“蝴蝶”。</p><p>生于法国的不羁少年亨利·查理叶，身上满是纹身，因为把蝴蝶纹在了最醒目的胸前，人送绰号巴比龙。</p><p>亨利·查理叶（法 ：Henri Charri ╮e，1906年11月16日－1973年7月29日）是一名法国作家，著有小說《巴比龙》，內容关于他在法属圭亚那流放地被监禁和逃狱的回忆录。 </p><p>1973年12月16日电影巴比龙上映，但是同年亨利·查理叶去世，未能看到该电影上映。</p><p>2018年8月24日在美国上映翻拍版巴比龙，于2019年7月26日中国内地上映。</p><hr><p>说到巴比龙，很多人会拿肖申克的救赎作比较。比起精心设计的《肖申克的救赎》，《巴比龙》更简单也更纯粹。比肖申克来的更贴近人生。</p><p>看到一张电影海报简介语：想飞之心，永远不死。2019版电影讲述了，三次越狱，但是小说远不止三次。</p><p>巴比龙和路易斯在监狱中一次一次的经历结下深厚的友谊，在电影最后的恶魔岛，这最后一次越狱，路易斯选择了留下来，他说，他现在属于这里了，也许是他因为杀了越狱的另一个同伴吧，他在忏悔，也许是因为没了牵挂（老婆带着他的钱跟了他的律师），而在恶魔岛，他能自由的在壁顶画画，现在画画是他唯一的寄托，也许是这一次不想在拖累巴比龙。</p><hr><p>每一次主人公的越狱都牵动着我的心，残酷，压抑，甚至带有一丝绝望。每次越狱，脑袋就能回想起，监狱长的那段话。</p><p>“如果你要越狱的话，在丛林里你能遇到最好的事情就是饥饿，或者你可以选择大海，我向你保证鲨鱼是很饿的。如果你在首次尝试之后还活着，你将得到两年的单独囚禁，第二次则是五年，随后就是恶魔岛上的无期监禁。当然如果你在逃跑的时候杀了人，你将会被送到断头台上。”</p><hr><p>发现了一个对影片故事背景交代很清楚的文章，可以看看：<br> <a href="http://www.sohu.com/a/274710667_424265" target="_blank" rel="noopener">比肩《肖申克的救赎》！真实事件改编，史上最具争议的越狱！</a></p><hr><p><img src="/images/xinqing_babilong_02.jpg" alt="剧照"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;《巴比龙》电影观后感&quot;&gt;&lt;a href=&quot;#《巴比龙》电影观后感&quot; class=&quot;headerlink&quot; title=&quot;《巴比龙》电影观后感&quot;&gt;&lt;/a&gt;《巴比龙》电影观后感&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/images/xinqing_babilon
      
    
    </summary>
    
    
      <category term="心情" scheme="https://freefuncode.github.io/categories/%E5%BF%83%E6%83%85/"/>
    
    
      <category term="电影" scheme="https://freefuncode.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>汉尼拔电影观后感</title>
    <link href="https://freefuncode.github.io/2019/09/22/%E6%B1%89%E5%B0%BC%E6%8B%94%E7%94%B5%E5%BD%B1%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    <id>https://freefuncode.github.io/2019/09/22/汉尼拔电影观后感/</id>
    <published>2019-09-22T05:00:36.000Z</published>
    <updated>2019-09-22T05:07:34.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="汉尼拔电影观后感"><a href="#汉尼拔电影观后感" class="headerlink" title="汉尼拔电影观后感"></a>汉尼拔电影观后感</h1><p><img src="/images/xinqing_hanniba.jpg" alt="汗尼拔"></p><p>这周末在家无事，观看了汗尼拔系列四部电影。<strong>少年汗尼拔</strong>，<strong>红龙</strong>，<strong>沉默的羔羊</strong>，<strong>汗尼拔</strong>。电影是恐怖片的题材。</p><hr><p>看完，我也认真的想了下，这个汗尼拔是坏人吗？显然不是。如果说的话，应该用<strong>恶人</strong>来形容比较好吧！好比古龙笔下的武侠小说《绝代双骄》里恶人谷的十大恶人，只是脾气习惯特别不正常，有不同的怪癖，并把这些怪癖研究成学问，在江湖上横行。如果说汗尼拔的怪癖那估计就是吃人，但是只吃对他不礼貌的人。汉尼拔智慧过人，才华横溢，第一步少年汗尼拔中，使用测谎仪，可以看出他极其沉着稳重。在医学领域也有很多过人之处，擅长解剖，熟知人体每一处要害。第一部描述了汗尼拔的少年经历。</p><p>他也是变态心理学专家，当然他自己也是一名精神病人。在红龙和沉默的羔羊中，帮助警察分析案情，熟知各种变态犯罪份子的心理活动。对人性有极其深刻的了解，具有非凡的洞察力。第二部红龙，第三部沉默的羔羊讲述了汗尼拔各种牛逼之处。</p><p>第四部汗尼拔，则讲述了他逃狱后与女主史达琳之间的故事，一个杀人如魔的变态，内心藏着一点的柔情，一下子汗尼拔这个人物饱满丰富起来了。</p><hr><p>看完后，虽然很多血腥，让人作呕的画面，但是还是让人热血沸腾。一个把杀人，吃人行为操作到极致，真是应了那句<strong>流氓不可怕,就怕流氓有文化</strong>。</p><p>如果从现代的角度出发，汗尼拔的专业是什么，<strong>医生</strong>。曾经我在填专业时候，对医生嗤之以鼻，可能生活在农村，目光短浅的我，当时对医生的印象大概就是村头的卫生院的一些赤脚医生吧。慢慢社会阅历丰富起来，还是对医生充满敬佩和向往的。如果让我在选一次我的专业的话，我一定会选医生。虽然程序员是我当时稀里糊涂选的，但是目前来看也没后悔过。</p><p>职业思考起来的话，<strong>医生</strong>和<strong>程序员</strong>这两个完全不同的职业。医生是一个随着工龄越大，越吃香，程序员在目前来看是青春饭。咋一看，从长远来看医生好像比较好，但是个中的幸苦估计只有自己知道。两个职业也有共同点，医生和程序员都是靠技术的积累，医生需要慢慢考证打怪升级，程序员需要不断对层出不穷的新技术研究学习。各行各业都不容易。唯有不断学习，你才能拔尖，才能脱颖而出。</p><hr><p>看完电影，当然不仅仅对医生这个职业有点思索，也对电影背景有点思考。故事是发生在二战的时候，人吃人的大时代背景。生命如草芥的时代。</p><p>主人翁汗尼拔，父母在战争交火过程中被流弹打死，妹妹被一些穷凶极恶的逃亡战犯吃了。没有亲人，对于他的世界观来说，对他出言不逊或者想伤害他的人，那就杀，吃。不用顾及社会或者他人对他的看法，活在自己的世界。没有法律，道德意识。<br>回归原始动物本性的活着。只是因为他敏锐的观察力，狩猎者的心理姿态，让他能够一直站在食物链的最顶端，审视着他周边所有的生物。慢慢剥离人性，人类是一个群居动物，我们不仅要重视自己，也要重视周边人的感受，一个脱离法律，脱离道德约束的人是对周边人存在很大危险性的个体。</p><p>无疑汗尼拔是孤独的。</p><hr><p>以后有时间，我也想好好看看电视剧版的<strong>汗尼拔</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;汉尼拔电影观后感&quot;&gt;&lt;a href=&quot;#汉尼拔电影观后感&quot; class=&quot;headerlink&quot; title=&quot;汉尼拔电影观后感&quot;&gt;&lt;/a&gt;汉尼拔电影观后感&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/xinqing_hanniba.jpg&quot; alt=&quot;汗尼
      
    
    </summary>
    
    
      <category term="心情" scheme="https://freefuncode.github.io/categories/%E5%BF%83%E6%83%85/"/>
    
    
      <category term="电影" scheme="https://freefuncode.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 八 ) 注解框架---ButterKnife</title>
    <link href="https://freefuncode.github.io/2019/09/04/Android%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%85%AB%E6%B3%A8%E8%A7%A3%E6%A1%86%E6%9E%B6-ButterKnife/"/>
    <id>https://freefuncode.github.io/2019/09/04/Android开源框架八注解框架-ButterKnife/</id>
    <published>2019-09-04T12:03:06.000Z</published>
    <updated>2019-09-06T13:20:05.764Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/ButterKnife.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <h2>一.引言</h2><div>&nbsp; &nbsp;ButterKnife是一个专注于Android系统的View注入框架</div><div>　了解注解框架,可以看这:<a id="post_title_link_9392534" href="https://www.cnblogs.com/bugzone/p/afinal.html" target="_blank" rel="noopener">Android 开源框架 ( 四 ) Afinal --- Android 里的 ORM IOC聚合型框架</a><br>&nbsp;<h2>&nbsp;二.使用</h2><h3>&nbsp;1. AndroidStudio 添加ButterKnife插件使用。</h3><p>&nbsp;　　<strong>Settings —&gt; Plugins —-&gt;搜索ButterKnife</strong><br>&nbsp;看图：<br>&nbsp;<img src="https://images2018.cnblogs.com/blog/612293/201808/612293-20180801074431484-1364962086.png" alt><br>&nbsp;<br>&nbsp;在build.gradle中引用ButterKnife库:</p></div><p></p><div><div class="cnblogs_code"><pre>compile <span style="color: #800000;">'</span><span style="color: #800000;">com.jakewharton:butterknife-compiler:8.5.1</span><span style="color: #800000;">'</span></pre></div><h3>&nbsp;2.利用ButterKnife一键实现批量findViewById()</h3>&nbsp;在对应的Activity页右键 ---&gt; Generate(Alt+Insert) ---&gt; ButterKnife 使用插件</div><div><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #000000;">@BindView(R.id.tv_first)    TextView tvFirst;    @BindView(R.id.tv_info)    TextView tvInfo; <p> @Override<br>    </p></span><span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {<br>        super.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        ButterKnife.bind(</span><span style="color: #0000ff;">this</span><span style="color: #000000;">);<br>    }</span></pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>&nbsp;</p><br>&nbsp;<br>&nbsp;</div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/ButterKnife.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_body&quot; cl
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android面试题</title>
    <link href="https://freefuncode.github.io/2019/08/25/Android%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://freefuncode.github.io/2019/08/25/Android面试题/</id>
    <published>2019-08-25T14:31:56.000Z</published>
    <updated>2019-09-06T13:20:05.873Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5d6289bcf265da03e83b783c" target="_blank" rel="noopener">点击查看原文</a></p><p>&nbsp; &nbsp; &nbsp; &nbsp; 个人列出的一些目前常见的面试题，答案都是比较简单的说了几个关键字，具体的还是自己针对每题去查，去了解，去求证。如果有问题，还请及时指出！</p><h2 id="1-五大布局"><a href="#1-五大布局" class="headerlink" title="1.五大布局"></a>1.五大布局</h2><p>LinearLayout，ReativeLayout，AbsoluteLayout, FrameLayout, TableLayout</p><h2 id="2-Activity生命周期"><a href="#2-Activity生命周期" class="headerlink" title="2.Activity生命周期"></a>2.Activity生命周期</h2><p>onCreate-&gt;onRestart-&gt;onStart-&gt;onResume-&gt;onPause-&gt;onStop-&gt;onDestory</p><h2 id="3-Fragment生命周期"><a href="#3-Fragment生命周期" class="headerlink" title="3.Fragment生命周期"></a>3.Fragment生命周期</h2><p>onAttch-&gt;onCreate-&gt;onCreateView-&gt;onActivityCreate-&gt;onStart-&gt;onResume-&gt;onPause-onStop-&gt;onDestoryView-&gt;onDestory-&gt;onDetach</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.cnblogs.com%2Ffajieyefu%2Fp%2F6092465.html" target="_blank" rel="noopener">www.cnblogs.com/fajieyefu/p…</a></p><h2 id="4-view事件传递"><a href="#4-view事件传递" class="headerlink" title="4.view事件传递"></a>4.view事件传递</h2><p>dispatchTouchEvent, onIntecepterEvent, onTouchEvent</p><h2 id="5-Handler通信原理"><a href="#5-Handler通信原理" class="headerlink" title="5.Handler通信原理"></a>5.Handler通信原理</h2><p>Handler, Looper, MessageQueue, Message</p><h2 id="6-APK打包流程"><a href="#6-APK打包流程" class="headerlink" title="6.APK打包流程"></a>6.APK打包流程</h2><p>aapt-&gt;aidl-&gt;javac-&gt;dx-&gt;apkBuilder-&gt;javaSigner-&gt;zipAlign</p><h2 id="7-四大组件"><a href="#7-四大组件" class="headerlink" title="7.四大组件"></a>7.四大组件</h2><p>Activity, Service，BroadcastReceiver, ContentProvider</p><h2 id="8-Service启动方式及生命周期"><a href="#8-Service启动方式及生命周期" class="headerlink" title="8.Service启动方式及生命周期"></a>8.Service启动方式及生命周期</h2><p>startService,BindService</p><p>startService: onCreate-&gt;onStartCommand-&gt;onStop-&gt;onDestory</p><p>bindService: onCreate-&gt;onBind-&gt;onUnbind-&gt;onDestory</p><h2 id="9-进程的优先级"><a href="#9-进程的优先级" class="headerlink" title="9.进程的优先级"></a>9.进程的优先级</h2><p>前台进程，可见进程，服务进程，后台进程，空进程</p><h2 id="10-GC回收对象的优先级"><a href="#10-GC回收对象的优先级" class="headerlink" title="10.GC回收对象的优先级"></a>10.GC回收对象的优先级</h2><p>强引用，软引用，弱引用，虚引用，空引用</p><h2 id="11-GC回收对象的生命周期"><a href="#11-GC回收对象的生命周期" class="headerlink" title="11.GC回收对象的生命周期"></a>11.GC回收对象的生命周期</h2><p>新生期，老年期，永生期</p><h2 id="12-Activity四种LuncherMode"><a href="#12-Activity四种LuncherMode" class="headerlink" title="12.Activity四种LuncherMode"></a>12.Activity四种LuncherMode</h2><p>standard，singleTop，singleTask，singleInstance</p><h2 id="13-hashMap-hashTable-LinkedHashMap-treeMap区别"><a href="#13-hashMap-hashTable-LinkedHashMap-treeMap区别" class="headerlink" title="13.hashMap,hashTable,LinkedHashMap,treeMap区别"></a>13.hashMap,hashTable,LinkedHashMap,treeMap区别</h2><p>hashMap: 非线程安全，写入快，允许key-value为null</p><p>hashTable: 线程安全，写入慢，不允许key-value为null,</p><p>LinkedHashMap: 遍历速度与数据有关和容量无关，hashMap遍历与容量有关，输出的顺序和输入的相同（队列：先进后出），LRUcache内部实现原理。</p><p>treeMap:&nbsp;按自然顺序或自定义顺序遍历键优先使用</p><h2 id="14-LRUcache"><a href="#14-LRUcache" class="headerlink" title="14.LRUcache"></a>14.LRUcache</h2><p>LinkedHashMap</p><h2 id="15-APP冷启动过程"><a href="#15-APP冷启动过程" class="headerlink" title="15.APP冷启动过程"></a>15.APP冷启动过程</h2><p>zygote-&gt;Launcher-&gt;ActivityManagerService-&gt;Application-&gt;mainActivity(Activity创建)-&gt;onCreate-&gt;onStart-&gt;onResume-&gt;(view绘制)onMeassure-&gt;onLayout-&gt;onDraw</p><h2 id="16-进程间通信"><a href="#16-进程间通信" class="headerlink" title="16.进程间通信"></a>16.进程间通信</h2><p>Activity，Service, BroadCastReceiver, ContentProvider, Binder</p><h2 id="17-线程间通信"><a href="#17-线程间通信" class="headerlink" title="17.线程间通信"></a>17.线程间通信</h2><p>AnsyTask , Handler</p><h2 id="18-三种动画"><a href="#18-三种动画" class="headerlink" title="18.三种动画"></a>18.三种动画</h2><p>帧动画，补间动画，属性动画</p><h2 id="19-Android6-0到9-0版本最大的新特性"><a href="#19-Android6-0到9-0版本最大的新特性" class="headerlink" title="19.Android6.0到9.0版本最大的新特性"></a>19.Android6.0到9.0版本最大的新特性</h2><p>6.0：运行时权限</p><p>7.0：fileProvider文件读取</p><p>8.0：多渠道notification通知</p><p>9.0：安装外部来源应用授权</p><h2 id="20View绘制过程"><a href="#20View绘制过程" class="headerlink" title="20View绘制过程"></a>20View绘制过程</h2><p>onMeassure-&gt;onLayout-&gt;onDraw</p><h2 id="21-设计模式五大原则"><a href="#21-设计模式五大原则" class="headerlink" title="21.设计模式五大原则"></a>21.设计模式五大原则</h2><p>单一职责：干一件事</p><p>开放关闭：对扩展开放，对修改关闭</p><p>里氏替换：父类调用，同样适用于子类</p><p>依赖倒置：实现依赖抽象，不要抽象依赖实现具体。</p><p>接口隔离：使用多个接口，不要一个接口干所有事</p><h2 id="22-屏幕适配方案"><a href="#22-屏幕适配方案" class="headerlink" title="22.屏幕适配方案"></a>22.屏幕适配方案</h2><p>px=dp<em>(dpi/160)=dp</em>density</p><p>尺寸（size）限定符 –缺点很多，不建议使用</p><p>最小宽度（Smallest-width）限定符</p><p>今日头条适配方案,setCustomDensity.非浸入。</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.cnblogs.com%2Fonelikeone%2Fp%2F9583446.html" target="_blank" rel="noopener">www.cnblogs.com/onelikeone/…</a></p><h2 id="23-性能优化的几个方面"><a href="#23-性能优化的几个方面" class="headerlink" title="23.性能优化的几个方面"></a>23.性能优化的几个方面</h2><p>布局减少嵌套</p><p>代码优化，防止内存泄漏</p><p>耗电量方面</p><p>apk包瘦身</p><h2 id="24-序列化Serializable-Parcelable区别"><a href="#24-序列化Serializable-Parcelable区别" class="headerlink" title="24.序列化Serializable,Parcelable区别"></a>24.序列化Serializable,Parcelable区别</h2><p>serializable: java，大量产生临时变量，内存使用较大，频繁gc</p><p>parcelable: android ，内存较小</p><h2 id="25-列举几点内存泄漏案例案例以及解决办法"><a href="#25-列举几点内存泄漏案例案例以及解决办法" class="headerlink" title="25.列举几点内存泄漏案例案例以及解决办法"></a>25.列举几点内存泄漏案例案例以及解决办法</h2><h2 id="原因：长生命周期对象持有短生命周期的引用"><a href="#原因：长生命周期对象持有短生命周期的引用" class="headerlink" title="原因：长生命周期对象持有短生命周期的引用"></a>原因：长生命周期对象持有短生命周期的引用</h2><p>Context : Activity-&gt;Application</p><p>Handler: static</p><p>webView </p><p>imageView</p><p>未及时关闭资源对象</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fblog.csdn.net%2Funicorn97%2Farticle%2Fdetails%2F81009204" target="_blank" rel="noopener">blog.csdn.net/unicorn97/a…</a></p><h2 id="26-JVM-DVM-ART-JIT-AOT介绍"><a href="#26-JVM-DVM-ART-JIT-AOT介绍" class="headerlink" title="26.JVM,DVM,ART,JIT,AOT介绍"></a>26.JVM,DVM,ART,JIT,AOT介绍</h2><p>jvm：java虚拟机</p><p>dvm:&nbsp; Android虚拟机</p><p>ART: Android运行时</p><p>JIT：及时编译</p><p>AOT：预编译</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fblog.csdn.net%2Ffeather_wch%2Farticle%2Fdetails%2F79800614" target="_blank" rel="noopener">blog.csdn.net/feather_wch…</a></p><h2 id="27-sleep-wait区别"><a href="#27-sleep-wait区别" class="headerlink" title="27.sleep,wait区别"></a>27.sleep,wait区别</h2><p>sleep: 持有锁，Thread子类</p><p>wait：释放锁，Object子类</p><h2 id="28-五层网络协议"><a href="#28-五层网络协议" class="headerlink" title="28.五层网络协议"></a>28.五层网络协议</h2><p>应用层（http/https）</p><p>传输层 (TCP/UDP)</p><p>网络层（IP）</p><p>数据链路层</p><p>物理层</p><h2 id="29-保活的方式"><a href="#29-保活的方式" class="headerlink" title="29.保活的方式"></a>29.保活的方式</h2><p>黑色保活：app，sdk相互唤起</p><p>白色保活：启动前台service</p><p>灰色保活：启动两个相同id的Service,将后启动的Service,Stop掉</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2F63aafe3c12af" target="_blank" rel="noopener">www.jianshu.com/p/63aafe3c1…</a></p><h2 id="30-webView的webViewClient和WebChromeClient区别"><a href="#30-webView的webViewClient和WebChromeClient区别" class="headerlink" title="30.webView的webViewClient和WebChromeClient区别"></a>30.webView的webViewClient和WebChromeClient区别</h2><p>WebViewClient：帮助WebView处理各种通知、请求事件。</p><p>WebChromeClient：辅助WebView处理Javascript的对话框、网站图标、网站title、加载进度等</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fblog.csdn.net%2Fu012810020%2Farticle%2Fdetails%2F51820240" target="_blank" rel="noopener">blog.csdn.net/u012810020/…</a></p><h2 id="31-APK安装过程"><a href="#31-APK安装过程" class="headerlink" title="31.APK安装过程"></a>31.APK安装过程</h2><p>/data/app -&gt;androidManifest-&gt;dex-&gt;DVM cache-&gt;PackageManageService-&gt;BroadcastReceiver</p><h2 id="32-APK包瘦身"><a href="#32-APK包瘦身" class="headerlink" title="32.APK包瘦身"></a>32.APK包瘦身</h2><p>so库，混淆，加固，shrinkResource，减少枚举，图片(webp，.9）</p><h2 id="33-JVM内部结构"><a href="#33-JVM内部结构" class="headerlink" title="33.JVM内部结构"></a>33.JVM内部结构</h2><p>静态方法区，栈，堆</p><h2 id="34-IntentService-HandlerThread介绍"><a href="#34-IntentService-HandlerThread介绍" class="headerlink" title="34.IntentService,HandlerThread介绍"></a>34.IntentService,HandlerThread介绍</h2><p>IntentService是一个基于Service的一个类，用来处理异步的请求，内部是通过HandlerThread实现。</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.cnblogs.com%2Fchenxibobo%2Fp%2F6047404.html" target="_blank" rel="noopener">www.cnblogs.com/chenxibobo/…</a></p><h2 id="35-Android五种存储方式"><a href="#35-Android五种存储方式" class="headerlink" title="35.Android五种存储方式"></a>35.Android五种存储方式</h2><p>sharePrefences,&nbsp; sqlLite, contentProvider, 文件，网络</p><h2 id="36-实现线程的两种方式"><a href="#36-实现线程的两种方式" class="headerlink" title="36.实现线程的两种方式"></a>36.实现线程的两种方式</h2><p>implements Runnable</p><p>extends Thread</p><h2 id="37-String-StringBuffer-StringBuilder区别"><a href="#37-String-StringBuffer-StringBuilder区别" class="headerlink" title="37.String,StringBuffer,StringBuilder区别"></a>37.String,StringBuffer,StringBuilder区别</h2><p>速度：StringBuilder-&gt;StringBuffer-&gt;String（不可变）</p><p>StringBuilder 非线程安全</p><h2 id="38-Synchronize-Volatile区别"><a href="#38-Synchronize-Volatile区别" class="headerlink" title="38.Synchronize,Volatile区别"></a>38.Synchronize,Volatile区别</h2><p>sychronize : 加锁</p><p>volatile: 可变，每次实时读取。</p><h2 id="39-ArrayList，LinkedList区别"><a href="#39-ArrayList，LinkedList区别" class="headerlink" title="39.ArrayList，LinkedList区别"></a>39.ArrayList，LinkedList区别</h2><p>arrayList：读取快</p><p>linkedList：插入快</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5d6289bcf265da03e83b783c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 个人
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="知识点" scheme="https://freefuncode.github.io/categories/Android/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="面试" scheme="https://freefuncode.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 十六 ) 视频播放器 --- JiaoZiVideoPlayer(JieCaoVideoPlayer)</title>
    <link href="https://freefuncode.github.io/2018/08/12/Android%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%8D%81%E5%85%AD%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8-JiaoZiVideoPlayer-JieCaoVideoPlayer/"/>
    <id>https://freefuncode.github.io/2018/08/12/Android开源框架十六视频播放器-JiaoZiVideoPlayer-JieCaoVideoPlayer/</id>
    <published>2018-08-12T08:07:37.000Z</published>
    <updated>2019-09-06T13:20:05.780Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/JiaoZiVideoPlayer.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <p>　　原JieCaoVideoPlayer 不知道什么时候改名了，现在叫JiaoZiVideoPlayer.</p><p>　　项目GitHub地址：<a href="https://github.com/lipangit/JiaoZiVideoPlayer" target="_blank">https://github.com/lipangit/JiaoZiVideoPlayer</a></p><p>　　<strong>JiaoZiVideoPlayer主要功能</strong>：</p><div class="cnblogs_Highlighter"><pre class="brush:csharp;gutter:true;">    1.视频全屏播放和浮层小窗播放    2.可以完全自定义UI    3.能在ListView、ViewPager和ListView、ViewPager和Fragment等多重嵌套模式下全屏工作    4.手势修改进度和音量    5.视频大小的屏幕适配，宽或长至少有两个对边是充满屏幕的，另外两个方向居中    6.可以在加载、暂停、播放等各种状态中正常进入全屏和退出全屏    7.基于exoplayer, 支持hls,rtsp    8.设置http头信息    9.重力感应自动全屏    10.WebView嵌套本地视频</pre></div><p>　　</p><h2>　基本使用</h2><h3>　　1.添加依赖</h3><div class="cnblogs_code"><pre>compile <span style="color: #800000;">'</span><span style="color: #800000;">cn.jzvd:jiaozivideoplayer:6.2.12</span><span style="color: #800000;">'</span></pre></div><h3>　　2.xml布局文件</h3><div class="cnblogs_code"><pre>&lt;<span style="color: #000000;">cn.jzvd.JZVideoPlayerStandard        android:id</span>=<span style="color: #800000;">"</span><span style="color: #800000;">@+id/videoplayer</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_width</span>=<span style="color: #800000;">"</span><span style="color: #800000;">match_parent</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_height</span>=<span style="color: #800000;">"</span><span style="color: #800000;">200dp</span><span style="color: #800000;">"</span>/&gt;</pre></div><h3>　　3.设置视频url和标题</h3><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>JZVideoPlayerStandard jzVideoPlayerStandard =<span style="color: #000000;"> (JZVideoPlayerStandard) findViewById(R.id.videoplayer);jzVideoPlayerStandard.setUp(</span><span style="color: #800000;">"</span><span style="color: #800000;">http://jzvd.nathen.cn/c6e3dc12a1154626b3476d9bf3bd7266/6b56c5f0dc31428083757a45764763b0-5287d2089db37e62345123a1be272f8b.mp4</span><span style="color: #800000;">"</span><span style="color: #000000;">,                             JZVideoPlayerStandard.SCREEN_WINDOW_NORMAL,                             </span><span style="color: #800000;">"</span><span style="color: #800000;">饺子闭眼睛</span><span style="color: #800000;">"</span><span style="color: #000000;">);jzVideoPlayerStandard.thumbImageView.setImage(</span><span style="color: #800000;">"</span><span style="color: #800000;">http://p.qpic.cn/videoyun/0/2449_43b6f696980311e59ed467f22794e792_1/640</span><span style="color: #800000;">"</span>);</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h3>　　4.AndroidManifest.xml：</h3><div class="cnblogs_code"><pre>&lt;<span style="color: #000000;">activity    android:name</span>=<span style="color: #800000;">"</span><span style="color: #800000;">.MainActivity</span><span style="color: #800000;">"</span><span style="color: #000000;">    android:configChanges</span>=<span style="color: #800000;">"</span><span style="color: #800000;">orientation|screenSize|keyboardHidden</span><span style="color: #800000;">"</span><span style="color: #000000;">    android:screenOrientation</span>=<span style="color: #800000;">"</span><span style="color: #800000;">portrait</span><span style="color: #800000;">"</span> /&gt;    </pre></div><p>&nbsp;　　当我们横竖屏切换的时候会直接调用onCreate方法中的onConfigurationChanged方法，而不会重新执行onCreate方法，那当然如果不配置这个属性的话就会重新调用onCreate方法了。</p><h2>&nbsp;</h2></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/JiaoZiVideoPlayer.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_bo
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 十五 ) 下拉刷新框架 --- SwipeRefreshLayout</title>
    <link href="https://freefuncode.github.io/2018/08/07/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%8D%81%E4%BA%94%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E6%A1%86%E6%9E%B6-SwipeRefreshLayout/"/>
    <id>https://freefuncode.github.io/2018/08/07/开源框架十五下拉刷新框架-SwipeRefreshLayout/</id>
    <published>2018-08-07T12:28:54.000Z</published>
    <updated>2019-09-06T13:20:06.045Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/SwipeRefreshLayout.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <p>　　SwipeRefreshLayout是Google官方更新的一个Widget,可以实现下拉刷新的效果。完整包名:android.support.v4.widget.SwipeRefreshLayout .</p><h3>一. 布局</h3><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>&lt;<span style="color: #000000;">android.support.v4.widget.SwipeRefreshLayout        android:id</span>=<span style="color: #800000;">"</span><span style="color: #800000;">@+id/srl</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_width</span>=<span style="color: #800000;">"</span><span style="color: #800000;">match_parent</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_height</span>=<span style="color: #800000;">"</span><span style="color: #800000;">wrap_content</span><span style="color: #800000;">"</span>&gt;<pre><code>.............</code></pre><p>&lt;/android.support.v4.widget.SwipeRefreshLayout&gt;</p></pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h3>二. Activity继承SwipeRefreshLayout刷新监听</h3><div class="cnblogs_code"><pre>implements SwipeRefreshLayout.OnRefreshListener</pre></div><h3>三.添加监听</h3><div class="cnblogs_code"><pre>srl.setOnRefreshListener(<span style="color: #0000ff;">this</span>);</pre></div><h3>&nbsp;四.改变刷新图标颜色</h3><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #000000;">CommonUtils.setColorSchemeResources(srl);<pre><code>&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; CommonUtils {    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*     * 统一维护，方便修改     *     * @param sr_layout 下拉控件     &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;    &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; setColorSchemeResources(SwipeRefreshLayout sr_layout) {        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (sr_layout != &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) {            sr_layout.setColorSchemeResources(R.color.refresh1, R.color.refresh2, R.color                    .refresh3, R                    .color.refresh4);        }    }}&lt;/span&gt;&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><h3>五. 重写SwipeRefreshLayout刷新监听事件</h3><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">　　//</span><span style="color: #008000;">刷新</span><span style="color: #000000;">    @Override    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onRefresh() {        isPullToRefreshRequest </span>= <span style="color: #0000ff;">true</span><span style="color: #000000;">;        </span><span style="color: #008000;">//</span><span style="color: #008000;">刷新数据</span><span style="color: #000000;">    }<pre><code>&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;加载动画结束&lt;/span&gt;</code></pre><p><span style="color: #000000;">    @Override<br>    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onAllRequestsFinished() {<br>        super.onAllRequestsFinished();<br>        srl.setRefreshing(</span><span style="color: #0000ff;">false</span><span style="color: #000000;">);<br>    }</span></p></span></pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h3>六. 效果</h3><p><img src="https://images2018.cnblogs.com/blog/612293/201808/612293-20180806202511108-3463627.jpg" alt></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/SwipeRefreshLayout.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_b
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 十四 ) 列表下拉刷新框架 --- SmartRefreshLayout</title>
    <link href="https://freefuncode.github.io/2018/08/07/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%8D%81%E5%9B%9B%E5%88%97%E8%A1%A8%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E6%A1%86%E6%9E%B6-SmartRefreshLayout/"/>
    <id>https://freefuncode.github.io/2018/08/07/开源框架十四列表下拉刷新框架-SmartRefreshLayout/</id>
    <published>2018-08-07T12:23:00.000Z</published>
    <updated>2019-09-06T13:20:06.045Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/SmartRefresh.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <p>　　结合上一篇RecyclerView,介绍一个针对列表的下拉和上拉刷新,加载的框架:SmartRefreshLayout.</p><p>　　　　<a id="post_title_link_9427210" href="https://www.cnblogs.com/bugzone/p/recyclerview.html" target="_blank">Android 开源框架 ( 十三 ) RecyclerView</a></p><p>　　可实现自定义Header/Footer</p><h3>　　一.添加依赖</h3><div class="cnblogs_code"><pre>    compile <span style="color: #800000;">'</span><span style="color: #800000;">com.scwang.smartrefresh:SmartRefreshLayout:1.0.4-7</span><span style="color: #800000;">'</span><span style="color: #000000;">    compile </span><span style="color: #800000;">'</span><span style="color: #800000;">com.scwang.smartrefresh:SmartRefreshHeader:1.0.4-7</span><span style="color: #800000;">'</span></pre></div><h3>　　二. 布局文件</h3><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>&lt;<span style="color: #000000;">com.scwang.smartrefresh.layout.SmartRefreshLayout        android:id</span>=<span style="color: #800000;">"</span><span style="color: #800000;">@+id/refreshLayout</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_width</span>=<span style="color: #800000;">"</span><span style="color: #800000;">match_parent</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_height</span>=<span style="color: #800000;">"</span><span style="color: #800000;">match_parent</span><span style="color: #800000;">"</span><span style="color: #000000;">        app:srlEnablePreviewInEditMode</span>=<span style="color: #800000;">"</span><span style="color: #800000;">true</span><span style="color: #800000;">"</span>&gt;        &lt;!--srlAccentColor srlPrimaryColor 将会改变 Header 和 Footer 的主题颜色--&gt;        &lt;!--srlEnablePreviewInEditMode 可以开启和关闭预览功能--&gt;        &lt;<span style="color: #000000;">com.scwang.smartrefresh.layout.header.ClassicsHeader            android:layout_width</span>=<span style="color: #800000;">"</span><span style="color: #800000;">match_parent</span><span style="color: #800000;">"</span><span style="color: #000000;">            android:layout_height</span>=<span style="color: #800000;">"</span><span style="color: #800000;">wrap_content</span><span style="color: #800000;">"</span><span style="color: #000000;">            app:srlAccentColor</span>=<span style="color: #800000;">"</span><span style="color: #800000;">#000</span><span style="color: #800000;">"</span><span style="color: #000000;">            app:srlPrimaryColor</span>=<span style="color: #800000;">"</span><span style="color: #800000;">@android:color/white</span><span style="color: #800000;">"</span> /&gt;<pre><code>    &amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt;android.support.v7.widget.RecyclerView        android:id&lt;/span&gt;=&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;@+id/recycler_view&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;        android:layout_width&lt;/span&gt;=&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;match_parent&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;        android:layout_height&lt;/span&gt;=&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;match_parent&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; /&amp;gt;    &amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt;com.scwang.smartrefresh.layout.footer.ClassicsFooter        android:layout_width&lt;/span&gt;=&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;match_parent&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;        android:layout_height&lt;/span&gt;=&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;wrap_content&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;        app:srlAccentColor&lt;/span&gt;=&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;#000&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;        app:srlPrimaryColor&lt;/span&gt;=&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;@android:color/white&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; /&amp;gt;&amp;lt;/com.scwang.smartrefresh.layout.SmartRefreshLayout&amp;gt;&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></pre></div><pre><span>app:srlEnablePreviewInEditMode="true" 开启了预览功能<br>　　<img src="https://images2018.cnblogs.com/blog/612293/201808/612293-20180806195400466-647305574.jpg" alt><br><br></span></pre><h3>　　三. 使用-上拉,下拉</h3><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>refreshLayout.setOnRefreshListener(<span style="color: #0000ff;">new</span><span style="color: #000000;"> OnRefreshListener() {        @Override        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onRefresh(RefreshLayout refreshlayout) {            pageNumber </span>= <span style="color: #800080;">1</span><span style="color: #000000;">;            </span><span style="color: #008000;">//</span><span style="color: #008000;">刷新数据</span><span style="color: #000000;">        }    });<pre><code>refreshLayout.setOnLoadmoreListener(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; OnLoadmoreListener() {    @Override    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; onLoadmore(RefreshLayout refreshlayout) {        &lt;/span&gt;++&lt;span style=&quot;color: #000000;&quot;&gt; pageNumber;        &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;加载数据&lt;/span&gt;</code></pre><p><span style="color: #000000;">        }<br>    });<br>    </span></p></span></pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h3>　　四.关闭动画</h3><div class="cnblogs_code"><pre><span style="color: #008000;">　　//</span><span style="color: #008000;">关闭刷新</span>    <span style="color: #0000ff;">if</span> (refreshLayout != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {        refreshLayout.finishRefresh(</span><span style="color: #800080;">200</span><span style="color: #000000;">);        refreshLayout.finishLoadmore(</span><span style="color: #800080;">200</span><span style="color: #000000;">);    }</span></pre></div><h3>　　五.拓展- 参数属性介绍</h3><h4>　　　　　　　　　　　　　　　　　　　　　　　　属性 Attributes</h4><table style="height: 395px; width: 968px;"><thead><tr><th><span style="font-size: 15px;">名称-name</span></th><th><span style="font-size: 15px;">格式-format</span></th><th><span style="font-size: 15px;">描述-description</span></th></tr></thead><tbody><tr><td><span style="font-size: 15px;">srlPrimaryColor</span></td><td><span style="font-size: 15px;">color</span></td><td><span style="font-size: 15px;">主题颜色</span></td></tr><tr><td><span style="font-size: 15px;">srlAccentColor</span></td><td><span style="font-size: 15px;">color</span></td><td><span style="font-size: 15px;">强调颜色</span></td></tr><tr><td><span style="font-size: 15px;">srlReboundDuration</span></td><td><span style="font-size: 15px;">integer</span></td><td><span style="font-size: 15px;">释放后回弹动画时长</span></td></tr><tr><td><span style="font-size: 15px;">srlHeaderHeight</span></td><td><span style="font-size: 15px;">dimension</span></td><td><span style="font-size: 15px;">Header的标准高度</span></td></tr><tr><td><span style="font-size: 15px;">srlFooterHeight</span></td><td><span style="font-size: 15px;">dimension</span></td><td><span style="font-size: 15px;">Footer的标准高度</span></td></tr><tr><td><span style="font-size: 15px;">srlDragRate</span></td><td><span style="font-size: 15px;">float</span></td><td><span style="font-size: 15px;">显示拖动高度/真实拖动高度（默认0.5，阻尼效果）</span></td></tr><tr><td><span style="font-size: 15px;">srlHeaderMaxDragRate</span></td><td><span style="font-size: 15px;">float</span></td><td><span style="font-size: 15px;">Header最大拖动高度/Header标准高度（默认2，要求&gt;=1）</span></td></tr><tr><td><span style="font-size: 15px;">srlFooterMaxDragRate</span></td><td><span style="font-size: 15px;">float</span></td><td><span style="font-size: 15px;">Footer最大拖动高度/Footer标准高度（默认2，要求&gt;=1）</span></td></tr><tr><td><span style="font-size: 15px;">srlEnableRefresh</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否开启下拉刷新功能（默认true）</span></td></tr><tr><td><span style="font-size: 15px;">srlEnableLoadmore</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否开启加上拉加载功能（默认true）</span></td></tr><tr><td><span style="font-size: 15px;">srlEnableHeaderTranslationContent</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">拖动Header的时候是否同时拖动内容（默认true）</span></td></tr><tr><td><span style="font-size: 15px;">srlEnableFooterTranslationContent</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">拖动Footer的时候是否同时拖动内容（默认true）</span></td></tr><tr><td><span style="font-size: 15px;">srlEnablePreviewInEditMode</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否在编辑模式时显示预览效果（默认true）</span></td></tr><tr><td><span style="font-size: 15px;">srlDisableContentWhenRefresh</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否在刷新的时候禁止内容的一切手势操作（默认false）</span></td></tr><tr><td><span style="font-size: 15px;">srlDisableContentWhenLoading</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否在加载的时候禁止内容的一切手势操作（默认false）</span></td></tr></tbody></table><p><br><br></p><p>　　　　　　　　　　　　　　　　　　　　　　　　</p><h4 id="articleHeader8">　　　　　　　　　　　　　　　　　　　　　　　　　　方法 Method</h4><table style="height: 990px; width: 958px;"><thead><tr><th><span style="font-size: 15px;">名称-name</span></th><th><span style="font-size: 15px;">格式-format</span></th><th><span style="font-size: 15px;">描述-description</span></th></tr></thead><tbody><tr><td><span style="font-size: 15px;">setPrimaryColors</span></td><td><span style="font-size: 15px;">colors</span></td><td><span style="font-size: 15px;">主题\强调颜色</span></td></tr><tr><td><span style="font-size: 15px;">setPrimaryColorsId</span></td><td><span style="font-size: 15px;">colors</span></td><td><span style="font-size: 15px;">主题\强调颜色资源Id</span></td></tr><tr><td><span style="font-size: 15px;">setReboundDuration</span></td><td><span style="font-size: 15px;">integer</span></td><td><span style="font-size: 15px;">释放后回弹动画时长</span></td></tr><tr><td><span style="font-size: 15px;">setHeaderHeight</span></td><td><span style="font-size: 15px;">dimension</span></td><td><span style="font-size: 15px;">Header的标准高度（px/dp 两个版本）</span></td></tr><tr><td><span style="font-size: 15px;">setFooterHeight</span></td><td><span style="font-size: 15px;">dimension</span></td><td><span style="font-size: 15px;">Footer的标准高度（px/dp 两个版本）</span></td></tr><tr><td><span style="font-size: 15px;">setDragRate</span></td><td><span style="font-size: 15px;">float</span></td><td><span style="font-size: 15px;">显示拖动高度/真实拖动高度（默认0.5，阻尼效果）</span></td></tr><tr><td><span style="font-size: 15px;">setHeaderMaxDragRate</span></td><td><span style="font-size: 15px;">float</span></td><td><span style="font-size: 15px;">Header最大拖动高度/Header标准高度（默认2，要求&gt;=1）</span></td></tr><tr><td><span style="font-size: 15px;">setFooterMaxDragRate</span></td><td><span style="font-size: 15px;">float</span></td><td><span style="font-size: 15px;">Footer最大拖动高度/Footer标准高度（默认2，要求&gt;=1）</span></td></tr><tr><td><span style="font-size: 15px;">setEnableRefresh</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否开启下拉刷新功能（默认true）</span></td></tr><tr><td><span style="font-size: 15px;">setEnableLoadmore</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否开启加上拉加载功能（默认true）</span></td></tr><tr><td><span style="font-size: 15px;">setEnableHeaderTranslationContent</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">拖动Header的时候是否同时拖动内容（默认true）</span></td></tr><tr><td><span style="font-size: 15px;">setEnableFooterTranslationContent</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">拖动Footer的时候是否同时拖动内容（默认true）</span></td></tr><tr><td><span style="font-size: 15px;">setEnableAutoLoadmore</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否监听列表滚动到底部时触发加载事件</span></td></tr><tr><td><span style="font-size: 15px;">setDisableContentWhenRefresh</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否在刷新的时候禁止内容的一切手势操作（默认false）</span></td></tr><tr><td><span style="font-size: 15px;">setDisableContentWhenLoading</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否在加载的时候禁止内容的一切手势操作（默认false）</span></td></tr><tr><td><span style="font-size: 15px;">setReboundInterpolator</span></td><td><span style="font-size: 15px;">Interpolator</span></td><td><span style="font-size: 15px;">设置回弹动画的插值器</span></td></tr><tr><td><span style="font-size: 15px;">setRefreshHeader</span></td><td><span style="font-size: 15px;">RefreshHeader</span></td><td><span style="font-size: 15px;">设置指定的Header</span></td></tr><tr><td><span style="font-size: 15px;">setRefreshFooter</span></td><td><span style="font-size: 15px;">RefreshFooter</span></td><td><span style="font-size: 15px;">设置指定的Footer</span></td></tr><tr><td><span style="font-size: 15px;">setOnRefreshListener</span></td><td><span style="font-size: 15px;">OnRefreshListener</span></td><td><span style="font-size: 15px;">设置刷新监听器</span></td></tr><tr><td><span style="font-size: 15px;">setOnLoadmoreListener</span></td><td><span style="font-size: 15px;">OnLoadmoreListener</span></td><td><span style="font-size: 15px;">设置加载监听器</span></td></tr><tr><td><span style="font-size: 15px;">setOnRefreshLoadmoreListener</span></td><td><span style="font-size: 15px;">OnRefreshLoadmoreListener</span></td><td><span style="font-size: 15px;">同时设置上面两个监听器</span></td></tr><tr><td><span style="font-size: 15px;">setOnMultiPurposeListener</span></td><td><span style="font-size: 15px;">OnMultiPurposeListener</span></td><td><span style="font-size: 15px;">设置多功能监听器</span></td></tr><tr><td><span style="font-size: 15px;">setLoadmoreFinished</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">设置全部数据加载完成，之后不会触发加载事件</span></td></tr><tr><td><span style="font-size: 15px;">finishRefresh</span></td><td><span style="font-size: 15px;">(int delayed)</span></td><td><span style="font-size: 15px;">完成刷新，结束刷新动画</span></td></tr><tr><td><span style="font-size: 15px;">finishLoadmore</span></td><td><span style="font-size: 15px;">(int delayed)</span></td><td><span style="font-size: 15px;">完成加载，结束加载动画</span></td></tr><tr><td><span style="font-size: 15px;">getRefreshHeader</span></td><td><span style="font-size: 15px;">RefreshHeader</span></td><td><span style="font-size: 15px;">获取Header</span></td></tr><tr><td><span style="font-size: 15px;">getRefreshFooter</span></td><td><span style="font-size: 15px;">RefreshFooter</span></td><td><span style="font-size: 15px;">获取Footer</span></td></tr><tr><td><span style="font-size: 15px;">getState</span></td><td><span style="font-size: 15px;">RefreshState</span></td><td><span style="font-size: 15px;">获取当前状态</span></td></tr><tr><td><span style="font-size: 15px;">isRefreshing</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否正在刷新</span></td></tr><tr><td><span style="font-size: 15px;">isLoading</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否正在加载</span></td></tr><tr><td><span style="font-size: 15px;">autoRefresh</span></td><td><span style="font-size: 15px;">(int delayed)</span></td><td><span style="font-size: 15px;">触发自动刷新</span></td></tr><tr><td><span style="font-size: 15px;">autoLoadmore</span></td><td><span style="font-size: 15px;">(int delayed)</span></td><td><span style="font-size: 15px;">触发自动加载</span></td></tr></tbody></table><pre><span><br>　　<span style="font-size: 14px;">参数属性引用自: </span></span><span style="font-size: 14px;"><a href="https://blog.csdn.net/lknlll/article/details/77988978?locationNum=2&amp;fps=1" target="_blank">SmartRefreshLayout---“智能”下拉刷新布局</a> 感谢原作者!</span></pre><pre><span>&nbsp;</span></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/SmartRefresh.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_body&quot; c
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 系列 导读</title>
    <link href="https://freefuncode.github.io/2018/08/05/Android%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97%E5%AF%BC%E8%AF%BB/"/>
    <id>https://freefuncode.github.io/2018/08/05/Android开源框架系列导读/</id>
    <published>2018-08-05T14:15:29.000Z</published>
    <updated>2019-09-06T13:20:05.795Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/openSourceFrameworks.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <h1>&nbsp;一.导读</h1><h2>　　网络请求</h2><p>　　　　<a id="post_title_link_9381891" href="https://www.cnblogs.com/bugzone/p/rxjava_get.html" target="_blank">Android 开源框架 ( 一 ) OkHttp 网络框架的基本使用</a></p><p>　　　　<a id="post_title_link_9384751" href="https://www.cnblogs.com/bugzone/p/okhttp-utils.html" target="_blank">Android 开源框架 ( 二 ) 基于OkHttp进一步封装的okhttp-utils介绍</a></p><p>　　　　<a id="post_title_link_9384794" href="https://www.cnblogs.com/bugzone/p/OkHttpUtils.html" target="_blank">Android 开源框架 ( 三 ) 基于OkHttp进一步封装的OkHttpUtils介绍</a></p><p>　　　　<a id="post_title_link_9392534" href="https://www.cnblogs.com/bugzone/p/afinal.html" target="_blank">Android 开源框架 ( 四 ) Afinal --- Android 里的 ORM IOC聚合型框架</a></p><p>　　　　<a id="post_title_link_9392536" href="https://www.cnblogs.com/bugzone/p/Xutils.html" target="_blank">Android 开源框架 ( 五 ) xUtils --- Android 里的 ORM IOC聚合型框架</a></p><p>　　　　<a id="post_title_link_9394782" href="https://www.cnblogs.com/bugzone/p/Volley.html" target="_blank">Android 开源框架 ( 六 ) Volley --- Google的轻量级网络通信框架</a></p><h2>　　事件总线</h2><p>　　　　<a id="post_title_link_9399224" href="https://www.cnblogs.com/bugzone/p/eventbus.html" target="_blank">Android 开源框架 ( 七 ) 事件总线---EventBus</a></p><h2>　　依赖注入</h2><p>　　　　<a id="post_title_link_9399226" href="https://www.cnblogs.com/bugzone/p/ButterKnife.html" target="_blank">Android 开源框架 ( 八 ) 注解框架---ButterKnife</a></p><h2>　　图片加载</h2><p>　　　　<a id="post_title_link_9425211" href="https://www.cnblogs.com/bugzone/p/ImageLoader.html" target="_blank">Android 开源框架 ( 九 ) 图片加载框架---ImageLoader</a></p><p>　　　　<a id="post_title_link_9425287" href="https://www.cnblogs.com/bugzone/p/Picasso.html" target="_blank">Android 开源框架 ( 十 ) 图片加载框架---Picasso</a></p><p>　　　　<a id="post_title_link_9425295" href="https://www.cnblogs.com/bugzone/p/Glide.html" target="_blank">Android 开源框架 ( 十一 ) 图片加载框架---Glide</a></p><p>　　　　<a id="post_title_link_9426702" href="https://www.cnblogs.com/bugzone/p/Fresco.html" target="_blank">Android 开源框架 ( 十二 ) 图片加载框架---Fresco</a></p><h2>　　RecyclerView</h2><p>　　　　<a id="post_title_link_9427210" href="https://www.cnblogs.com/bugzone/p/recyclerview.html" target="_blank">Android 开源框架 ( 十三 ) RecyclerView</a></p><p>　　　　<a id="post_title_link_9432304" href="https://www.cnblogs.com/bugzone/p/SmartRefresh.html" target="_blank">Android 开源框架 ( 十四 ) 列表下拉刷新框架 --- SmartRefreshLayout</a></p><p>　　　　<a id="post_title_link_9432687" href="https://www.cnblogs.com/bugzone/p/SwipeRefreshLayout.html" target="_blank">Android 开源框架 ( 十五 ) 下拉刷新框架 --- SwipeRefreshLayout</a>　　　</p><h2>　　视频播放器</h2><p>　　　　<a id="post_title_link_9463295" href="https://www.cnblogs.com/bugzone/p/JiaoZiVideoPlayer.html" target="_blank">Android 开源框架 ( 十六 ) 视频播放器 --- JiaoZiVideoPlayer(JieCaoVideoPlayer)</a>　</p><p>&nbsp;</p><p>&nbsp;</p><h2>二.任重道远</h2><p style="text-align: center;"><img src="https://images2018.cnblogs.com/blog/612293/201808/612293-20180805221424403-1466135863.jpg" alt></p><p>&nbsp;</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/openSourceFrameworks.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 十三 ) RecyclerView</title>
    <link href="https://freefuncode.github.io/2018/08/05/Android%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%8D%81%E4%B8%89RecyclerView/"/>
    <id>https://freefuncode.github.io/2018/08/05/Android开源框架十三RecyclerView/</id>
    <published>2018-08-05T13:19:57.000Z</published>
    <updated>2019-09-06T13:20:05.780Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/recyclerview.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <p>　　RecyclerView是Android 5.0推出的。<br>　　RecyclerView是support:recyclerview-v7中提供的控件，最低兼容到android 3.0版本。可以通过导入support-v7对其进行使用。<br>　　RecyclerView已经标准化ViewHolder，我们自定义的ViewHoler需要继承 RecyclerView.ViewHolder，然后在构造方法中初始化控件，后面会有具体介绍。通过设置不同的LayoutManager，以及结合ItemDecoration , ItemAnimator，ItemTouchHelper，可以实现非常炫酷的效果。</p><h2>一.布局&nbsp;</h2><div class="cnblogs_code"><pre>  &lt;<span style="color: #000000;">android.support.v7.widget.RecyclerView        android:id</span>=<span style="color: #800000;">"</span><span style="color: #800000;">@+id/recyclerView</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_width</span>=<span style="color: #800000;">"</span><span style="color: #800000;">match_parent</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_height</span>=<span style="color: #800000;">"</span><span style="color: #800000;">match_parent</span><span style="color: #800000;">"</span>/&gt;  </pre></div><p>&nbsp;</p><h2>二.基本使用&nbsp;</h2><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">//</span><span style="color: #008000;">设置RecyclerView的适配器</span>adapter = <span style="color: #0000ff;">new</span> MyRecyclerViewAdapter(RecyclerViewActivity.<span style="color: #0000ff;">this</span><span style="color: #000000;">,datas);recyclerview.setAdapter(adapter);</span><span style="color: #008000;">//</span><span style="color: #008000;">设置添加或删除item时的动画，这里使用默认动画</span>mRecyclerView.setItemAnimator(<span style="color: #0000ff;">new</span><span style="color: #000000;"> DefaultItemAnimator());</span><span style="color: #008000;">//</span><span style="color: #008000;">添加RecyclerView的分割线</span>recyclerview.addItemDecoration(<span style="color: #0000ff;">new</span> DividerListItemDecoration(RecyclerViewActivity.<span style="color: #0000ff;">this</span><span style="color: #000000;">,DividerListItemDecoration.VERTICAL_LIST));        </span><span style="color: #008000;">//</span><span style="color: #008000;">LayoutManager</span>recyclerview.setLayoutManager(<span style="color: #0000ff;">new</span> LinearLayoutManager(RecyclerViewActivity.<span style="color: #0000ff;">this</span>, LinearLayoutManager.VERTICAL, <span style="color: #0000ff;">false</span>));</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MyRecyclerViewAdapter extends RecyclerView.Adapter&lt;MyRecyclerViewAdapter.ViewHolder&gt;<span style="color: #000000;"> {<pre><code>&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; final Context context;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;  ArrayList&amp;lt;String&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; datas;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; MyRecyclerViewAdapter(Context context, ArrayList&amp;lt;String&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; datas) {    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;.context =&lt;span style=&quot;color: #000000;&quot;&gt; context;    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;.datas =&lt;span style=&quot;color: #000000;&quot;&gt; datas;}&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;* * 相当于getView方法中创建View和ViewHolder * @param parent * @param viewType * @return &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;@Override&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; ViewHolder onCreateViewHolder(ViewGroup parent, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; viewType) {    View itemView &lt;/span&gt;= View.inflate(context, R.layout.item_recyclerview,&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; ViewHolder(itemView);}&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*相当于于getView绑定数据部分的代码 * 数据和View绑定 * @param holder * @param position &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;@Override&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; onBindViewHolder(ViewHolder holder, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; position) {    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;根据位置得到对应的数据&lt;/span&gt;    String  data  = datas.&lt;span style=&quot;color: #0000ff;&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;(position);    holder.tv_title.setText(data);}&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;* * 得到总条数 * @return &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;@Override&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; getItemCount() {    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; datas.size();}&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; ViewHolder extends RecyclerView.ViewHolder {    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; ImageView iv_icon;    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; TextView tv_title;    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; ViewHolder(View itemView) {        super(itemView);        iv_icon &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; (ImageView) itemView.findViewById(R.id.iv_icon);        tv_title &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; (TextView) itemView.findViewById(R.id.tv_title);    }}</code></pre><p>}</p></span></pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>&nbsp;</p><h2>三.三种显示方式&nbsp;</h2><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">//</span><span style="color: #008000;">设置List类型效果</span>recyclerview.setLayoutManager(<span style="color: #0000ff;">new</span> LinearLayoutManager(RecyclerViewActivity.<span style="color: #0000ff;">this</span>,LinearLayoutManager.VERTICAL,<span style="color: #0000ff;">false</span><span style="color: #000000;">));<p></p></span><span style="color: #008000;">//</span><span style="color: #008000;">设置Grid类型效果</span><br>recyclerview.setLayoutManager(<span style="color: #0000ff;">new</span> GridLayoutManager(RecyclerViewActivity.<span style="color: #0000ff;">this</span>, <span style="color: #800080;">2</span>, GridLayoutManager.VERTICAL, <span style="color: #0000ff;">false</span><span style="color: #000000;">));<p></p><p></p></span><span style="color: #008000;">//</span><span style="color: #008000;">设置瀑布流类型效果</span><br>recyclerview.setLayoutManager(<span style="color: #0000ff;">new</span> StaggeredGridLayoutManager(<span style="color: #800080;">3</span>,StaggeredGridLayoutManager.VERTICAL));</pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>&nbsp;</p><h2>四.分割线</h2><div class="cnblogs_code"><pre><span style="color: #008000;">//</span><span style="color: #008000;">添加RecyclerView的分割线</span>recyclerview.addItemDecoration(<span style="color: #0000ff;">new</span> DividerListItemDecoration(RecyclerViewActivity.<span style="color: #0000ff;">this</span>,DividerListItemDecoration.VERTICAL_LIST));</pre></div><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #000000;">import android.content.Context;import android.content.res.TypedArray;import android.graphics.Canvas;import android.graphics.Rect;import android.graphics.drawable.Drawable;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.view.View;<p></p></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> DividerListItemDecoration extends RecyclerView.ItemDecoration {<br>    </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> final <span style="color: #0000ff;">int</span>[] ATTRS = <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">int</span><span style="color: #000000;">[]{<br>            android.R.attr.listDivider<br>    };<p></p><pre><code>&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; final &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; HORIZONTAL_LIST =&lt;span style=&quot;color: #000000;&quot;&gt; LinearLayoutManager.HORIZONTAL;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; final &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; VERTICAL_LIST =&lt;span style=&quot;color: #000000;&quot;&gt; LinearLayoutManager.VERTICAL;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Drawable mDivider;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; mOrientation;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; DividerListItemDecoration(Context context, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; orientation) {    final TypedArray a &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; context.obtainStyledAttributes(ATTRS);    mDivider &lt;/span&gt;= a.getDrawable(&lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);    a.recycle();    setOrientation(orientation);}&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; setOrientation(&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; orientation) {    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (orientation != HORIZONTAL_LIST &amp;amp;&amp;amp; orientation !=&lt;span style=&quot;color: #000000;&quot;&gt; VERTICAL_LIST) {        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;invalid orientation&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);    }    mOrientation &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; orientation;}@Override&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; onDraw(Canvas c, RecyclerView parent) {</code></pre><p></p></span><span style="color: #008000;">//</span><span style="color: #008000;">        Log.e(“recyclerview - itemdecoration”, “onDraw()”);</span><p></p><pre><code>    &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (mOrientation ==&lt;span style=&quot;color: #000000;&quot;&gt; VERTICAL_LIST) {        drawVertical(c, parent);    } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {        drawHorizontal(c, parent);    }}&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; drawVertical(Canvas c, RecyclerView parent) {    final &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; left =&lt;span style=&quot;color: #000000;&quot;&gt; parent.getPaddingLeft();    final &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; right = parent.getWidth() -&lt;span style=&quot;color: #000000;&quot;&gt; parent.getPaddingRight();    final &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; childCount =&lt;span style=&quot;color: #000000;&quot;&gt; parent.getChildCount();    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;; i &amp;lt; childCount; i++&lt;span style=&quot;color: #000000;&quot;&gt;) {        final View child &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; parent.getChildAt(i);        android.support.v7.widget.RecyclerView v &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; android.support.v7.widget.RecyclerView(parent.getContext());        final RecyclerView.LayoutParams &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;params&lt;/span&gt; =&lt;span style=&quot;color: #000000;&quot;&gt; (RecyclerView.LayoutParams) child                .getLayoutParams();        final &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; top = child.getBottom() + &lt;span style=&quot;color: #0000ff;&quot;&gt;params&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.bottomMargin;        final &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; bottom = top +&lt;span style=&quot;color: #000000;&quot;&gt; mDivider.getIntrinsicHeight();        mDivider.setBounds(left, top, right, bottom);        mDivider.draw(c);    }}&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; drawHorizontal(Canvas c, RecyclerView parent) {    final &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; top =&lt;span style=&quot;color: #000000;&quot;&gt; parent.getPaddingTop();    final &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; bottom = parent.getHeight() -&lt;span style=&quot;color: #000000;&quot;&gt; parent.getPaddingBottom();    final &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; childCount =&lt;span style=&quot;color: #000000;&quot;&gt; parent.getChildCount();    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;; i &amp;lt; childCount; i++&lt;span style=&quot;color: #000000;&quot;&gt;) {        final View child &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; parent.getChildAt(i);        final RecyclerView.LayoutParams &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;params&lt;/span&gt; =&lt;span style=&quot;color: #000000;&quot;&gt; (RecyclerView.LayoutParams) child                .getLayoutParams();        final &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; left = child.getRight() + &lt;span style=&quot;color: #0000ff;&quot;&gt;params&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.rightMargin;        final &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; right = left +&lt;span style=&quot;color: #000000;&quot;&gt; mDivider.getIntrinsicHeight();        mDivider.setBounds(left, top, right, bottom);        mDivider.draw(c);    }}@Override&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; getItemOffsets(Rect outRect, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; itemPosition, RecyclerView parent) {    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (mOrientation ==&lt;span style=&quot;color: #000000;&quot;&gt; VERTICAL_LIST) {        outRect.&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;set&lt;/span&gt;(&lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, mDivider.getIntrinsicHeight());    } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {        outRect.&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;set&lt;/span&gt;(&lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;, mDivider.getIntrinsicWidth(), &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);    }}</code></pre><p>}</p></pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>&nbsp;</p><p>　　RecyclerView 和 ListView 都可以加头和尾。 在后面列表的上拉加载，下拉刷新控件中再讲。</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/recyclerview.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_body&quot; c
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 十二 ) 图片加载框架---Fresco</title>
    <link href="https://freefuncode.github.io/2018/08/05/Android%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%8D%81%E4%BA%8C%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%A1%86%E6%9E%B6-Fresco/"/>
    <id>https://freefuncode.github.io/2018/08/05/Android开源框架十二图片加载框架-Fresco/</id>
    <published>2018-08-05T10:43:27.000Z</published>
    <updated>2019-09-06T13:20:05.780Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/Fresco.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <p>　　Fresco是Facebook推出的一款用于Android应用中展示图片的强大图片库。它具有强大的内存管理、渐进式呈现图片、支持加载Gif图和WebP格式等特点。</p><p>　　相比于其他图片框架要庞大的多，但是对于图片的处理也要比其他框架支持的多。</p><p>　　Fresco官方中文介绍文档：<a href="https://www.fresco-cn.org/" target="_blank">https://www.fresco-cn.org/</a></p><p>　　Fresco GitHub 地址：<a href="https://github.com/facebook/fresco" target="_blank">https://github.com/facebook/fresco</a></p><h2>Fresco使用</h2><h3>　　1.添加依赖</h3><div class="cnblogs_code"><pre>compile <span style="color: #800000;">'</span><span style="color: #800000;">com.facebook.fresco:fresco:1.10.0</span><span style="color: #800000;">'</span></pre></div><h4>　　其他相关依赖</h4><div class="cnblogs_code"><pre>compile <span style="color: #800000;">'</span><span style="color: #800000;">com.facebook.fresco:animated-gif:1.5.0</span><span style="color: #800000;">'</span><span style="color: #008000;">//</span><span style="color: #008000;">加载gif动图需添加此库</span>compile <span style="color: #800000;">'</span><span style="color: #800000;">com.facebook.fresco:animated-webp:1.5.0</span><span style="color: #800000;">'</span><span style="color: #008000;">//</span><span style="color: #008000;">加载webp动图需添加此库</span>compile <span style="color: #800000;">'</span><span style="color: #800000;">com.facebook.fresco:webpsupport:1.5.0</span><span style="color: #800000;">'</span><span style="color: #008000;">//</span><span style="color: #008000;">支持webp需添加此库</span>compile <span style="color: #800000;">'</span><span style="color: #800000;">com.facebook.fresco:imagepipeline-okhttp3:1.5.0</span><span style="color: #800000;">'</span><span style="color: #008000;">//</span><span style="color: #008000;">网络实现层使用okhttp3需添加此库</span>compile <span style="color: #800000;">'</span><span style="color: #800000;">jp.wasabeef:fresco-processors:2.1.0@aar</span><span style="color: #800000;">'</span><span style="color: #008000;">//</span><span style="color: #008000;">用于提供fresco的各种图片变换</span></pre></div><h3>　　2.图片加载布局控件</h3><p>　　必须设置layout_width、layout_height两个属性，否则无法展示。并且注意SimpleDraweeView不支持wrap_content属性。可以参考官方文档：<a href="https://www.fresco-cn.org/docs/wrap-content.html" target="_blank">wrap_content的限制</a> 。你必须指定尺寸或者用<code class="highlighter-rouge">match_parent</code>来布局。</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>&lt;<span style="color: #000000;">com.facebook.drawee.view.SimpleDraweeView        android:id</span>=<span style="color: #800000;">"</span><span style="color: #800000;">@+id/sdv_fresco</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_width</span>=<span style="color: #800000;">"</span><span style="color: #800000;">130dp</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_gravity</span>=<span style="color: #800000;">"</span><span style="color: #800000;">center</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_height</span>=<span style="color: #800000;">"</span><span style="color: #800000;">130dp</span><span style="color: #800000;">"</span><span style="color: #000000;">        fresco:placeholderImage</span>=<span style="color: #800000;">"</span><span style="color: #800000;">@drawable/atguigu_logo</span><span style="color: #800000;">"</span> /&gt;</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h2>　　3.常用属性</h2><h4>　　3.1&nbsp;带进度条的图片</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">　　//</span><span style="color: #008000;"> 设置样式</span>    GenericDraweeHierarchyBuilder builder = <span style="color: #0000ff;">new</span><span style="color: #000000;"> GenericDraweeHierarchyBuilder(getResources());    GenericDraweeHierarchy hierarchy </span>= builder.setProgressBarImage(<span style="color: #0000ff;">new</span><span style="color: #000000;"> ProgressBarDrawable()).build();    sdvFresco.setHierarchy(hierarchy);    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 加载图片的地址</span>    Uri uri = Uri.parse(<span style="color: #800000;">"</span><span style="color: #800000;">http://</span><span style="color: #800000;">"</span><span style="color: #000000;">);    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 加载图片</span>    sdvFresco.setImageURI(uri);</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h4>　　3.2&nbsp;图片的不同裁剪</h4><p>　　　　CENTER</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>　　GenericDraweeHierarchyBuilder builder = <span style="color: #0000ff;">new</span><span style="color: #000000;"> GenericDraweeHierarchyBuilder(getResources());<pre><code>&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;居中，无缩放&lt;/span&gt;GenericDraweeHierarchy hierarchy =&lt;span style=&quot;color: #000000;&quot;&gt; builder.setActualImageScaleType(ScalingUtils.ScaleType.CENTER).build();&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 设置样式&lt;/span&gt;</code></pre><p><span style="color: #000000;">    sdvFresco.setHierarchy(hierarchy);<br>    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 加载图片的地址</span><br>    Uri uri = Uri.parse(<span style="color: #800000;">“</span><span style="color: #800000;">http://</span><span style="color: #800000;">“</span><span style="color: #000000;">);<br>    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 加载图片</span><br>    sdvFresco.setImageURI(uri);</p></span></pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>　　CENTER_CROP</p><div class="cnblogs_code"><pre><span style="color: #008000;">//</span><span style="color: #008000;">保持宽高比缩小或放大，使得两边都大于或等于显示边界。居中显示</span>    GenericDraweeHierarchy hierarchy = builder.setActualImageScaleType(ScalingUtils.ScaleType.CENTER_CROP).build();</pre></div><p>　　FOCUS_CROP</p><div class="cnblogs_code"><pre><span style="color: #008000;">//</span><span style="color: #008000;"> 同centerCrop, 但居中点不是中点，而是指定的某个点,这里我设置为图片的左上角那点</span>    PointF point = <span style="color: #0000ff;">new</span> PointF(<span style="color: #800080;">0</span>,<span style="color: #800080;">0</span><span style="color: #000000;">);    GenericDraweeHierarchy hierarchy </span>= builder.setActualImageScaleType(ScalingUtils.ScaleType.FOCUS_CROP)</pre></div><p>　　CENTER_INSIDE</p><div class="cnblogs_code"><pre><span style="color: #008000;">//</span><span style="color: #008000;">使两边都在显示边界内，居中显示。如果图尺寸大于显示边界，则保持长宽比缩小图片</span>    GenericDraweeHierarchy hierarchy = builder.setActualImageScaleType(ScalingUtils.ScaleType.CENTER_INSIDE).build();</pre></div><p>　　FIT_CENTER</p><div class="cnblogs_code"><pre><span style="color: #008000;">//</span><span style="color: #008000;">保持宽高比，缩小或者放大，使得图片完全显示在显示边界内。居中显示</span>    GenericDraweeHierarchy hierarchy = builder.setActualImageScaleType(ScalingUtils.ScaleType.FIT_CENTER).build();</pre></div><p>　　FIT_START</p><div class="cnblogs_code"><pre><span style="color: #008000;">//</span><span style="color: #008000;">保持宽高比，缩小或者放大，使得图片完全显示在显示边界内，不居中，和显示边界左上对齐</span>    GenericDraweeHierarchy hierarchy = builder.setActualImageScaleType(ScalingUtils.ScaleType.FIT_START).build();</pre></div><p>　　FIT_END</p><div class="cnblogs_code"><pre><span style="color: #008000;">//</span><span style="color: #008000;">保持宽高比，缩小或者放大，使得图片完全显示在显示边界内，不居中，和显示边界右下对齐</span>    GenericDraweeHierarchy hierarchy = builder.setActualImageScaleType(ScalingUtils.ScaleType.FIT_END).build();</pre></div><p>　　FIT_XY</p><div class="cnblogs_code"><pre><span style="color: #008000;">//</span><span style="color: #008000;">不保持宽高比，填充满显示边界</span>    GenericDraweeHierarchy hierarchy = builder.setActualImageScaleType(ScalingUtils.ScaleType.FIT_XY).build();</pre></div><p>　　title mode</p><div class="cnblogs_code"><pre><span style="color: #008000;">//</span><span style="color: #008000;">如要使用title mode显示, 需要设置为none</span>    GenericDraweeHierarchy hierarchy = builder.setActualImageScaleType(<span style="color: #0000ff;">null</span>).build();</pre></div><h4>　　3.3&nbsp;圆形和圆角图片　　</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">　　//</span><span style="color: #008000;">圆形图片</span>    parames =<span style="color: #000000;"> RoundingParams.asCircle();    GenericDraweeHierarchy hierarchy </span>=<span style="color: #000000;"> builder.setRoundingParams(parames).build();<pre><code>&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;圆角图片&lt;/span&gt;parames =&lt;span style=&quot;color: #000000;&quot;&gt; RoundingParams.fromCornersRadius(50f);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;parames.setOverlayColor(getResources().getColor(android.R.color.holo_red_light));&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;覆盖层&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;parames.setBorder(getResources().getColor(android.R.color.holo_blue_light), 5);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;边框&lt;/span&gt;GenericDraweeHierarchy hierarchy = builder.setRoundingParams(parames).build();&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><h4>　　3.4&nbsp;渐进式展示图片</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">　　//</span><span style="color: #008000;"> 加载质量配置</span>    ProgressiveJpegConfig jpegConfig = <span style="color: #0000ff;">new</span><span style="color: #000000;"> ProgressiveJpegConfig() {        @Override        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span> getNextScanNumberToDecode(<span style="color: #0000ff;">int</span><span style="color: #000000;"> scanNumber) {            </span><span style="color: #0000ff;">return</span> scanNumber + <span style="color: #800080;">2</span><span style="color: #000000;">;        }<pre><code>    @Override    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; QualityInfo getQualityInfo(&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; scanNumber) {        boolean isGoodEnough &lt;/span&gt;= (scanNumber &amp;gt;= &lt;span style=&quot;color: #800080;&quot;&gt;5&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; ImmutableQualityInfo.of(scanNumber, isGoodEnough, &lt;span style=&quot;color: #0000ff;&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);    }};ImagePipelineConfig.newBuilder(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;).setProgressiveJpegConfig(jpegConfig).build();&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 获取图片URL&lt;/span&gt;Uri uri = Uri.parse(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;http://&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 获取图片请求&lt;/span&gt;ImageRequest request = ImageRequestBuilder.newBuilderWithSource(uri).setProgressiveRenderingEnabled(&lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;).build();DraweeController draweeController &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; Fresco.newDraweeControllerBuilder()        .setImageRequest(request)        .setTapToRetryEnabled(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)        .setOldController(sdvFresco.getController())&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;使用oldController可以节省不必要的内存分配&lt;/span&gt;</code></pre><p><span style="color: #000000;">            .build();</span></p><pre><code>&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 设置加载的控制&lt;/span&gt;sdvFresco.setController(draweeController);&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><h4>　　3.5&nbsp;GIF动画图片</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>　　Uri uri = Uri.parse(<span style="color: #800000;">"</span><span style="color: #800000;">http://</span><span style="color: #800000;">"</span><span style="color: #000000;">);    DraweeController controller </span>=<span style="color: #000000;"> Fresco.newDraweeControllerBuilder()            .setUri(uri)            .setAutoPlayAnimations(</span><span style="color: #0000ff;">true</span>) <span style="color: #008000;">//</span><span style="color: #008000;">是否自动播放</span><span style="color: #000000;">            .setOldController(sdvFresco.getController())            .build();<pre><code>sdvFresco.setController(controller);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 动画开始&lt;/span&gt;Animatable animatable =&lt;span style=&quot;color: #000000;&quot;&gt; sdvFresco.getController().getAnimatable();&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;(animatable != &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !&lt;span style=&quot;color: #000000;&quot;&gt;animatable.isRunning()) {    animatable.start();}&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;动画停止&lt;/span&gt; Animatable animatable =&lt;span style=&quot;color: #000000;&quot;&gt; sdvFresco.getController().getAnimatable();&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;(animatable != &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; animatable.isRunning()) {    animatable.stop();}&lt;/span&gt;&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><h4>　　3.6&nbsp;多图请求及图片复用</h4><p>　　　　先显示低分辨率的图，然后是高分辨率的图</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">　　//</span><span style="color: #008000;"> 图片地址</span>    Uri lowUri = Uri.parse(<span style="color: #800000;">"</span><span style="color: #800000;">http://</span><span style="color: #800000;">"</span><span style="color: #000000;">);    Uri highUri </span>= Uri.parse(<span style="color: #800000;">"</span><span style="color: #800000;">http://</span><span style="color: #800000;">"</span><span style="color: #000000;">);    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 控制加载图片</span>    DraweeController controller =<span style="color: #000000;"> Fresco.newDraweeControllerBuilder()            .setLowResImageRequest(ImageRequest.fromUri(lowUri))            .setImageRequest(ImageRequest.fromUri(highUri))            .build();    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 加载图片</span><span style="color: #000000;">    sdvFresco.setController(controller);<pre><code>本地缩略图预览&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 图片地址&lt;/span&gt;Uri uri = Uri.fromFile(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; File(Environment.getExternalStorageDirectory() +&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;/meinv1.jpg&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;));&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 加载图片的请求&lt;/span&gt;ImageRequest request =&lt;span style=&quot;color: #000000;&quot;&gt; ImageRequestBuilder.newBuilderWithSource(uri)        .setLocalThumbnailPreviewsEnabled(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)        .build();&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 控制图片的加载&lt;/span&gt;DraweeController controller =&lt;span style=&quot;color: #000000;&quot;&gt; Fresco.newDraweeControllerBuilder()        .setImageRequest(request)        .build();&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 加载图片&lt;/span&gt;</code></pre><p><span style="color: #000000;">    sdvFresco.setController(controller);</span></p><pre><code>本地图片复用&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;本地图片的复用&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;在请求之前，还会去内存中请求一次图片，没有才会先去本地，最后去网络uri&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;本地准备复用图片的uri  如果本地这个图片不存在，会自动去加载下一个uri&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 请求加载图片&lt;/span&gt;Uri uri1 = Uri.fromFile(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; File(Environment.getExternalStorageDirectory()+&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;/meinv.jpg&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;));&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;图片的网络uri&lt;/span&gt;Uri uri2 = Uri.parse(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;http://&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);ImageRequest request1 &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; ImageRequest.fromUri(uri1);ImageRequest request2 &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; ImageRequest.fromUri(uri2);ImageRequest[] requests &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; {request1, request2};&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 控制加载图片&lt;/span&gt;DraweeController controller =&lt;span style=&quot;color: #000000;&quot;&gt; Fresco.newDraweeControllerBuilder()        .setFirstAvailableImageRequests(requests)        .setOldController(sdvFresco.getController())        .build();&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 加载图片&lt;/span&gt;sdvFresco.setController(controller);&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><h4>　　3.7&nbsp;图片加载监听</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>    <span style="color: #008000;">//</span><span style="color: #008000;"> 图片加载的控制     </span><span style="color: #008000;">//</span><span style="color: #008000;">添加监听事件 .setControllerListener(controllerListener)</span><span style="color: #000000;">    SimpleDraweeView sdvFrescoListener;<pre><code>DraweeController controller &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; Fresco.newDraweeControllerBuilder()        .setOldController(sdvFrescoListener.getController())        .setImageRequest(request)        .setControllerListener(controllerListener)        .build();&lt;/span&gt;&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #0000ff;">private</span> ControllerListener controllerListener = <span style="color: #0000ff;">new</span> BaseControllerListener&lt;ImageInfo&gt;<span style="color: #000000;">(){        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 加载图片完毕</span><span style="color: #000000;">        @Override        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onFinalImageSet(String id, ImageInfo imageInfo, Animatable animatable) {            super.onFinalImageSet(id, imageInfo, animatable);<pre><code>    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (imageInfo == &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) {        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;    }    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 获取图片的质量&lt;/span&gt;    QualityInfo qualityInfo =&lt;span style=&quot;color: #000000;&quot;&gt; imageInfo.getQualityInfo();    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;页面文本打印setText&lt;/span&gt;    tvFrescoListener.setText(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Final image received! &lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; +            &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;\nSize: &lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; +&lt;span style=&quot;color: #000000;&quot;&gt; imageInfo.getWidth()            &lt;/span&gt;+ &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;x&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; +&lt;span style=&quot;color: #000000;&quot;&gt; imageInfo.getHeight()            &lt;/span&gt;+ &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;\nQuality level: &lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; +&lt;span style=&quot;color: #000000;&quot;&gt; qualityInfo.getQuality()            &lt;/span&gt;+ &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;\ngood enough: &lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; +&lt;span style=&quot;color: #000000;&quot;&gt; qualityInfo.isOfGoodEnoughQuality()            &lt;/span&gt;+ &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;\nfull quality: &lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; +&lt;span style=&quot;color: #000000;&quot;&gt; qualityInfo.isOfFullQuality());}&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 渐进式加载图片回调&lt;/span&gt;</code></pre><p><span style="color: #000000;">        @Override<br>        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onIntermediateImageSet(String id, ImageInfo imageInfo) {<br>            super.onIntermediateImageSet(id, imageInfo);</span></p><pre><code>    tvFrescoListener2.setText(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;IntermediateImageSet image receiced&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);}&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 加载图片失败&lt;/span&gt;</code></pre><p><span style="color: #000000;">        @Override<br>        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onFailure(String id, Throwable throwable) {<br>            super.onFailure(id, throwable);</span></p><pre><code>        tvFrescoListener.setText(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Error loading&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; +&lt;span style=&quot;color: #000000;&quot;&gt; id);    }}&lt;/span&gt;&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><h4>　　3.8&nbsp;图片修改和旋转</h4><p>　　　　修内存中改图片大小 setResizeOptions&nbsp;</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre> 　　<span style="color: #008000;">//</span><span style="color: #008000;"> 图片地址</span>    Uri uri = Uri.parse(<span style="color: #800000;">"</span><span style="color: #800000;">http://</span><span style="color: #800000;">"</span><span style="color: #000000;">);    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 图片的请求</span>    ImageRequest request =<span style="color: #000000;"> ImageRequestBuilder.newBuilderWithSource(uri)            .setResizeOptions(</span><span style="color: #0000ff;">new</span> ResizeOptions(<span style="color: #800080;">50</span>,<span style="color: #800080;">50</span><span style="color: #000000;">))            .build();    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 控制图片的加载</span>    PipelineDraweeController controller =<span style="color: #000000;"> (PipelineDraweeController) Fresco.newDraweeControllerBuilder()            .setOldController(sdvFresco.getController())            .setImageRequest(request)            .build();    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 加载图片</span>    sdvFresco.setController(controller);</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>　　　　旋转图片 setAutoRotateEnabled</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>　　Uri uri = Uri.parse(<span style="color: #800000;">"</span><span style="color: #800000;">http://</span><span style="color: #800000;">"</span><span style="color: #000000;">);    ImageRequest request </span>=<span style="color: #000000;"> ImageRequestBuilder.newBuilderWithSource(uri)            .setAutoRotateEnabled(</span><span style="color: #0000ff;">true</span><span style="color: #000000;">)            .build();    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 控制图片的加载</span>    DraweeController controller =<span style="color: #000000;"> Fresco.newDraweeControllerBuilder()            .setOldController(sdvFresco.getController())            .setImageRequest(request)            .build();    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 加载图片</span>    sdvFresco.setController(controller);</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h4>　　3.9&nbsp;修改图片(显示过程同上,主要更改了ImageRequest设置) setPostprocessor</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>    <span style="color: #008000;">//</span><span style="color: #008000;"> 修改图片</span>    Postprocessor postProcessor = <span style="color: #0000ff;">new</span><span style="color: #000000;"> BasePostprocessor() {        @Override        </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> String getName() {            </span><span style="color: #0000ff;">return</span> <span style="color: #800000;">"</span><span style="color: #800000;">postProcessor</span><span style="color: #800000;">"</span><span style="color: #000000;">;        }        @Override        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> process(Bitmap bitmap) {            </span><span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> x = <span style="color: #800080;">0</span>; x &lt; bitmap.getWidth(); x += <span style="color: #800080;">2</span><span style="color: #000000;">) {                </span><span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> y = <span style="color: #800080;">0</span>; y &lt; bitmap.getHeight(); y += <span style="color: #800080;">2</span><span style="color: #000000;">) {                    bitmap.setPixel(x, y, Color.RED);                }            }        }    };<pre><code>&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 创建图片请求&lt;/span&gt;ImageRequest request =&lt;span style=&quot;color: #000000;&quot;&gt; ImageRequestBuilder.newBuilderWithSource(uri)        .setPostprocessor(postProcessor)        .build();&lt;/span&gt;&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><h4>&nbsp;　　3.10&nbsp;动态展示图片（添加SimpleDraweeView到LinearLayout中）</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>　　SimpleDraweeView simpleDraweeView = <span style="color: #0000ff;">new</span> SimpleDraweeView(<span style="color: #0000ff;">this</span><span style="color: #000000;">);    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 设置宽高比</span>    simpleDraweeView.setAspectRatio(<span style="color: #800080;">3.0f</span><span style="color: #000000;">);<pre><code>&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 图片的地址&lt;/span&gt;Uri uri = Uri.parse(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;http://&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 图片的请求&lt;/span&gt;ImageRequest request =&lt;span style=&quot;color: #000000;&quot;&gt; ImageRequestBuilder.newBuilderWithSource(uri)        .build();&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 加载图片的控制&lt;/span&gt;PipelineDraweeController controller =&lt;span style=&quot;color: #000000;&quot;&gt; (PipelineDraweeController) Fresco.newDraweeControllerBuilder()        .setOldController(simpleDraweeView.getController())        .setImageRequest(request)        .build();&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 加载图片&lt;/span&gt;</code></pre><p><span style="color: #000000;">    simpleDraweeView.setController(controller);<br>    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 添加View到线性布局中</span><br>    linearLayout.addView(simpleDraweeView);</p></span></pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>&nbsp;</p><h4>&nbsp;</h4></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/Fresco.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_body&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 十一 ) 图片加载框架---Glide</title>
    <link href="https://freefuncode.github.io/2018/08/05/Android%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%8D%81%E4%B8%80%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%A1%86%E6%9E%B6-Glide/"/>
    <id>https://freefuncode.github.io/2018/08/05/Android开源框架十一图片加载框架-Glide/</id>
    <published>2018-08-05T06:07:01.000Z</published>
    <updated>2019-09-06T13:20:05.780Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/Glide.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <h2>一.引言</h2><p>&nbsp;Glide被广泛运用在google的开源项目中，包括2014年的google I/O大会上发布的官方app</p><div>&nbsp;前面介绍了</div><div>&nbsp; 　　Universal ImageLoader&nbsp;<a id="post_title_link_9425287" href="https://www.cnblogs.com/bugzone/p/Picasso.html" target="_blank">Android 开源框架 ( 十 ) 图片加载框架---Picasso</a></div><div>&nbsp; 　　Picasso.&nbsp;<a id="post_title_link_9425211" href="https://www.cnblogs.com/bugzone/p/ImageLoader.html" target="_blank">Android 开源框架 ( 九 ) 图片加载框架---ImageLoader</a></div><div>　　</div><div>　　而本文介绍的Glide是在Picasso基础上进行的二次开发，和Picasso 有90%相似度，其优势显而易见。Universal ImageLoader已停止服务。</div><div>&nbsp;</div><h2>二.基本使用</h2><h3>　　1.添加最新依赖　　</h3><div class="cnblogs_code"><pre>compile <span style="color: #800000;">'</span><span style="color: #800000;">com.github.bumptech.glide:glide:4.7.1</span><span style="color: #800000;">'</span></pre></div><p><strong>注意</strong>：Glide默认会导入Android的support-v4包。4.71版本默认导入的是v4包的27版本。如果你的项目中有v4包的别的版本，就会引起冲突发生错误如 java.lang.NoSuchMethodError: No static method。</p><h3>　　2.基本使用</h3><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #000000;">Glide.with(mContext)    .load(mDatas[position])    .placeholder(R.mipmap.ic_launcher) </span><span style="color: #008000;">//</span><span style="color: #008000;">占位图</span>    .error(R.mipmap.ic_launcher)  <span style="color: #008000;">//</span><span style="color: #008000;">出错的占位图</span>    .<span style="color: #0000ff;">override</span>(width, height) <span style="color: #008000;">//</span><span style="color: #008000;">图片显示的分辨率 ，像素值 可以转化为DP再设置</span><span style="color: #000000;">    .animate(R.anim.glide_anim)    .centerCrop()    .fitCenter()    .into(holder.image);</span></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h2>三.拓展了解Glide加载不同的图片</h2><p>　　Glide不仅仅可以加载网络图片，同样也能加载资源图片，本地图片，GIf, 视频快照，缩略图等。</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">　　//</span><span style="color: #008000;">（1）加载网络图片</span>    Glide.with(<span style="color: #0000ff;">this</span>).load(<span style="color: #800000;">"</span><span style="color: #800000;">http://img1.imgtn.bdimg.com/it/u=2615772929,948758168&amp;fm=21&amp;gp=0.jpg</span><span style="color: #800000;">"</span><span style="color: #000000;">).into(ivGlide1);<pre><code>&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;（2）加载资源图片&lt;/span&gt;Glide.with(&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;).load(R.drawable.atguigu_logo).into(ivGlide2);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;（3）加载本地图片&lt;/span&gt;String path = Environment.getExternalStorageDirectory() + &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;/meinv1.jpg&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;File file &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; File(path);Uri uri &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; Uri.fromFile(file);Glide.with(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;).load(uri).into(ivGlide3);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; （4）加载网络gif&lt;/span&gt;String gifUrl = &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;http://b.hiphotos.baidu.com/zhidao/pic/item/faedab64034f78f066abccc57b310a55b3191c67.jpg&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;Glide.with(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;).load(gifUrl).placeholder(R.mipmap.ic_launcher).into(ivGlide4);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; （5）加载资源gif&lt;/span&gt;Glide.with(&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;).load(R.drawable.loading).asGif().placeholder(R.mipmap.ic_launcher).into(ivGlide5);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;（6）加载本地gif&lt;/span&gt;String gifPath = Environment.getExternalStorageDirectory() + &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;/meinv2.jpg&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;File gifFile &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; File(gifPath);Glide.with(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;).load(gifFile).placeholder(R.mipmap.ic_launcher).into(ivGlide6);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;（7）加载本地小视频和快照&lt;/span&gt;String videoPath = Environment.getExternalStorageDirectory() + &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;/video.mp4&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;File videoFile &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; File(videoPath);Glide.with(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;).load(Uri.fromFile(videoFile)).placeholder(R.mipmap.ic_launcher).into(ivGlide7);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;（8）设置缩略图比例,然后，先加载缩略图，再加载原图&lt;/span&gt;String urlPath = Environment.getExternalStorageDirectory() + &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;/meinv1.jpg&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;Glide.with(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;).load(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; File(urlPath)).thumbnail(&lt;span style=&quot;color: #800080;&quot;&gt;0.1f&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;).centerCrop().placeholder(R.mipmap.ic_launcher).into(ivGlide8);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;（9）先建立一个缩略图对象，然后，先加载缩略图，再加载原图&lt;/span&gt;DrawableRequestBuilder thumbnailRequest = Glide.with(&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;).load(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; File(urlPath));Glide.with(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;).load(Uri.fromFile(videoFile)).thumbnail(thumbnailRequest).centerCrop().placeholder(R.mipmap.ic_launcher).into(ivGlide9);&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><p>&nbsp;</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/Glide.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_body&quot; class=&quot;b
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 十 ) 图片加载框架---Picasso</title>
    <link href="https://freefuncode.github.io/2018/08/05/Android%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%8D%81%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%A1%86%E6%9E%B6-Picasso/"/>
    <id>https://freefuncode.github.io/2018/08/05/Android开源框架十图片加载框架-Picasso/</id>
    <published>2018-08-05T05:56:31.000Z</published>
    <updated>2019-09-06T13:20:05.780Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/Picasso.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <p>　　Picasso 是Square 公司（SQUARE美国一家移动支付公司）开源的Android 端的图片加载和缓存框架。Square 还开源了Rerefoit 、OkHttp、LeakCanary、Picasso等等都是非常火的开源项目。</p><p>　　Picasso官方介绍网站：<a href="http://square.github.io/picasso/" target="_blank">http://square.github.io/picasso/</a></p><h2>一.基本使用</h2><p>　　1.添加依赖</p><div class="cnblogs_code"><pre>compile <span style="color: #800000;">'</span><span style="color: #800000;">com.squareup.picasso:picasso:2.5.2</span><span style="color: #800000;">'</span></pre></div><p>　　如果需要对加载的图片进行个性化处理可以(转换器Transformation)，添加图片处理的依赖库</p><div class="cnblogs_code"><pre>compile <span style="color: #800000;">'</span><span style="color: #800000;">jp.wasabeef:picasso-transformations:2.1.0</span><span style="color: #800000;">'</span>    <span style="color: #008000;">//</span><span style="color: #008000;"> If you want to use the GPU Filters</span>compile <span style="color: #800000;">'</span><span style="color: #800000;">jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1</span><span style="color: #800000;">'</span></pre></div><p>&nbsp; &nbsp; 2.基本使用</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>    <span style="color: #008000;">//</span><span style="color: #008000;"> 加载图片</span><span style="color: #000000;">    Picasso.with(mContext)            .load(url)            .placeholder(R.drawable.ic_launcher)            .error(R.drawable.ic_launcher)            .into(holder.iv);        </span></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h2>二.Picasso其他设置</h2><div>　　<strong>1.设置的默认图</strong></div><div><div class="cnblogs_code"><pre>.placeholder(R.drawable.default_bg)</pre></div><p>　　<strong>2.调用into的时候明确告诉你没有占位图设置。placeholder和noPlaceholder 不能同时应用在同一个请求上，否则会抛异常。</strong></p></div><div><div class="cnblogs_code"><pre>.noPlaceholder()</pre></div><p>　　<strong>3.加载图片出错的情况下显示的默认图</strong></p></div><div><div class="cnblogs_code"><pre>.error(R.drawable.error_iamge)</pre></div><p><strong>　　4.into 显示到ImageView 都会有一个简单的渐入过度效果,提升用户体验。如果不需要就设置noFade。默认会有渐变.</strong></p></div><div><div class="cnblogs_code"><pre>.noFade()</pre></div><p><strong>　　5.设置图片尺寸(Resize)</strong></p></div><div><div class="cnblogs_code"><pre>.resize(<span style="color: #800080;">400</span>,<span style="color: #800080;">200</span>) <span style="color: #008000;">//</span><span style="color: #008000;">该单位是pixels(px)</span>.resizeDimen(R.dimen.image_width,R.dimen.image_height) <span style="color: #008000;">//</span><span style="color: #008000;">resizeDimen(int targetWidthResId, int targetHeightResId) </span><span style="color: #008000;">//</span><span style="color: #008000;">该单位dimen里的属性，可以设置为dp值</span></pre></div><p><strong>　　6.设置缩放(Scale)</strong></p></div><div>　　　　只有当原始图片的尺寸大于我们指定的尺寸时，resize才起作用</div><div><div class="cnblogs_code"><pre>.resize(<span style="color: #800080;">4000</span>,<span style="color: #800080;">2000</span><span style="color: #000000;">).onlyScaleDown()</span></pre></div><p><strong>　　7.设置裁剪(Crop)</strong></p></div><div>&nbsp;　　　　<strong>7.1 centerCrop()</strong>充满ImageView 的边界，居中裁剪。ImageView 的ScaleType 也有这个属性。<br>&nbsp;<div class="cnblogs_code"><pre>.centerCrop()        </pre></div><p>　　　　<strong>7.2</strong> 上面的centerCrop是可能看不到全部图片的，如果你想让View将图片展示完全，可以用<strong>centerInside</strong>，但是如果图片尺寸小于View尺寸的话，是不能充满View边界的。</p><div class="cnblogs_code"><pre> .centerInside()</pre></div><p>　　　　<strong>7.3 fit</strong> 它会自动测量我们的View的大小，然后内部调用reszie方法把图片裁剪到View的大小，这就帮我们做了计算size和调用resize。</p><div class="cnblogs_code"><pre>  .fit()</pre></div><p>&nbsp;使用fit 还是会出现拉伸扭曲的情况，因此最好配合前面的centerCrop使用</p></div><div><div class="cnblogs_code"><pre><span style="color: #000000;">.fit().centerCrop()</span></pre></div><p>　　<strong>注意</strong>：</p></div><div>　　&nbsp;　　1，fit 只对ImageView 有效。<br>&nbsp;　　　　2，使用fit时，ImageView 宽和高不能为wrap_content,很好理解，因为它要测量宽高。<br>&nbsp;<br>　　<strong>8.图片旋转rotate(int degree)，该方法它是默认以（0，0）点旋转。</strong><br><div class="cnblogs_code"><pre>.rotate(<span style="color: #800080;">180</span><span style="color: #000000;">) </span><span style="color: #008000;">//</span><span style="color: #008000;">rotate(float degrees, float pivotX, float pivotY) 以(pivotX, pivotY)为原点旋转</span> .rotate(<span style="color: #800080;">180</span>,<span style="color: #800080;">100</span>,<span style="color: #800080;">100</span>)</pre></div><p><strong>&nbsp;9.转换器Transformation 添加依赖时候添加了Picasso Transformation的依赖。</strong></p><div class="cnblogs_code"><pre>compile <span style="color: #800000;">'</span><span style="color: #800000;">jp.wasabeef:picasso-transformations:2.1.0</span><span style="color: #800000;">'</span></pre></div><p>&nbsp;　　Transformation 这就是Picasso的一个非常强大的功能了，它允许你在load图片 -&gt; into ImageView 中间这个过成对图片做一系列的变换。比如你要做图片高斯模糊、添加圆角、做度灰处理、圆形图片等等都可以通过Transformation来完成。</p>&nbsp;具体使用可以自己继续探索，功能很多，</div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/Picasso.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_body&quot; class=
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 九 ) 图片加载框架---ImageLoader</title>
    <link href="https://freefuncode.github.io/2018/08/05/Android%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E4%B9%9D%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%A1%86%E6%9E%B6-ImageLoader/"/>
    <id>https://freefuncode.github.io/2018/08/05/Android开源框架九图片加载框架-ImageLoader/</id>
    <published>2018-08-05T05:00:34.000Z</published>
    <updated>2019-09-06T13:20:05.764Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/ImageLoader.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <h2>一.引言</h2><p>　　Android的每一个App通常只拥有有限的系统资源，Android设备为每个App分配的内存大小是也是有上限的，并且，针对不同的设备配置所分配的内存大小也是不一样的，最小为16MB。图片会占用大量的内存，尤其是那些超清照片。所以图片加载时做容易造成安卓内存溢出的原因，而要解决这些问题还需要很多相关知识：<br>　　1、多线程下载，线程管理。<br>　　2、多级缓存架构设计和策略，内存缓存，磁盘缓存，缓存有效性处理。<br>　　3、图片压缩，特效处理，动画处理。<br>　　4、复杂网络情况下下载图片策略，例如弱网络等。<br>　　5、内存管理，lru 算法、对象引用、GC回收等优化。</p><p>　　Universal ImageLoader 是很早开源的图片缓存，在早期被很多应用使用。</p><p>　　Universal ImageLoader的GitHub地址：<a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank">https://github.com/nostra13/Android-Universal-Image-Loader</a><br>　　最近一次更新是在3年前,已经停止更新了。不推荐新项目中使用。</p><h2>二.基本使用　</h2><h3>　　1. 添加依赖</h3><div class="cnblogs_code"><pre>compile <span style="color: #800000;">'</span><span style="color: #800000;">com.nostra13.universalimageloader:universal-image-loader:1.9.5</span><span style="color: #800000;">'</span></pre></div><h3>　　2.Application初始化</h3><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">　　　　//</span><span style="color: #008000;"> 初始化参数</span>        ImageLoaderConfiguration config = <span style="color: #0000ff;">new</span><span style="color: #000000;"> ImageLoaderConfiguration.Builder(context)                .threadPriority(Thread.NORM_PRIORITY </span>- <span style="color: #800080;">2</span>)               <span style="color: #008000;">//</span><span style="color: #008000;"> 线程优先级</span>                .denyCacheImageMultipleSizesInMemory()                  <span style="color: #008000;">//</span><span style="color: #008000;"> 当同一个Uri获取不同大小的图片，缓存到内存时，只缓存一个。默认会缓存多个不同的大小的相同图片</span>                .discCacheFileNameGenerator(<span style="color: #0000ff;">new</span> Md5FileNameGenerator()) <span style="color: #008000;">//</span><span style="color: #008000;"> 将保存的时候的URI名称用MD5</span>                .tasksProcessingOrder(QueueProcessingType.LIFO)         <span style="color: #008000;">//</span><span style="color: #008000;"> 设置图片下载和显示的工作队列排序</span>                .writeDebugLogs()                                       <span style="color: #008000;">//</span><span style="color: #008000;"> 打印debug log</span><span style="color: #000000;">                .build();<pre><code>&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 全局初始化此配置&lt;/span&gt;ImageLoader.getInstance().init(config);&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><h3>　　3.基本使用</h3><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #000000;">imageLoader.displayImage(Constants.IMAGES[position],holder.iv,options);<p></p></span><span style="color: #0000ff;">private</span> DisplayImageOptions options = <span style="color: #0000ff;">new</span><span style="color: #000000;"> DisplayImageOptions.Builder()<br>            .showStubImage(R.drawable.atguigu_logo)          </span><span style="color: #008000;">//</span><span style="color: #008000;"> 设置图片下载期间显示的图片</span><br>            .showImageForEmptyUri(R.drawable.atguigu_logo)  <span style="color: #008000;">//</span><span style="color: #008000;"> 设置图片Uri为空或是错误的时候显示的图片</span><br>            .showImageOnFail(R.drawable.atguigu_logo)       <span style="color: #008000;">//</span><span style="color: #008000;"> 设置图片加载或解码过程中发生错误显示的图片</span><br>            .cacheInMemory(<span style="color: #0000ff;">true</span>)                        <span style="color: #008000;">//</span><span style="color: #008000;"> 设置下载的图片是否缓存在内存中</span><br>            .cacheOnDisk(<span style="color: #0000ff;">true</span>)                          <span style="color: #008000;">//</span><span style="color: #008000;"> 设置下载的图片是否缓存在SD卡中</span><br>            .displayer(<span style="color: #0000ff;">new</span> RoundedBitmapDisplayer(<span style="color: #800080;">20</span>))  <span style="color: #008000;">//</span><span style="color: #008000;"> 设置成圆角图片</span><br>            .build();                                   <span style="color: #008000;">//</span><span style="color: #008000;"> 创建配置过得DisplayImageOption对象;        </span></pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h2>三.拓展了解</h2><p>　　<strong>ImageLoaderConfiguration</strong>是针对图片缓存的全局配置，主要有线程类、缓存大小、磁盘大小、图片下载与解析、日志方面的配置。<br>　　<strong>ImageLoader</strong>是具体下载图片，缓存图片，显示图片的具体执行类，它有两个具体的方法displayImage(...)、loadImage(...)，但是其实最终他们的实现都是displayImage(...)。<br>　　<strong>DisplayImageOptions</strong>用于指导每一个Imageloader根据网络图片的状态（空白、下载错误、正在下载）显示对应的图片，是否将缓存加载到磁盘上，下载完后对图片进行怎么样的处理。</p><h4>　　1.ImageLoaderConfiguration的配置主要是全局性的配置，主要有线程类、缓存大小、磁盘大小、图片下载与解析、日志方面的配置。</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> ImageLoaderConfiguration config;    config </span>= <span style="color: #0000ff;">new</span> ImageLoaderConfiguration.Builder(context)<span style="color: #008000;">//</span><span style="color: #008000;"> 开始构建 ,图片加载配置</span>            .threadPriority(Thread.NORM_PRIORITY - <span style="color: #800080;">2</span>)<span style="color: #008000;">//</span><span style="color: #008000;"> 设置线程优先级</span>            .threadPoolSize(<span style="color: #800080;">3</span>)<span style="color: #008000;">//</span><span style="color: #008000;"> 线程池内加载的数量 ;减少配置之中线程池的大小，(.threadPoolSize).推荐1-5；</span>            .denyCacheImageMultipleSizesInMemory()<span style="color: #008000;">//</span><span style="color: #008000;"> 设置加载的图片有多样的</span>            .tasksProcessingOrder(QueueProcessingType.LIFO)<span style="color: #008000;">//</span><span style="color: #008000;"> 图片加载任务顺序</span>            .memoryCache(<span style="color: #0000ff;">new</span> WeakMemoryCache())<span style="color: #008000;">//</span><span style="color: #008000;">使用.memoryCache(new WeakMemoryCache())，不要使用.cacheInMemory();</span>            .memoryCacheExtraOptions(<span style="color: #800080;">480</span>, <span style="color: #800080;">800</span>) <span style="color: #008000;">//</span><span style="color: #008000;"> 即保存的每个缓存文件的最大长宽</span>            .memoryCacheSizePercentage(<span style="color: #800080;">60</span>)<span style="color: #008000;">//</span><span style="color: #008000;"> 图片内存占应用的60%；</span>             .diskCacheFileNameGenerator(<span style="color: #0000ff;">new</span> HashCodeFileNameGenerator())<span style="color: #008000;">//</span><span style="color: #008000;">使用HASHCODE对UIL进行加密命名</span>            .diskCacheFileNameGenerator(<span style="color: #0000ff;">new</span> Md5FileNameGenerator())<span style="color: #008000;">//</span><span style="color: #008000;"> 将保存的时候的URI名称用MD5 加密</span>            .diskCacheSize(<span style="color: #800080;">50</span> * <span style="color: #800080;">1024</span> * <span style="color: #800080;">1024</span>) <span style="color: #008000;">//</span><span style="color: #008000;"> 缓存设置大小为50 Mb</span>            .diskCache(<span style="color: #0000ff;">new</span> UnlimitedDiskCache(cacheDir))<span style="color: #008000;">//</span><span style="color: #008000;"> 自定义缓存路径</span>            .diskCacheFileCount(<span style="color: #800080;">100</span>) <span style="color: #008000;">//</span><span style="color: #008000;"> 缓存的文件数量</span>            .denyCacheImageMultipleSizesInMemory()<span style="color: #008000;">//</span><span style="color: #008000;"> 自动缩放</span>            .imageDownloader(<span style="color: #0000ff;">new</span> BaseImageDownloader(context, <span style="color: #800080;">5</span> * <span style="color: #800080;">1000</span>, <span style="color: #800080;">30</span> * <span style="color: #800080;">1000</span>)) <span style="color: #008000;">//</span><span style="color: #008000;"> connectTimeout (5 s), readTimeout (30 s)超时时间</span>            .memoryCacheExtraOptions(<span style="color: #800080;">480</span>, <span style="color: #800080;">800</span>)<span style="color: #008000;">//</span><span style="color: #008000;">设置缓存图片时候的宽高最大值，默认为屏幕宽高;保存的每个缓存文件的最大长宽</span>            .defaultDisplayImageOptions(options)<span style="color: #008000;">//</span><span style="color: #008000;"> 如果需要打开缓存机制，需要自己builde一个option,可以是DisplayImageOptions.createSimple()</span>            .writeDebugLogs() <span style="color: #008000;">//</span><span style="color: #008000;"> Remove for release app</span>            .build();构建完成（参数可以不用设置全，根据需要来配置）        </pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h4>　　2.每一个ImageLoader.displayImage(...)都可以使用Display Options。</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #0000ff;">    private</span><span style="color: #000000;"> DisplayImageOptions options;    options </span>= <span style="color: #0000ff;">new</span> DisplayImageOptions.Builder()<span style="color: #008000;">//</span><span style="color: #008000;"> 开始构建, 显示的图片的各种格式</span>                .resetViewBeforeLoading(<span style="color: #0000ff;">true</span>)<span style="color: #008000;">//</span><span style="color: #008000;"> 设置图片在下载前是否重置，复位</span>                .cacheInMemory(<span style="color: #0000ff;">true</span>)<span style="color: #008000;">//</span><span style="color: #008000;"> 开启内存缓存</span>                .cacheOnDisk(<span style="color: #0000ff;">true</span>) <span style="color: #008000;">//</span><span style="color: #008000;"> 开启硬盘缓存</span>                 .displayer(<span style="color: #0000ff;">new</span> RoundedBitmapDisplayer(<span style="color: #800080;">20</span>))<span style="color: #008000;">//</span><span style="color: #008000;"> 是否设置为圆角，弧度为多少；避免使用RoundedBitmapDisplayer.他会创建新的ARGB_8888格式的Bitmap对象；</span>                .displayer(<span style="color: #0000ff;">new</span> FadeInBitmapDisplayer(<span style="color: #800080;">100</span>))<span style="color: #008000;">//</span><span style="color: #008000;"> 是否图片加载好后渐入的动画时间</span>                .displayer(<span style="color: #0000ff;">new</span> SimpleBitmapDisplayer())<span style="color: #008000;">//</span><span style="color: #008000;"> 正常显示一张图片　</span>                .bitmapConfig(Bitmap.Config.RGB_565)<span style="color: #008000;">//</span><span style="color: #008000;"> 设置图片的解码类型;使用.bitmapConfig(Bitmap.config.RGB_565)代替ARGB_8888;</span>                .considerExifParams(<span style="color: #0000ff;">true</span>)<span style="color: #008000;">//</span><span style="color: #008000;"> 是否考虑JPEG图像EXIF参数（旋转，翻转）</span>                .imageScaleType(ImageScaleType.EXACTLY)<span style="color: #008000;">//</span><span style="color: #008000;"> 缩放级别</span>                .imageScaleType(ImageScaleType.IN_SAMPLE_INT)<span style="color: #008000;">//</span><span style="color: #008000;">这两种配置缩放都推荐</span>                .build();<span style="color: #008000;">//</span><span style="color: #008000;"> 构建完成（参数可以不用设置全，根据需要来配置）</span>    ImageLoader.getInstance().init(config);//初始化完成</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h4>　　3.ImageLoader是显示图片的具体执行类，它有两个具体的方法displayImage loadImage(...)</h4><div class="cnblogs_code"><pre>ImageLoader.getInstance().displayImage(url, imageView, options);    </pre></div><p>&nbsp;</p><p>　</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/ImageLoader.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_body&quot; cl
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
</feed>
