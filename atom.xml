<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>网记本</title>
  
  <subtitle>网络记事本-huangguangzhi</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://freefuncode.github.io/"/>
  <updated>2019-10-01T04:32:46.010Z</updated>
  <id>https://freefuncode.github.io/</id>
  
  <author>
    <name>网记本</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>关于职业生涯的想法</title>
    <link href="https://freefuncode.github.io/2019/10/01/%E5%85%B3%E4%BA%8E%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF%E7%9A%84%E6%83%B3%E6%B3%95/"/>
    <id>https://freefuncode.github.io/2019/10/01/关于职业生涯的想法/</id>
    <published>2019-10-01T04:31:39.000Z</published>
    <updated>2019-10-01T04:32:46.010Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于职业生涯的想法"><a href="#关于职业生涯的想法" class="headerlink" title="关于职业生涯的想法"></a>关于职业生涯的想法</h3><blockquote><p>一边看着国庆阅兵直播一边写写最近的一些想法。<br>最近因为香港问题，还有70年建国，网上很多爱国的段子，软件行业发展这么迅速，前提是中国高速发展的保障，此生不悔入华夏，来世还做中国人。我不是愤青，但是作为中国人真的很自豪。</p></blockquote><hr><p>前不久一篇文章：“一年前,我月薪两万被人叫老总,如今35岁在美团送外卖” 火爆互联网，更有衍生的段子，工程师的进阶之路：25岁软件工程师，28岁:高级软件工程师，32岁:架构师，35岁: 外卖员。</p><p>于自己：中年人，家里有娃要养，背负房贷，车贷，不敢随便动、不能随心选，因为稍微一随便就是牵一发而动全身。于公司：新人看潜力、“老人”看能力。互联网公司追求年轻化，35岁+需求量越来越少，但是当我们这批到35岁时候，程序员从业人数巨大，企业需求量能不能跟上，毕竟大把后浪等着拍你呢！能想想到的是，35岁+ 厮杀会比现在阶段更惨烈。</p><blockquote><p>35岁彷佛是一道坎，程序员职业生涯的分水岭，程序员生涯往上走理想的进阶无非两条路：<br>1.技术专家（架构师），2.管理。</p></blockquote><p>第一条路：技术专家。对于安卓来说，目前大部分公司很多技术专家层都是后端开发提升上来的，安卓端毕竟还是前端用户交互，核心业务数据还是在后端管理，换句话说，前端需要的技术专家远远少于后端，况且前端不仅仅是安卓，还包括ios，h5，react native等等种类繁多。相比之下，重要性不言而喻。总之最后能成功进阶到企业需要的技术专家，从概率讲，战场厮杀惨重。也需要考虑到35岁+，身体，思维活跃能否跟的上。小公司的技术专家，工作量也还是很大的，需要考虑加班承受力。</p><p>第二条路：程序员转管理层，这也是一条不错的路，但是需要训练自己不仅仅是专业技能，需要提升自己的管理技能。可以先从项目经理转型过渡。相比于第一个技术专家，正常来说厮杀会小点，风险也小点，因为对于我来说，技术栈是有风险的，工作7年，也见证过php，.net从兴盛到没落。像现在成立的一些互联网公司的技术栈与七年前的传统软件行业技术栈是不同的，尤其前端。2012年刚毕业，安卓才慢慢火起来，但是那时候苹果已经开始到达顶峰，我周边苹果用户量是超过安卓的；现在，我有感觉，我周边安卓用户超越了苹果。曾经的移动手机霸主，诺基亚早已宣布倒闭，前端这个行业日新月异，你不知道你现在精通的技术领域，不知道什么时候可能就没落了，保持持续学习，没有年轻人有活力和冲劲。转管理层是目前来看是比走技术领域发展方向要宽广，成本更小。</p><p>我之前看过这样一句话，大概意思，30岁之前如果在行业领域没有突出成就，应该就要转行了。如果30岁没有达到设定的技术高度，如果30岁后还把所有精力放到技术上，风险有点大，因为基本你不会再有什么突出成就了。也许有人会反驳我，程序员就应该搞技术研究，一直朝技术专家，架构师职业发展。这些话你说给公司听就行了，因为从投资角度出发，30岁后你要考虑提升自己的综合实力了，不仅仅是技术，反之我也不是说技术不重要了，只是说把精力需要适当从关注技术上，分散一部分精力提升自己的综合管理能力。</p><blockquote><p>技术是最后保障你有一口饭吃的基本，但是综合实力决定你能走多远，走多好。</p></blockquote><p>曾经，我对于新鲜的一些技术，都乐于尝鲜，也经常活跃各个网络技术博客论坛中。不知道什么时候态度有点转变了，不大愿意花时间去研究目前用不上的技术，除非对我很有诱惑力，也许是见多了新技术的层出不穷，也许是势利了。工作七年也接过几个熟人介绍的外包，心态有点转变。曾经因为兴趣爱好，非常乐于花时间去研究新技术，现在或许只有需求驱动，换句话说就是因为挣钱才会去研究一些项目中需要的技术。现在学习，工作，生活，心里都在考虑成本，值不值。因为程序员时间真的不够用，在现在很多公司996市场环境下，如果换算成时薪，工资真的不算高。程序员除去工作时间，留给自己的时间真的不多。</p><p>经常在想，还有半年时间后，我也要步入30岁了，30岁后的人生需要哪些技能才能让自己走的更远呢？</p><p>曾经对于存钱没有概念，存钱对我来说就是攒钱，不让自己乱挥霍，那就是存银行定期，也不愿花时间去研究什么基金和股票等等投资知识，因为本钱就那么多，即使年化率很高，好像最终的收益也没多多少，不疼不痒。现在观念转变，即使收益少，苍蝇蚊子也是肉，就当是给自己设定的目标去了解更多领域，提升自己各领域知识。</p><hr><p>接下来的半年，目标还是想在技术领域有所突破，越来越在其他领域投入更多时间，增加知识储备，提升综合实力。</p><p>思考良久，其实，都是扯废话，也没得出努力方向，30岁一切皆有可能。能做的只是继续提升自己，全面提升自己。</p><p>加油吧！中年人！</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;关于职业生涯的想法&quot;&gt;&lt;a href=&quot;#关于职业生涯的想法&quot; class=&quot;headerlink&quot; title=&quot;关于职业生涯的想法&quot;&gt;&lt;/a&gt;关于职业生涯的想法&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;一边看着国庆阅兵直播一边写写最近的一些想法。&lt;br&gt;最近因
      
    
    </summary>
    
    
      <category term="心情" scheme="https://freefuncode.github.io/categories/%E5%BF%83%E6%83%85/"/>
    
    
      <category term="职业生涯" scheme="https://freefuncode.github.io/tags/%E8%81%8C%E4%B8%9A%E7%94%9F%E6%B6%AF/"/>
    
  </entry>
  
  <entry>
    <title>mac搭建hexo环境</title>
    <link href="https://freefuncode.github.io/2019/09/30/mac%E6%90%AD%E5%BB%BAhexo%E7%8E%AF%E5%A2%83/"/>
    <id>https://freefuncode.github.io/2019/09/30/mac搭建hexo环境/</id>
    <published>2019-09-30T07:47:50.000Z</published>
    <updated>2019-10-01T04:30:06.675Z</updated>
    
    <content type="html"><![CDATA[<h2 id="mac搭建hexo环境"><a href="#mac搭建hexo环境" class="headerlink" title="mac搭建hexo环境"></a>mac搭建hexo环境</h2><h3 id="1-安装homebrew"><a href="#1-安装homebrew" class="headerlink" title="1. 安装homebrew"></a>1. 安装homebrew</h3><h5 id="1-1-Mac-OS-X-10-11系统以后，否则跳至1-2先授权。"><a href="#1-1-Mac-OS-X-10-11系统以后，否则跳至1-2先授权。" class="headerlink" title="1.1 Mac OS X 10.11系统以后，否则跳至1.2先授权。"></a>1.1 Mac OS X 10.11系统以后，否则跳至1.2先授权。</h5><p>安装命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br></pre></td></tr></table></figure><h5 id="1-2-授权"><a href="#1-2-授权" class="headerlink" title="1.2 授权:"></a>1.2 授权:</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo chown -R $USER /usr/local</span><br></pre></td></tr></table></figure><h3 id="2-安装npm"><a href="#2-安装npm" class="headerlink" title="2.安装npm"></a>2.安装npm</h3><h5 id="2-1-命令安装："><a href="#2-1-命令安装：" class="headerlink" title="2.1 命令安装："></a>2.1 命令安装：</h5><p><code>$  brew install npm</code></p><h5 id="2-2-pkg文件下载安装，需要设置环境变量："><a href="#2-2-pkg文件下载安装，需要设置环境变量：" class="headerlink" title="2.2 pkg文件下载安装，需要设置环境变量："></a>2.2 pkg文件下载安装，需要设置环境变量：</h5><p>创建：<code>touch ~/.bash_profile</code><br>打开：<code>open -t ~/.bash_profile</code><br>打开的文档里末尾加上：<code>export PATH=/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin</code><br>执行：<code>source .bash_profile</code></p><h3 id="3-安装hexo"><a href="#3-安装hexo" class="headerlink" title="3. 安装hexo"></a>3. 安装hexo</h3><h5 id="3-1-设置淘宝镜像，安装hexo"><a href="#3-1-设置淘宝镜像，安装hexo" class="headerlink" title="3.1 设置淘宝镜像，安装hexo"></a>3.1 设置淘宝镜像，安装hexo</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><h5 id="3-2-如果权限报错（npm-ERR-Error-EACCES-permission-denied-access-39-usr-local-lib-node-modules-39-）"><a href="#3-2-如果权限报错（npm-ERR-Error-EACCES-permission-denied-access-39-usr-local-lib-node-modules-39-）" class="headerlink" title="3.2 如果权限报错（npm ERR! Error: EACCES: permission denied, access &#39;/usr/local/lib/node_modules&#39;）"></a>3.2 如果权限报错（<code>npm ERR! Error: EACCES: permission denied, access &#39;/usr/local/lib/node_modules&#39;</code>）</h5><p>修改安装目录的权限： <code>sudo chown -R $(whoami) $(npm config get prefix)/{lib/node_modules,bin,share}</code></p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p> 如果抛开安装过程中遇到的权限问题，整个安装过程命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">/usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br><span class="line">brew install git</span><br><span class="line">brew install node</span><br><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br><span class="line">cnpm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>Hexo init命令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init hexo_blog</span><br><span class="line">cd hexo_blog</span><br><span class="line">cnpm install</span><br></pre></td></tr></table></figure><p>目前用到的两个插件：</p><ul><li>cnpm install hexo-deployer-git –save</li><li>cnpm install –save hexo-tag-aplayer</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;mac搭建hexo环境&quot;&gt;&lt;a href=&quot;#mac搭建hexo环境&quot; class=&quot;headerlink&quot; title=&quot;mac搭建hexo环境&quot;&gt;&lt;/a&gt;mac搭建hexo环境&lt;/h2&gt;&lt;h3 id=&quot;1-安装homebrew&quot;&gt;&lt;a href=&quot;#1-安装h
      
    
    </summary>
    
    
      <category term="GitHub" scheme="https://freefuncode.github.io/categories/GitHub/"/>
    
    
      <category term="hexo" scheme="https://freefuncode.github.io/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin与java对比</title>
    <link href="https://freefuncode.github.io/2019/09/28/Kotlin%E4%B8%8Ejava%E5%AF%B9%E6%AF%94/"/>
    <id>https://freefuncode.github.io/2019/09/28/Kotlin与java对比/</id>
    <published>2019-09-28T09:48:07.000Z</published>
    <updated>2019-09-28T09:52:54.261Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5d8f2aa4e51d4577ea077ead" target="_blank" rel="noopener">点击查看原文</a></p><h2 id="Kotlin与java对比"><a href="#Kotlin与java对比" class="headerlink" title="Kotlin与java对比"></a>Kotlin与java对比</h2><blockquote><p>最近因为工作关系，需要迭代维护公司现有kotlin客服聊天的项目。之前一直使用java，对于kotlin还是比较陌生的。<br>使用kotlin一段时间后，感触还是有点。kotlin比java真是太简洁了，一段代码，刚开始可能按java语法习惯编写，然后根据ide的提示，一步一步优化，缩减代码量，最后发现，代码量的差距很大。最后剩下的代码可能就只剩下了业务逻辑了。<br>kotlin结合mvvm架构，项目非常简洁。<br>kotlin是基于jvm编程语言，同java一样可以编译成class字节码文件。同java之间可以相互调用。</p></blockquote><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><hr><h4 id="1-定义函数"><a href="#1-定义函数" class="headerlink" title="1.定义函数"></a>1.定义函数</h4><p>java：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public String retrunStr(String str)&#123;</span><br><span class="line">        return str;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kotlin：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fun returnStr(str: String): String &#123;</span><br><span class="line">        return str</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="2-定义变量"><a href="#2-定义变量" class="headerlink" title="2.定义变量"></a>2.定义变量</h4><p>java：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public String str1;</span><br><span class="line">public static final String str2 = &quot;HelloWorld&quot;;</span><br></pre></td></tr></table></figure><p>kotlin：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">var str1: String? = null</span><br><span class="line">val str2 = &quot;HelloWorld&quot;</span><br></pre></td></tr></table></figure><hr><h4 id="3-空置判断-：-和"><a href="#3-空置判断-：-和" class="headerlink" title="3. 空置判断 ：? 和 !!"></a>3. 空置判断 ：? 和 !!</h4><p>java：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">?</span><br><span class="line">public String retrunStr2(String str) &#123;</span><br><span class="line">        if (str != null) &#123;</span><br><span class="line">            return str1;</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            return &quot;&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">!!</span><br><span class="line">public void toLowerStr(String str) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            str.toLowerCase();</span><br><span class="line">        &#125; catch (NullPointerException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kotlin：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">?</span><br><span class="line">fun retrunStr2(str: String?): String &#123;</span><br><span class="line">        return str ?: &quot;&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">!!</span><br><span class="line">fun toLowerStr(str: String) &#123;</span><br><span class="line">        str!!.toLowerCase()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="4-for循环"><a href="#4-for循环" class="headerlink" title="4.for循环"></a>4.for循环</h4><p>java：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public void test() &#123;</span><br><span class="line">        List&lt;String&gt; arr = Arrays.asList(&quot;java&quot;, &quot;kotlin&quot;);</span><br><span class="line">        for (int i = 0; i &lt; arr.size(); i++) &#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (int i = 0; i &lt; arr.size(); i++) &#123;</span><br><span class="line">            System.out.println(arr.get(i));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (Iterator it = arr.iterator(); it.hasNext(); ) &#123;</span><br><span class="line">            System.out.println(it);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kotlin：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">fun test() &#123;</span><br><span class="line">        val arr = Arrays.asList(&quot;java&quot;, &quot;kotlin&quot;)</span><br><span class="line">        for (i in arr.indices) &#123;</span><br><span class="line">            println(i)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for (i in arr.indices) &#123;</span><br><span class="line">            println(arr[i])</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        val it = arr.iterator()</span><br><span class="line">        while (it.hasNext()) &#123;</span><br><span class="line">            println(it)</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        for(item in arr)&#123;</span><br><span class="line">            println(item)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="5-when-表达式"><a href="#5-when-表达式" class="headerlink" title="5.when 表达式"></a>5.when 表达式</h4><p>java：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public void test1() &#123;</span><br><span class="line">        int item = 3;</span><br><span class="line">        switch (item) &#123;</span><br><span class="line">            case 1:</span><br><span class="line">                System.out.println(1);</span><br><span class="line">                break;</span><br><span class="line">            case 2:</span><br><span class="line">                System.out.println(2);</span><br><span class="line">                break;</span><br><span class="line">            case 3:</span><br><span class="line">                System.out.println(3);</span><br><span class="line">                break;</span><br><span class="line">            default:</span><br><span class="line">                System.out.println(0);</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>kotlin：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">fun test1() &#123;</span><br><span class="line">        val item = 3</span><br><span class="line">        when (item) &#123;</span><br><span class="line">            1 -&gt; println(1)</span><br><span class="line">            2 -&gt; println(2)</span><br><span class="line">            3 -&gt; println(3)</span><br><span class="line">            else -&gt; println(0)</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="标准函数"><a href="#标准函数" class="headerlink" title="标准函数"></a>标准函数</h3><hr><h4 id="1-let"><a href="#1-let" class="headerlink" title="1.let"></a>1.let</h4><blockquote><p>let 扩展函数是一个作用域函数，当你需要去定义一个变量在一个特定的作用域范围内，可以使用let函数。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">object.let&#123;</span><br><span class="line">   it.todo()//在函数体内使用it替代object对象去访问其公有的属性和方法</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">java示例:</span><br><span class="line">------------</span><br><span class="line">public static final void main(@NotNull String[] args) &#123;</span><br><span class="line">        Intrinsics.checkParameterIsNotNull(args, &quot;args&quot;);</span><br><span class="line">        String var2 = &quot;testLet&quot;;</span><br><span class="line">        System.out.println(var2.length());//输出 7</span><br><span class="line">        int result = 1000;</span><br><span class="line">        System.out.println(result); //输出 1000</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">kotlin示例:</span><br><span class="line">------------</span><br><span class="line">fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">        val result = &quot;testLet&quot;.let &#123;</span><br><span class="line">            println(it.length) //输出 7</span><br><span class="line">            1000 //在函数块内可以通过 it 指代该对象。</span><br><span class="line">        &#125;</span><br><span class="line">        //返回值为函数块的最后一行或指定return表达式。1000</span><br><span class="line">        println(result) //输出1000</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="2-with"><a href="#2-with" class="headerlink" title="2.with"></a>2.with</h4><blockquote><p>with 将某对象作为函数的参数，在函数块内可以通过 this 指代该对象。返回值为函数块的最后一行或指定return表达式。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">with(object)&#123;</span><br><span class="line">  //todo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">java示例:</span><br><span class="line">------------</span><br><span class="line">public final void main(@NotNull String[] args) &#123;</span><br><span class="line">        Intrinsics.checkParameterIsNotNull(args, &quot;args&quot;);</span><br><span class="line">        User user = new User(&quot;Kotlin&quot;, 1, &quot;1111111&quot;);</span><br><span class="line">        System.out.println(&quot;my name is &quot; + user.getName() + &quot;, I am &quot; + user.getAge() + &quot; years old, my phone number is &quot; + user.getPhoneNum());</span><br><span class="line">        //输出 my name is Kotlin, I am 1 years old, my phone number is 1111111</span><br><span class="line">        int result = 1000;</span><br><span class="line">        System.out.println(&quot;result: &quot; + result); //输出 1000</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">private class User &#123;</span><br><span class="line">        String name;</span><br><span class="line">        Integer age;</span><br><span class="line">        String phoneNum;</span><br><span class="line"></span><br><span class="line">        public User(String name, int age, String phoneNum) &#123;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getName() &#123;</span><br><span class="line">            return name;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public Integer getAge() &#123;</span><br><span class="line">            return age;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        public String getPhoneNum() &#123;</span><br><span class="line">            return phoneNum;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">kotlin示例:</span><br><span class="line">------------</span><br><span class="line"> fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">        val user = User(&quot;Kotlin&quot;, 3, &quot;1111111&quot;)</span><br><span class="line">        val result = with(user) &#123;</span><br><span class="line">        //这里this 指 user,this可以省略</span><br><span class="line">            println(&quot;my name is $this.name, I am $age years old, my phone number is $phoneNum&quot;)</span><br><span class="line">            //输出 my name is Kotlin, I am 1 years old, my phone number is 1111111</span><br><span class="line">            1000</span><br><span class="line">        &#125;</span><br><span class="line">        //返回值为函数块的最后一行或指定return表达式。1000</span><br><span class="line">        println(&quot;result: $result&quot;)//输出 1000</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">class User(name: String, age: Int, phoneNum: String) &#123;</span><br><span class="line">        var name: String</span><br><span class="line">            get() &#123;</span><br><span class="line">                return name</span><br><span class="line">            &#125;</span><br><span class="line">            set(value) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        var age: Int</span><br><span class="line">            get() &#123;</span><br><span class="line">                return age</span><br><span class="line">            &#125;</span><br><span class="line">            set(value) &#123;&#125;</span><br><span class="line"></span><br><span class="line">        var phoneNum: String</span><br><span class="line">            get() &#123;</span><br><span class="line">                return phoneNum</span><br><span class="line">            &#125;</span><br><span class="line">            set(value) &#123;&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="3-run"><a href="#3-run" class="headerlink" title="3.run"></a>3.run</h4><blockquote><p>run 函数实际上可以说是let和with两个函数的结合体，run函数只接收一个lambda函数为参数，以闭包形式返回，返回值为最后一行的值或者指定的return的表达式。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">object.run&#123;</span><br><span class="line">//todo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">java示例:</span><br><span class="line">------------</span><br><span class="line">    public final void main(@NotNull String[] args) &#123;</span><br><span class="line">        Intrinsics.checkParameterIsNotNull(args, &quot;args&quot;);</span><br><span class="line">        User user = new User(&quot;Kotlin&quot;, 1, &quot;1111111&quot;);</span><br><span class="line">        System.out.println(&quot;my name is &quot; + user.getName() + &quot;, I am &quot; + user.getAge() + &quot; years old, my phone number is &quot; + user.getPhoneNum());</span><br><span class="line">        int result = 1000;</span><br><span class="line">        System.out.println(&quot;result: &quot; + result);//输出 1000</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">kotlin示例:</span><br><span class="line">------------</span><br><span class="line">    fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">        val user = User(&quot;Kotlin&quot;, 1, &quot;1111111&quot;)</span><br><span class="line">        val result = user.run &#123;</span><br><span class="line">        //这里this 指 user,this可以省略.</span><br><span class="line">            println(&quot;my name is $this.name, I am $age years old, my phone number is $phoneNum&quot;)</span><br><span class="line">            1000</span><br><span class="line">        &#125;</span><br><span class="line">        //返回值为最后一行的值或者指定的return的表达式 1000</span><br><span class="line">        println(&quot;result: $result&quot;)//输出 1000</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="4-apply"><a href="#4-apply" class="headerlink" title="4.apply"></a>4.apply</h4><blockquote><p>apply 函数和run函数很像，唯一不同点就是它们各自返回的值不一样，run函数是以闭包形式返回最后一行代码的值，而apply函数的返回的是传入对象的本身。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">object.apply&#123;</span><br><span class="line">//todo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">java示例:</span><br><span class="line">------------</span><br><span class="line">    public final void main(String[] args) &#123;</span><br><span class="line">        User user = new User(&quot;Kotlin&quot;, 1, &quot;1111111&quot;);</span><br><span class="line">        String var5 = &quot;my name is &quot; + user.getName() + &quot;, I am &quot; + user.getAge() + &quot; years old, my phone number is &quot; + user.getPhoneNum();</span><br><span class="line">        System.out.println(var5);</span><br><span class="line">        String var3 = &quot;result: &quot; + user;</span><br><span class="line">        System.out.println(var3); //打印 user对象</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">kotlin示例:</span><br><span class="line">------------</span><br><span class="line">    fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">        val user = User(&quot;Kotlin&quot;, 1, &quot;1111111&quot;)</span><br><span class="line">        val result = user.apply &#123;</span><br><span class="line">        //这里this 指 user,this可以省略.</span><br><span class="line">            println(&quot;my name is $this.name, I am $age years old, my phone number is $phoneNum&quot;)</span><br><span class="line">            1000</span><br><span class="line">        &#125;</span><br><span class="line">        //apply函数的返回的是传入对象的本身 user</span><br><span class="line">        println(&quot;result: $result&quot;) //打印 user对象</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h4 id="5-also"><a href="#5-also" class="headerlink" title="5.also"></a>5.also</h4><blockquote><p>also 函数的结构实际上和let很像唯一的区别就是返回值的不一样，let是以闭包的形式返回，返回函数体内最后一行的值，如果最后一行为空就返回一个Unit类型的默认值。而also函数返回的则是传入对象的本身。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">object.also&#123;</span><br><span class="line">//todo</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">java示例:</span><br><span class="line">------------</span><br><span class="line">    public void main(String[] args) &#123;</span><br><span class="line">        String var1 = &quot;test&quot;;</span><br><span class="line">        System.out.println(var1.length());//输出 4</span><br><span class="line">        System.out.println(var1);//输出 test</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">kotlin示例:</span><br><span class="line">------------</span><br><span class="line">    fun main(args: Array&lt;String&gt;) &#123;</span><br><span class="line">        val result = &quot;test&quot;.also &#123;</span><br><span class="line">        //it 指的是 &quot;test&quot;</span><br><span class="line">            println(it.length) //输出 4</span><br><span class="line">            1000</span><br><span class="line">        &#125;</span><br><span class="line">        //also函数返回的是传入对象的本身 &quot;test&quot;</span><br><span class="line">        println(result) //输出 test</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="函数小结：let-with-run-apply-also函数区别"><a href="#函数小结：let-with-run-apply-also函数区别" class="headerlink" title="函数小结：let,with,run,apply,also函数区别"></a>函数小结：let,with,run,apply,also函数区别</h3><table><thead><tr><th align="left">函数名</th><th align="left">使用方法</th><th align="left">it,this对象</th><th align="left">返回值</th><th align="center">是否是扩展函数</th><th align="left">适用的场景</th></tr></thead><tbody><tr><td align="left">let</td><td align="left">object.let{ it.xxx }</td><td align="left">it指代当前对象</td><td align="left">闭包形式返回</td><td align="center">是</td><td align="left">适用于处理不为null的操作场景</td></tr><tr><td align="left">with</td><td align="left">with(object){ xxx }</td><td align="left">this指代当前对象或者省略</td><td align="left">闭包形式返回</td><td align="center">否</td><td align="left">适用于调用同一个类的多个方法时，可以省去类名重复，直接调用类的方法即可，经常用于Android中RecyclerView中onBinderViewHolder中，数据model的属性映射到UI上</td></tr><tr><td align="left">run</td><td align="left">object.run{ xxx }</td><td align="left">this指代当前对象或者省略</td><td align="left">闭包形式返回</td><td align="center">是</td><td align="left">适用于let,with函数任何场景。</td></tr><tr><td align="left">apply</td><td align="left">object.apply{ xxx }</td><td align="left">this指代当前对象或者省略</td><td align="left">返回this</td><td align="center">是</td><td align="left">1、适用于run函数的任何场景，一般用于初始化一个对象实例的时候，操作对象属性，并最终返回这个对象。<br>2、动态inflate出一个XML的View的时候需要给View绑定数据也会用到.<br>3、一般可用于多个扩展函数链式调用 <br>4、数据model多层级包裹判空处理的问题</td></tr><tr><td align="left">also</td><td align="left">object.also{ xxx }</td><td align="left">it指代当前对象</td><td align="left">返回it</td><td align="center">是</td><td align="left">适用于let函数的任何场景，一般可用于多个扩展函数链式调用</td></tr></tbody></table><p>参考文章：<a href="https://blog.csdn.net/u013064109/article/details/78786646" target="_blank" rel="noopener">Kotlin系列之let、with、run、apply、also函数的使用</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5d8f2aa4e51d4577ea077ead&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;h2 id=&quot;Kotlin与java对比&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="kotlin" scheme="https://freefuncode.github.io/categories/Android/kotlin/"/>
    
    
      <category term="kotlin" scheme="https://freefuncode.github.io/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>《巴比龙》电影观后感</title>
    <link href="https://freefuncode.github.io/2019/09/28/%E5%B7%B4%E6%AF%94%E9%BE%99%E7%94%B5%E5%BD%B1%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    <id>https://freefuncode.github.io/2019/09/28/巴比龙电影观后感/</id>
    <published>2019-09-28T05:06:52.000Z</published>
    <updated>2019-09-28T05:10:29.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="《巴比龙》电影观后感"><a href="#《巴比龙》电影观后感" class="headerlink" title="《巴比龙》电影观后感"></a>《巴比龙》电影观后感</h1><hr><p><img src="/images/xinqing_babilong_01.jpg" alt="恶魔岛"></p><p>巴比龙 音译：Papillon，在法语里意为“蝴蝶”。</p><p>生于法国的不羁少年亨利·查理叶，身上满是纹身，因为把蝴蝶纹在了最醒目的胸前，人送绰号巴比龙。</p><p>亨利·查理叶（法 ：Henri Charri ╮e，1906年11月16日－1973年7月29日）是一名法国作家，著有小說《巴比龙》，內容关于他在法属圭亚那流放地被监禁和逃狱的回忆录。 </p><p>1973年12月16日电影巴比龙上映，但是同年亨利·查理叶去世，未能看到该电影上映。</p><p>2018年8月24日在美国上映翻拍版巴比龙，于2019年7月26日中国内地上映。</p><hr><p>说到巴比龙，很多人会拿肖申克的救赎作比较。比起精心设计的《肖申克的救赎》，《巴比龙》更简单也更纯粹。比肖申克来的更贴近人生。</p><p>看到一张电影海报简介语：想飞之心，永远不死。2019版电影讲述了，三次越狱，但是小说远不止三次。</p><p>巴比龙和路易斯在监狱中一次一次的经历结下深厚的友谊，在电影最后的恶魔岛，这最后一次越狱，路易斯选择了留下来，他说，他现在属于这里了，也许是他因为杀了越狱的另一个同伴吧，他在忏悔，也许是因为没了牵挂（老婆带着他的钱跟了他的律师），而在恶魔岛，他能自由的在壁顶画画，现在画画是他唯一的寄托，也许是这一次不想在拖累巴比龙。</p><hr><p>每一次主人公的越狱都牵动着我的心，残酷，压抑，甚至带有一丝绝望。每次越狱，脑袋就能回想起，监狱长的那段话。</p><p>“如果你要越狱的话，在丛林里你能遇到最好的事情就是饥饿，或者你可以选择大海，我向你保证鲨鱼是很饿的。如果你在首次尝试之后还活着，你将得到两年的单独囚禁，第二次则是五年，随后就是恶魔岛上的无期监禁。当然如果你在逃跑的时候杀了人，你将会被送到断头台上。”</p><hr><p>发现了一个对影片故事背景交代很清楚的文章，可以看看：<br> <a href="http://www.sohu.com/a/274710667_424265" target="_blank" rel="noopener">比肩《肖申克的救赎》！真实事件改编，史上最具争议的越狱！</a></p><hr><p><img src="/images/xinqing_babilong_02.jpg" alt="剧照"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;《巴比龙》电影观后感&quot;&gt;&lt;a href=&quot;#《巴比龙》电影观后感&quot; class=&quot;headerlink&quot; title=&quot;《巴比龙》电影观后感&quot;&gt;&lt;/a&gt;《巴比龙》电影观后感&lt;/h1&gt;&lt;hr&gt;
&lt;p&gt;&lt;img src=&quot;/images/xinqing_babilon
      
    
    </summary>
    
    
      <category term="心情" scheme="https://freefuncode.github.io/categories/%E5%BF%83%E6%83%85/"/>
    
    
      <category term="电影" scheme="https://freefuncode.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>汉尼拔电影观后感</title>
    <link href="https://freefuncode.github.io/2019/09/22/%E6%B1%89%E5%B0%BC%E6%8B%94%E7%94%B5%E5%BD%B1%E8%A7%82%E5%90%8E%E6%84%9F/"/>
    <id>https://freefuncode.github.io/2019/09/22/汉尼拔电影观后感/</id>
    <published>2019-09-22T05:00:36.000Z</published>
    <updated>2019-09-22T05:07:34.435Z</updated>
    
    <content type="html"><![CDATA[<h1 id="汉尼拔电影观后感"><a href="#汉尼拔电影观后感" class="headerlink" title="汉尼拔电影观后感"></a>汉尼拔电影观后感</h1><p><img src="/images/xinqing_hanniba.jpg" alt="汗尼拔"></p><p>这周末在家无事，观看了汗尼拔系列四部电影。<strong>少年汗尼拔</strong>，<strong>红龙</strong>，<strong>沉默的羔羊</strong>，<strong>汗尼拔</strong>。电影是恐怖片的题材。</p><hr><p>看完，我也认真的想了下，这个汗尼拔是坏人吗？显然不是。如果说的话，应该用<strong>恶人</strong>来形容比较好吧！好比古龙笔下的武侠小说《绝代双骄》里恶人谷的十大恶人，只是脾气习惯特别不正常，有不同的怪癖，并把这些怪癖研究成学问，在江湖上横行。如果说汗尼拔的怪癖那估计就是吃人，但是只吃对他不礼貌的人。汉尼拔智慧过人，才华横溢，第一步少年汗尼拔中，使用测谎仪，可以看出他极其沉着稳重。在医学领域也有很多过人之处，擅长解剖，熟知人体每一处要害。第一部描述了汗尼拔的少年经历。</p><p>他也是变态心理学专家，当然他自己也是一名精神病人。在红龙和沉默的羔羊中，帮助警察分析案情，熟知各种变态犯罪份子的心理活动。对人性有极其深刻的了解，具有非凡的洞察力。第二部红龙，第三部沉默的羔羊讲述了汗尼拔各种牛逼之处。</p><p>第四部汗尼拔，则讲述了他逃狱后与女主史达琳之间的故事，一个杀人如魔的变态，内心藏着一点的柔情，一下子汗尼拔这个人物饱满丰富起来了。</p><hr><p>看完后，虽然很多血腥，让人作呕的画面，但是还是让人热血沸腾。一个把杀人，吃人行为操作到极致，真是应了那句<strong>流氓不可怕,就怕流氓有文化</strong>。</p><p>如果从现代的角度出发，汗尼拔的专业是什么，<strong>医生</strong>。曾经我在填专业时候，对医生嗤之以鼻，可能生活在农村，目光短浅的我，当时对医生的印象大概就是村头的卫生院的一些赤脚医生吧。慢慢社会阅历丰富起来，还是对医生充满敬佩和向往的。如果让我在选一次我的专业的话，我一定会选医生。虽然程序员是我当时稀里糊涂选的，但是目前来看也没后悔过。</p><p>职业思考起来的话，<strong>医生</strong>和<strong>程序员</strong>这两个完全不同的职业。医生是一个随着工龄越大，越吃香，程序员在目前来看是青春饭。咋一看，从长远来看医生好像比较好，但是个中的幸苦估计只有自己知道。两个职业也有共同点，医生和程序员都是靠技术的积累，医生需要慢慢考证打怪升级，程序员需要不断对层出不穷的新技术研究学习。各行各业都不容易。唯有不断学习，你才能拔尖，才能脱颖而出。</p><hr><p>看完电影，当然不仅仅对医生这个职业有点思索，也对电影背景有点思考。故事是发生在二战的时候，人吃人的大时代背景。生命如草芥的时代。</p><p>主人翁汗尼拔，父母在战争交火过程中被流弹打死，妹妹被一些穷凶极恶的逃亡战犯吃了。没有亲人，对于他的世界观来说，对他出言不逊或者想伤害他的人，那就杀，吃。不用顾及社会或者他人对他的看法，活在自己的世界。没有法律，道德意识。<br>回归原始动物本性的活着。只是因为他敏锐的观察力，狩猎者的心理姿态，让他能够一直站在食物链的最顶端，审视着他周边所有的生物。慢慢剥离人性，人类是一个群居动物，我们不仅要重视自己，也要重视周边人的感受，一个脱离法律，脱离道德约束的人是对周边人存在很大危险性的个体。</p><p>无疑汗尼拔是孤独的。</p><hr><p>以后有时间，我也想好好看看电视剧版的<strong>汗尼拔</strong>。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;汉尼拔电影观后感&quot;&gt;&lt;a href=&quot;#汉尼拔电影观后感&quot; class=&quot;headerlink&quot; title=&quot;汉尼拔电影观后感&quot;&gt;&lt;/a&gt;汉尼拔电影观后感&lt;/h1&gt;&lt;p&gt;&lt;img src=&quot;/images/xinqing_hanniba.jpg&quot; alt=&quot;汗尼
      
    
    </summary>
    
    
      <category term="心情" scheme="https://freefuncode.github.io/categories/%E5%BF%83%E6%83%85/"/>
    
    
      <category term="电影" scheme="https://freefuncode.github.io/tags/%E7%94%B5%E5%BD%B1/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 八 ) 注解框架---ButterKnife</title>
    <link href="https://freefuncode.github.io/2019/09/04/Android%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%85%AB%E6%B3%A8%E8%A7%A3%E6%A1%86%E6%9E%B6-ButterKnife/"/>
    <id>https://freefuncode.github.io/2019/09/04/Android开源框架八注解框架-ButterKnife/</id>
    <published>2019-09-04T12:03:06.000Z</published>
    <updated>2019-09-06T13:20:05.764Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/ButterKnife.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <h2>一.引言</h2><div>&nbsp; &nbsp;ButterKnife是一个专注于Android系统的View注入框架</div><div>　了解注解框架,可以看这:<a id="post_title_link_9392534" href="https://www.cnblogs.com/bugzone/p/afinal.html" target="_blank" rel="noopener">Android 开源框架 ( 四 ) Afinal --- Android 里的 ORM IOC聚合型框架</a><br>&nbsp;<h2>&nbsp;二.使用</h2><h3>&nbsp;1. AndroidStudio 添加ButterKnife插件使用。</h3><p>&nbsp;　　<strong>Settings —&gt; Plugins —-&gt;搜索ButterKnife</strong><br>&nbsp;看图：<br>&nbsp;<img src="https://images2018.cnblogs.com/blog/612293/201808/612293-20180801074431484-1364962086.png" alt><br>&nbsp;<br>&nbsp;在build.gradle中引用ButterKnife库:</p></div><p></p><div><div class="cnblogs_code"><pre>compile <span style="color: #800000;">'</span><span style="color: #800000;">com.jakewharton:butterknife-compiler:8.5.1</span><span style="color: #800000;">'</span></pre></div><h3>&nbsp;2.利用ButterKnife一键实现批量findViewById()</h3>&nbsp;在对应的Activity页右键 ---&gt; Generate(Alt+Insert) ---&gt; ButterKnife 使用插件</div><div><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #000000;">@BindView(R.id.tv_first)    TextView tvFirst;    @BindView(R.id.tv_info)    TextView tvInfo; <p> @Override<br>    </p></span><span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {<br>        super.onCreate(savedInstanceState);<br>        setContentView(R.layout.activity_main);<br>        ButterKnife.bind(</span><span style="color: #0000ff;">this</span><span style="color: #000000;">);<br>    }</span></pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>&nbsp;</p><br>&nbsp;<br>&nbsp;</div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/ButterKnife.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_body&quot; cl
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android面试题</title>
    <link href="https://freefuncode.github.io/2019/08/25/Android%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    <id>https://freefuncode.github.io/2019/08/25/Android面试题/</id>
    <published>2019-08-25T14:31:56.000Z</published>
    <updated>2019-09-06T13:20:05.873Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.im/post/5d6289bcf265da03e83b783c" target="_blank" rel="noopener">点击查看原文</a></p><p>&nbsp; &nbsp; &nbsp; &nbsp; 个人列出的一些目前常见的面试题，答案都是比较简单的说了几个关键字，具体的还是自己针对每题去查，去了解，去求证。如果有问题，还请及时指出！</p><h2 id="1-五大布局"><a href="#1-五大布局" class="headerlink" title="1.五大布局"></a>1.五大布局</h2><p>LinearLayout，ReativeLayout，AbsoluteLayout, FrameLayout, TableLayout</p><h2 id="2-Activity生命周期"><a href="#2-Activity生命周期" class="headerlink" title="2.Activity生命周期"></a>2.Activity生命周期</h2><p>onCreate-&gt;onRestart-&gt;onStart-&gt;onResume-&gt;onPause-&gt;onStop-&gt;onDestory</p><h2 id="3-Fragment生命周期"><a href="#3-Fragment生命周期" class="headerlink" title="3.Fragment生命周期"></a>3.Fragment生命周期</h2><p>onAttch-&gt;onCreate-&gt;onCreateView-&gt;onActivityCreate-&gt;onStart-&gt;onResume-&gt;onPause-onStop-&gt;onDestoryView-&gt;onDestory-&gt;onDetach</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.cnblogs.com%2Ffajieyefu%2Fp%2F6092465.html" target="_blank" rel="noopener">www.cnblogs.com/fajieyefu/p…</a></p><h2 id="4-view事件传递"><a href="#4-view事件传递" class="headerlink" title="4.view事件传递"></a>4.view事件传递</h2><p>dispatchTouchEvent, onIntecepterEvent, onTouchEvent</p><h2 id="5-Handler通信原理"><a href="#5-Handler通信原理" class="headerlink" title="5.Handler通信原理"></a>5.Handler通信原理</h2><p>Handler, Looper, MessageQueue, Message</p><h2 id="6-APK打包流程"><a href="#6-APK打包流程" class="headerlink" title="6.APK打包流程"></a>6.APK打包流程</h2><p>aapt-&gt;aidl-&gt;javac-&gt;dx-&gt;apkBuilder-&gt;javaSigner-&gt;zipAlign</p><h2 id="7-四大组件"><a href="#7-四大组件" class="headerlink" title="7.四大组件"></a>7.四大组件</h2><p>Activity, Service，BroadcastReceiver, ContentProvider</p><h2 id="8-Service启动方式及生命周期"><a href="#8-Service启动方式及生命周期" class="headerlink" title="8.Service启动方式及生命周期"></a>8.Service启动方式及生命周期</h2><p>startService,BindService</p><p>startService: onCreate-&gt;onStartCommand-&gt;onStop-&gt;onDestory</p><p>bindService: onCreate-&gt;onBind-&gt;onUnbind-&gt;onDestory</p><h2 id="9-进程的优先级"><a href="#9-进程的优先级" class="headerlink" title="9.进程的优先级"></a>9.进程的优先级</h2><p>前台进程，可见进程，服务进程，后台进程，空进程</p><h2 id="10-GC回收对象的优先级"><a href="#10-GC回收对象的优先级" class="headerlink" title="10.GC回收对象的优先级"></a>10.GC回收对象的优先级</h2><p>强引用，软引用，弱引用，虚引用，空引用</p><h2 id="11-GC回收对象的生命周期"><a href="#11-GC回收对象的生命周期" class="headerlink" title="11.GC回收对象的生命周期"></a>11.GC回收对象的生命周期</h2><p>新生期，老年期，永生期</p><h2 id="12-Activity四种LuncherMode"><a href="#12-Activity四种LuncherMode" class="headerlink" title="12.Activity四种LuncherMode"></a>12.Activity四种LuncherMode</h2><p>standard，singleTop，singleTask，singleInstance</p><h2 id="13-hashMap-hashTable-LinkedHashMap-treeMap区别"><a href="#13-hashMap-hashTable-LinkedHashMap-treeMap区别" class="headerlink" title="13.hashMap,hashTable,LinkedHashMap,treeMap区别"></a>13.hashMap,hashTable,LinkedHashMap,treeMap区别</h2><p>hashMap: 非线程安全，写入快，允许key-value为null</p><p>hashTable: 线程安全，写入慢，不允许key-value为null,</p><p>LinkedHashMap: 遍历速度与数据有关和容量无关，hashMap遍历与容量有关，输出的顺序和输入的相同（队列：先进后出），LRUcache内部实现原理。</p><p>treeMap:&nbsp;按自然顺序或自定义顺序遍历键优先使用</p><h2 id="14-LRUcache"><a href="#14-LRUcache" class="headerlink" title="14.LRUcache"></a>14.LRUcache</h2><p>LinkedHashMap</p><h2 id="15-APP冷启动过程"><a href="#15-APP冷启动过程" class="headerlink" title="15.APP冷启动过程"></a>15.APP冷启动过程</h2><p>zygote-&gt;Launcher-&gt;ActivityManagerService-&gt;Application-&gt;mainActivity(Activity创建)-&gt;onCreate-&gt;onStart-&gt;onResume-&gt;(view绘制)onMeassure-&gt;onLayout-&gt;onDraw</p><h2 id="16-进程间通信"><a href="#16-进程间通信" class="headerlink" title="16.进程间通信"></a>16.进程间通信</h2><p>Activity，Service, BroadCastReceiver, ContentProvider, Binder</p><h2 id="17-线程间通信"><a href="#17-线程间通信" class="headerlink" title="17.线程间通信"></a>17.线程间通信</h2><p>AnsyTask , Handler</p><h2 id="18-三种动画"><a href="#18-三种动画" class="headerlink" title="18.三种动画"></a>18.三种动画</h2><p>帧动画，补间动画，属性动画</p><h2 id="19-Android6-0到9-0版本最大的新特性"><a href="#19-Android6-0到9-0版本最大的新特性" class="headerlink" title="19.Android6.0到9.0版本最大的新特性"></a>19.Android6.0到9.0版本最大的新特性</h2><p>6.0：运行时权限</p><p>7.0：fileProvider文件读取</p><p>8.0：多渠道notification通知</p><p>9.0：安装外部来源应用授权</p><h2 id="20View绘制过程"><a href="#20View绘制过程" class="headerlink" title="20View绘制过程"></a>20View绘制过程</h2><p>onMeassure-&gt;onLayout-&gt;onDraw</p><h2 id="21-设计模式五大原则"><a href="#21-设计模式五大原则" class="headerlink" title="21.设计模式五大原则"></a>21.设计模式五大原则</h2><p>单一职责：干一件事</p><p>开放关闭：对扩展开放，对修改关闭</p><p>里氏替换：父类调用，同样适用于子类</p><p>依赖倒置：实现依赖抽象，不要抽象依赖实现具体。</p><p>接口隔离：使用多个接口，不要一个接口干所有事</p><h2 id="22-屏幕适配方案"><a href="#22-屏幕适配方案" class="headerlink" title="22.屏幕适配方案"></a>22.屏幕适配方案</h2><p>px=dp<em>(dpi/160)=dp</em>density</p><p>尺寸（size）限定符 –缺点很多，不建议使用</p><p>最小宽度（Smallest-width）限定符</p><p>今日头条适配方案,setCustomDensity.非浸入。</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.cnblogs.com%2Fonelikeone%2Fp%2F9583446.html" target="_blank" rel="noopener">www.cnblogs.com/onelikeone/…</a></p><h2 id="23-性能优化的几个方面"><a href="#23-性能优化的几个方面" class="headerlink" title="23.性能优化的几个方面"></a>23.性能优化的几个方面</h2><p>布局减少嵌套</p><p>代码优化，防止内存泄漏</p><p>耗电量方面</p><p>apk包瘦身</p><h2 id="24-序列化Serializable-Parcelable区别"><a href="#24-序列化Serializable-Parcelable区别" class="headerlink" title="24.序列化Serializable,Parcelable区别"></a>24.序列化Serializable,Parcelable区别</h2><p>serializable: java，大量产生临时变量，内存使用较大，频繁gc</p><p>parcelable: android ，内存较小</p><h2 id="25-列举几点内存泄漏案例案例以及解决办法"><a href="#25-列举几点内存泄漏案例案例以及解决办法" class="headerlink" title="25.列举几点内存泄漏案例案例以及解决办法"></a>25.列举几点内存泄漏案例案例以及解决办法</h2><h2 id="原因：长生命周期对象持有短生命周期的引用"><a href="#原因：长生命周期对象持有短生命周期的引用" class="headerlink" title="原因：长生命周期对象持有短生命周期的引用"></a>原因：长生命周期对象持有短生命周期的引用</h2><p>Context : Activity-&gt;Application</p><p>Handler: static</p><p>webView </p><p>imageView</p><p>未及时关闭资源对象</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fblog.csdn.net%2Funicorn97%2Farticle%2Fdetails%2F81009204" target="_blank" rel="noopener">blog.csdn.net/unicorn97/a…</a></p><h2 id="26-JVM-DVM-ART-JIT-AOT介绍"><a href="#26-JVM-DVM-ART-JIT-AOT介绍" class="headerlink" title="26.JVM,DVM,ART,JIT,AOT介绍"></a>26.JVM,DVM,ART,JIT,AOT介绍</h2><p>jvm：java虚拟机</p><p>dvm:&nbsp; Android虚拟机</p><p>ART: Android运行时</p><p>JIT：及时编译</p><p>AOT：预编译</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fblog.csdn.net%2Ffeather_wch%2Farticle%2Fdetails%2F79800614" target="_blank" rel="noopener">blog.csdn.net/feather_wch…</a></p><h2 id="27-sleep-wait区别"><a href="#27-sleep-wait区别" class="headerlink" title="27.sleep,wait区别"></a>27.sleep,wait区别</h2><p>sleep: 持有锁，Thread子类</p><p>wait：释放锁，Object子类</p><h2 id="28-五层网络协议"><a href="#28-五层网络协议" class="headerlink" title="28.五层网络协议"></a>28.五层网络协议</h2><p>应用层（http/https）</p><p>传输层 (TCP/UDP)</p><p>网络层（IP）</p><p>数据链路层</p><p>物理层</p><h2 id="29-保活的方式"><a href="#29-保活的方式" class="headerlink" title="29.保活的方式"></a>29.保活的方式</h2><p>黑色保活：app，sdk相互唤起</p><p>白色保活：启动前台service</p><p>灰色保活：启动两个相同id的Service,将后启动的Service,Stop掉</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.jianshu.com%2Fp%2F63aafe3c12af" target="_blank" rel="noopener">www.jianshu.com/p/63aafe3c1…</a></p><h2 id="30-webView的webViewClient和WebChromeClient区别"><a href="#30-webView的webViewClient和WebChromeClient区别" class="headerlink" title="30.webView的webViewClient和WebChromeClient区别"></a>30.webView的webViewClient和WebChromeClient区别</h2><p>WebViewClient：帮助WebView处理各种通知、请求事件。</p><p>WebChromeClient：辅助WebView处理Javascript的对话框、网站图标、网站title、加载进度等</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fblog.csdn.net%2Fu012810020%2Farticle%2Fdetails%2F51820240" target="_blank" rel="noopener">blog.csdn.net/u012810020/…</a></p><h2 id="31-APK安装过程"><a href="#31-APK安装过程" class="headerlink" title="31.APK安装过程"></a>31.APK安装过程</h2><p>/data/app -&gt;androidManifest-&gt;dex-&gt;DVM cache-&gt;PackageManageService-&gt;BroadcastReceiver</p><h2 id="32-APK包瘦身"><a href="#32-APK包瘦身" class="headerlink" title="32.APK包瘦身"></a>32.APK包瘦身</h2><p>so库，混淆，加固，shrinkResource，减少枚举，图片(webp，.9）</p><h2 id="33-JVM内部结构"><a href="#33-JVM内部结构" class="headerlink" title="33.JVM内部结构"></a>33.JVM内部结构</h2><p>静态方法区，栈，堆</p><h2 id="34-IntentService-HandlerThread介绍"><a href="#34-IntentService-HandlerThread介绍" class="headerlink" title="34.IntentService,HandlerThread介绍"></a>34.IntentService,HandlerThread介绍</h2><p>IntentService是一个基于Service的一个类，用来处理异步的请求，内部是通过HandlerThread实现。</p><p><a href="https://link.juejin.im?target=https%3A%2F%2Fwww.cnblogs.com%2Fchenxibobo%2Fp%2F6047404.html" target="_blank" rel="noopener">www.cnblogs.com/chenxibobo/…</a></p><h2 id="35-Android五种存储方式"><a href="#35-Android五种存储方式" class="headerlink" title="35.Android五种存储方式"></a>35.Android五种存储方式</h2><p>sharePrefences,&nbsp; sqlLite, contentProvider, 文件，网络</p><h2 id="36-实现线程的两种方式"><a href="#36-实现线程的两种方式" class="headerlink" title="36.实现线程的两种方式"></a>36.实现线程的两种方式</h2><p>implements Runnable</p><p>extends Thread</p><h2 id="37-String-StringBuffer-StringBuilder区别"><a href="#37-String-StringBuffer-StringBuilder区别" class="headerlink" title="37.String,StringBuffer,StringBuilder区别"></a>37.String,StringBuffer,StringBuilder区别</h2><p>速度：StringBuilder-&gt;StringBuffer-&gt;String（不可变）</p><p>StringBuilder 非线程安全</p><h2 id="38-Synchronize-Volatile区别"><a href="#38-Synchronize-Volatile区别" class="headerlink" title="38.Synchronize,Volatile区别"></a>38.Synchronize,Volatile区别</h2><p>sychronize : 加锁</p><p>volatile: 可变，每次实时读取。</p><h2 id="39-ArrayList，LinkedList区别"><a href="#39-ArrayList，LinkedList区别" class="headerlink" title="39.ArrayList，LinkedList区别"></a>39.ArrayList，LinkedList区别</h2><p>arrayList：读取快</p><p>linkedList：插入快</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://juejin.im/post/5d6289bcf265da03e83b783c&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&amp;nbsp; &amp;nbsp; &amp;nbsp; &amp;nbsp; 个人
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="知识点" scheme="https://freefuncode.github.io/categories/Android/%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
    
      <category term="面试" scheme="https://freefuncode.github.io/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 十六 ) 视频播放器 --- JiaoZiVideoPlayer(JieCaoVideoPlayer)</title>
    <link href="https://freefuncode.github.io/2018/08/12/Android%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%8D%81%E5%85%AD%E8%A7%86%E9%A2%91%E6%92%AD%E6%94%BE%E5%99%A8-JiaoZiVideoPlayer-JieCaoVideoPlayer/"/>
    <id>https://freefuncode.github.io/2018/08/12/Android开源框架十六视频播放器-JiaoZiVideoPlayer-JieCaoVideoPlayer/</id>
    <published>2018-08-12T08:07:37.000Z</published>
    <updated>2019-09-06T13:20:05.780Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/JiaoZiVideoPlayer.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <p>　　原JieCaoVideoPlayer 不知道什么时候改名了，现在叫JiaoZiVideoPlayer.</p><p>　　项目GitHub地址：<a href="https://github.com/lipangit/JiaoZiVideoPlayer" target="_blank">https://github.com/lipangit/JiaoZiVideoPlayer</a></p><p>　　<strong>JiaoZiVideoPlayer主要功能</strong>：</p><div class="cnblogs_Highlighter"><pre class="brush:csharp;gutter:true;">    1.视频全屏播放和浮层小窗播放    2.可以完全自定义UI    3.能在ListView、ViewPager和ListView、ViewPager和Fragment等多重嵌套模式下全屏工作    4.手势修改进度和音量    5.视频大小的屏幕适配，宽或长至少有两个对边是充满屏幕的，另外两个方向居中    6.可以在加载、暂停、播放等各种状态中正常进入全屏和退出全屏    7.基于exoplayer, 支持hls,rtsp    8.设置http头信息    9.重力感应自动全屏    10.WebView嵌套本地视频</pre></div><p>　　</p><h2>　基本使用</h2><h3>　　1.添加依赖</h3><div class="cnblogs_code"><pre>compile <span style="color: #800000;">'</span><span style="color: #800000;">cn.jzvd:jiaozivideoplayer:6.2.12</span><span style="color: #800000;">'</span></pre></div><h3>　　2.xml布局文件</h3><div class="cnblogs_code"><pre>&lt;<span style="color: #000000;">cn.jzvd.JZVideoPlayerStandard        android:id</span>=<span style="color: #800000;">"</span><span style="color: #800000;">@+id/videoplayer</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_width</span>=<span style="color: #800000;">"</span><span style="color: #800000;">match_parent</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_height</span>=<span style="color: #800000;">"</span><span style="color: #800000;">200dp</span><span style="color: #800000;">"</span>/&gt;</pre></div><h3>　　3.设置视频url和标题</h3><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>JZVideoPlayerStandard jzVideoPlayerStandard =<span style="color: #000000;"> (JZVideoPlayerStandard) findViewById(R.id.videoplayer);jzVideoPlayerStandard.setUp(</span><span style="color: #800000;">"</span><span style="color: #800000;">http://jzvd.nathen.cn/c6e3dc12a1154626b3476d9bf3bd7266/6b56c5f0dc31428083757a45764763b0-5287d2089db37e62345123a1be272f8b.mp4</span><span style="color: #800000;">"</span><span style="color: #000000;">,                             JZVideoPlayerStandard.SCREEN_WINDOW_NORMAL,                             </span><span style="color: #800000;">"</span><span style="color: #800000;">饺子闭眼睛</span><span style="color: #800000;">"</span><span style="color: #000000;">);jzVideoPlayerStandard.thumbImageView.setImage(</span><span style="color: #800000;">"</span><span style="color: #800000;">http://p.qpic.cn/videoyun/0/2449_43b6f696980311e59ed467f22794e792_1/640</span><span style="color: #800000;">"</span>);</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h3>　　4.AndroidManifest.xml：</h3><div class="cnblogs_code"><pre>&lt;<span style="color: #000000;">activity    android:name</span>=<span style="color: #800000;">"</span><span style="color: #800000;">.MainActivity</span><span style="color: #800000;">"</span><span style="color: #000000;">    android:configChanges</span>=<span style="color: #800000;">"</span><span style="color: #800000;">orientation|screenSize|keyboardHidden</span><span style="color: #800000;">"</span><span style="color: #000000;">    android:screenOrientation</span>=<span style="color: #800000;">"</span><span style="color: #800000;">portrait</span><span style="color: #800000;">"</span> /&gt;    </pre></div><p>&nbsp;　　当我们横竖屏切换的时候会直接调用onCreate方法中的onConfigurationChanged方法，而不会重新执行onCreate方法，那当然如果不配置这个属性的话就会重新调用onCreate方法了。</p><h2>&nbsp;</h2></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/JiaoZiVideoPlayer.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_bo
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 十五 ) 下拉刷新框架 --- SwipeRefreshLayout</title>
    <link href="https://freefuncode.github.io/2018/08/07/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%8D%81%E4%BA%94%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E6%A1%86%E6%9E%B6-SwipeRefreshLayout/"/>
    <id>https://freefuncode.github.io/2018/08/07/开源框架十五下拉刷新框架-SwipeRefreshLayout/</id>
    <published>2018-08-07T12:28:54.000Z</published>
    <updated>2019-09-06T13:20:06.045Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/SwipeRefreshLayout.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <p>　　SwipeRefreshLayout是Google官方更新的一个Widget,可以实现下拉刷新的效果。完整包名:android.support.v4.widget.SwipeRefreshLayout .</p><h3>一. 布局</h3><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>&lt;<span style="color: #000000;">android.support.v4.widget.SwipeRefreshLayout        android:id</span>=<span style="color: #800000;">"</span><span style="color: #800000;">@+id/srl</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_width</span>=<span style="color: #800000;">"</span><span style="color: #800000;">match_parent</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_height</span>=<span style="color: #800000;">"</span><span style="color: #800000;">wrap_content</span><span style="color: #800000;">"</span>&gt;<pre><code>.............</code></pre><p>&lt;/android.support.v4.widget.SwipeRefreshLayout&gt;</p></pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h3>二. Activity继承SwipeRefreshLayout刷新监听</h3><div class="cnblogs_code"><pre>implements SwipeRefreshLayout.OnRefreshListener</pre></div><h3>三.添加监听</h3><div class="cnblogs_code"><pre>srl.setOnRefreshListener(<span style="color: #0000ff;">this</span>);</pre></div><h3>&nbsp;四.改变刷新图标颜色</h3><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #000000;">CommonUtils.setColorSchemeResources(srl);<pre><code>&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; CommonUtils {    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*     * 统一维护，方便修改     *     * @param sr_layout 下拉控件     &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;    &lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; setColorSchemeResources(SwipeRefreshLayout sr_layout) {        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (sr_layout != &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) {            sr_layout.setColorSchemeResources(R.color.refresh1, R.color.refresh2, R.color                    .refresh3, R                    .color.refresh4);        }    }}&lt;/span&gt;&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><h3>五. 重写SwipeRefreshLayout刷新监听事件</h3><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">　　//</span><span style="color: #008000;">刷新</span><span style="color: #000000;">    @Override    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onRefresh() {        isPullToRefreshRequest </span>= <span style="color: #0000ff;">true</span><span style="color: #000000;">;        </span><span style="color: #008000;">//</span><span style="color: #008000;">刷新数据</span><span style="color: #000000;">    }<pre><code>&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;加载动画结束&lt;/span&gt;</code></pre><p><span style="color: #000000;">    @Override<br>    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onAllRequestsFinished() {<br>        super.onAllRequestsFinished();<br>        srl.setRefreshing(</span><span style="color: #0000ff;">false</span><span style="color: #000000;">);<br>    }</span></p></span></pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h3>六. 效果</h3><p><img src="https://images2018.cnblogs.com/blog/612293/201808/612293-20180806202511108-3463627.jpg" alt></p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/SwipeRefreshLayout.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_b
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 十四 ) 列表下拉刷新框架 --- SmartRefreshLayout</title>
    <link href="https://freefuncode.github.io/2018/08/07/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%8D%81%E5%9B%9B%E5%88%97%E8%A1%A8%E4%B8%8B%E6%8B%89%E5%88%B7%E6%96%B0%E6%A1%86%E6%9E%B6-SmartRefreshLayout/"/>
    <id>https://freefuncode.github.io/2018/08/07/开源框架十四列表下拉刷新框架-SmartRefreshLayout/</id>
    <published>2018-08-07T12:23:00.000Z</published>
    <updated>2019-09-06T13:20:06.045Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/SmartRefresh.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <p>　　结合上一篇RecyclerView,介绍一个针对列表的下拉和上拉刷新,加载的框架:SmartRefreshLayout.</p><p>　　　　<a id="post_title_link_9427210" href="https://www.cnblogs.com/bugzone/p/recyclerview.html" target="_blank">Android 开源框架 ( 十三 ) RecyclerView</a></p><p>　　可实现自定义Header/Footer</p><h3>　　一.添加依赖</h3><div class="cnblogs_code"><pre>    compile <span style="color: #800000;">'</span><span style="color: #800000;">com.scwang.smartrefresh:SmartRefreshLayout:1.0.4-7</span><span style="color: #800000;">'</span><span style="color: #000000;">    compile </span><span style="color: #800000;">'</span><span style="color: #800000;">com.scwang.smartrefresh:SmartRefreshHeader:1.0.4-7</span><span style="color: #800000;">'</span></pre></div><h3>　　二. 布局文件</h3><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>&lt;<span style="color: #000000;">com.scwang.smartrefresh.layout.SmartRefreshLayout        android:id</span>=<span style="color: #800000;">"</span><span style="color: #800000;">@+id/refreshLayout</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_width</span>=<span style="color: #800000;">"</span><span style="color: #800000;">match_parent</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_height</span>=<span style="color: #800000;">"</span><span style="color: #800000;">match_parent</span><span style="color: #800000;">"</span><span style="color: #000000;">        app:srlEnablePreviewInEditMode</span>=<span style="color: #800000;">"</span><span style="color: #800000;">true</span><span style="color: #800000;">"</span>&gt;        &lt;!--srlAccentColor srlPrimaryColor 将会改变 Header 和 Footer 的主题颜色--&gt;        &lt;!--srlEnablePreviewInEditMode 可以开启和关闭预览功能--&gt;        &lt;<span style="color: #000000;">com.scwang.smartrefresh.layout.header.ClassicsHeader            android:layout_width</span>=<span style="color: #800000;">"</span><span style="color: #800000;">match_parent</span><span style="color: #800000;">"</span><span style="color: #000000;">            android:layout_height</span>=<span style="color: #800000;">"</span><span style="color: #800000;">wrap_content</span><span style="color: #800000;">"</span><span style="color: #000000;">            app:srlAccentColor</span>=<span style="color: #800000;">"</span><span style="color: #800000;">#000</span><span style="color: #800000;">"</span><span style="color: #000000;">            app:srlPrimaryColor</span>=<span style="color: #800000;">"</span><span style="color: #800000;">@android:color/white</span><span style="color: #800000;">"</span> /&gt;<pre><code>    &amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt;android.support.v7.widget.RecyclerView        android:id&lt;/span&gt;=&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;@+id/recycler_view&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;        android:layout_width&lt;/span&gt;=&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;match_parent&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;        android:layout_height&lt;/span&gt;=&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;match_parent&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; /&amp;gt;    &amp;lt;&lt;span style=&quot;color: #000000;&quot;&gt;com.scwang.smartrefresh.layout.footer.ClassicsFooter        android:layout_width&lt;/span&gt;=&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;match_parent&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;        android:layout_height&lt;/span&gt;=&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;wrap_content&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;        app:srlAccentColor&lt;/span&gt;=&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;#000&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;        app:srlPrimaryColor&lt;/span&gt;=&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;@android:color/white&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; /&amp;gt;&amp;lt;/com.scwang.smartrefresh.layout.SmartRefreshLayout&amp;gt;&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></pre></div><pre><span>app:srlEnablePreviewInEditMode="true" 开启了预览功能<br>　　<img src="https://images2018.cnblogs.com/blog/612293/201808/612293-20180806195400466-647305574.jpg" alt><br><br></span></pre><h3>　　三. 使用-上拉,下拉</h3><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>refreshLayout.setOnRefreshListener(<span style="color: #0000ff;">new</span><span style="color: #000000;"> OnRefreshListener() {        @Override        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onRefresh(RefreshLayout refreshlayout) {            pageNumber </span>= <span style="color: #800080;">1</span><span style="color: #000000;">;            </span><span style="color: #008000;">//</span><span style="color: #008000;">刷新数据</span><span style="color: #000000;">        }    });<pre><code>refreshLayout.setOnLoadmoreListener(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; OnLoadmoreListener() {    @Override    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; onLoadmore(RefreshLayout refreshlayout) {        &lt;/span&gt;++&lt;span style=&quot;color: #000000;&quot;&gt; pageNumber;        &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;加载数据&lt;/span&gt;</code></pre><p><span style="color: #000000;">        }<br>    });<br>    </span></p></span></pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h3>　　四.关闭动画</h3><div class="cnblogs_code"><pre><span style="color: #008000;">　　//</span><span style="color: #008000;">关闭刷新</span>    <span style="color: #0000ff;">if</span> (refreshLayout != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {        refreshLayout.finishRefresh(</span><span style="color: #800080;">200</span><span style="color: #000000;">);        refreshLayout.finishLoadmore(</span><span style="color: #800080;">200</span><span style="color: #000000;">);    }</span></pre></div><h3>　　五.拓展- 参数属性介绍</h3><h4>　　　　　　　　　　　　　　　　　　　　　　　　属性 Attributes</h4><table style="height: 395px; width: 968px;"><thead><tr><th><span style="font-size: 15px;">名称-name</span></th><th><span style="font-size: 15px;">格式-format</span></th><th><span style="font-size: 15px;">描述-description</span></th></tr></thead><tbody><tr><td><span style="font-size: 15px;">srlPrimaryColor</span></td><td><span style="font-size: 15px;">color</span></td><td><span style="font-size: 15px;">主题颜色</span></td></tr><tr><td><span style="font-size: 15px;">srlAccentColor</span></td><td><span style="font-size: 15px;">color</span></td><td><span style="font-size: 15px;">强调颜色</span></td></tr><tr><td><span style="font-size: 15px;">srlReboundDuration</span></td><td><span style="font-size: 15px;">integer</span></td><td><span style="font-size: 15px;">释放后回弹动画时长</span></td></tr><tr><td><span style="font-size: 15px;">srlHeaderHeight</span></td><td><span style="font-size: 15px;">dimension</span></td><td><span style="font-size: 15px;">Header的标准高度</span></td></tr><tr><td><span style="font-size: 15px;">srlFooterHeight</span></td><td><span style="font-size: 15px;">dimension</span></td><td><span style="font-size: 15px;">Footer的标准高度</span></td></tr><tr><td><span style="font-size: 15px;">srlDragRate</span></td><td><span style="font-size: 15px;">float</span></td><td><span style="font-size: 15px;">显示拖动高度/真实拖动高度（默认0.5，阻尼效果）</span></td></tr><tr><td><span style="font-size: 15px;">srlHeaderMaxDragRate</span></td><td><span style="font-size: 15px;">float</span></td><td><span style="font-size: 15px;">Header最大拖动高度/Header标准高度（默认2，要求&gt;=1）</span></td></tr><tr><td><span style="font-size: 15px;">srlFooterMaxDragRate</span></td><td><span style="font-size: 15px;">float</span></td><td><span style="font-size: 15px;">Footer最大拖动高度/Footer标准高度（默认2，要求&gt;=1）</span></td></tr><tr><td><span style="font-size: 15px;">srlEnableRefresh</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否开启下拉刷新功能（默认true）</span></td></tr><tr><td><span style="font-size: 15px;">srlEnableLoadmore</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否开启加上拉加载功能（默认true）</span></td></tr><tr><td><span style="font-size: 15px;">srlEnableHeaderTranslationContent</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">拖动Header的时候是否同时拖动内容（默认true）</span></td></tr><tr><td><span style="font-size: 15px;">srlEnableFooterTranslationContent</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">拖动Footer的时候是否同时拖动内容（默认true）</span></td></tr><tr><td><span style="font-size: 15px;">srlEnablePreviewInEditMode</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否在编辑模式时显示预览效果（默认true）</span></td></tr><tr><td><span style="font-size: 15px;">srlDisableContentWhenRefresh</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否在刷新的时候禁止内容的一切手势操作（默认false）</span></td></tr><tr><td><span style="font-size: 15px;">srlDisableContentWhenLoading</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否在加载的时候禁止内容的一切手势操作（默认false）</span></td></tr></tbody></table><p><br><br></p><p>　　　　　　　　　　　　　　　　　　　　　　　　</p><h4 id="articleHeader8">　　　　　　　　　　　　　　　　　　　　　　　　　　方法 Method</h4><table style="height: 990px; width: 958px;"><thead><tr><th><span style="font-size: 15px;">名称-name</span></th><th><span style="font-size: 15px;">格式-format</span></th><th><span style="font-size: 15px;">描述-description</span></th></tr></thead><tbody><tr><td><span style="font-size: 15px;">setPrimaryColors</span></td><td><span style="font-size: 15px;">colors</span></td><td><span style="font-size: 15px;">主题\强调颜色</span></td></tr><tr><td><span style="font-size: 15px;">setPrimaryColorsId</span></td><td><span style="font-size: 15px;">colors</span></td><td><span style="font-size: 15px;">主题\强调颜色资源Id</span></td></tr><tr><td><span style="font-size: 15px;">setReboundDuration</span></td><td><span style="font-size: 15px;">integer</span></td><td><span style="font-size: 15px;">释放后回弹动画时长</span></td></tr><tr><td><span style="font-size: 15px;">setHeaderHeight</span></td><td><span style="font-size: 15px;">dimension</span></td><td><span style="font-size: 15px;">Header的标准高度（px/dp 两个版本）</span></td></tr><tr><td><span style="font-size: 15px;">setFooterHeight</span></td><td><span style="font-size: 15px;">dimension</span></td><td><span style="font-size: 15px;">Footer的标准高度（px/dp 两个版本）</span></td></tr><tr><td><span style="font-size: 15px;">setDragRate</span></td><td><span style="font-size: 15px;">float</span></td><td><span style="font-size: 15px;">显示拖动高度/真实拖动高度（默认0.5，阻尼效果）</span></td></tr><tr><td><span style="font-size: 15px;">setHeaderMaxDragRate</span></td><td><span style="font-size: 15px;">float</span></td><td><span style="font-size: 15px;">Header最大拖动高度/Header标准高度（默认2，要求&gt;=1）</span></td></tr><tr><td><span style="font-size: 15px;">setFooterMaxDragRate</span></td><td><span style="font-size: 15px;">float</span></td><td><span style="font-size: 15px;">Footer最大拖动高度/Footer标准高度（默认2，要求&gt;=1）</span></td></tr><tr><td><span style="font-size: 15px;">setEnableRefresh</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否开启下拉刷新功能（默认true）</span></td></tr><tr><td><span style="font-size: 15px;">setEnableLoadmore</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否开启加上拉加载功能（默认true）</span></td></tr><tr><td><span style="font-size: 15px;">setEnableHeaderTranslationContent</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">拖动Header的时候是否同时拖动内容（默认true）</span></td></tr><tr><td><span style="font-size: 15px;">setEnableFooterTranslationContent</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">拖动Footer的时候是否同时拖动内容（默认true）</span></td></tr><tr><td><span style="font-size: 15px;">setEnableAutoLoadmore</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否监听列表滚动到底部时触发加载事件</span></td></tr><tr><td><span style="font-size: 15px;">setDisableContentWhenRefresh</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否在刷新的时候禁止内容的一切手势操作（默认false）</span></td></tr><tr><td><span style="font-size: 15px;">setDisableContentWhenLoading</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否在加载的时候禁止内容的一切手势操作（默认false）</span></td></tr><tr><td><span style="font-size: 15px;">setReboundInterpolator</span></td><td><span style="font-size: 15px;">Interpolator</span></td><td><span style="font-size: 15px;">设置回弹动画的插值器</span></td></tr><tr><td><span style="font-size: 15px;">setRefreshHeader</span></td><td><span style="font-size: 15px;">RefreshHeader</span></td><td><span style="font-size: 15px;">设置指定的Header</span></td></tr><tr><td><span style="font-size: 15px;">setRefreshFooter</span></td><td><span style="font-size: 15px;">RefreshFooter</span></td><td><span style="font-size: 15px;">设置指定的Footer</span></td></tr><tr><td><span style="font-size: 15px;">setOnRefreshListener</span></td><td><span style="font-size: 15px;">OnRefreshListener</span></td><td><span style="font-size: 15px;">设置刷新监听器</span></td></tr><tr><td><span style="font-size: 15px;">setOnLoadmoreListener</span></td><td><span style="font-size: 15px;">OnLoadmoreListener</span></td><td><span style="font-size: 15px;">设置加载监听器</span></td></tr><tr><td><span style="font-size: 15px;">setOnRefreshLoadmoreListener</span></td><td><span style="font-size: 15px;">OnRefreshLoadmoreListener</span></td><td><span style="font-size: 15px;">同时设置上面两个监听器</span></td></tr><tr><td><span style="font-size: 15px;">setOnMultiPurposeListener</span></td><td><span style="font-size: 15px;">OnMultiPurposeListener</span></td><td><span style="font-size: 15px;">设置多功能监听器</span></td></tr><tr><td><span style="font-size: 15px;">setLoadmoreFinished</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">设置全部数据加载完成，之后不会触发加载事件</span></td></tr><tr><td><span style="font-size: 15px;">finishRefresh</span></td><td><span style="font-size: 15px;">(int delayed)</span></td><td><span style="font-size: 15px;">完成刷新，结束刷新动画</span></td></tr><tr><td><span style="font-size: 15px;">finishLoadmore</span></td><td><span style="font-size: 15px;">(int delayed)</span></td><td><span style="font-size: 15px;">完成加载，结束加载动画</span></td></tr><tr><td><span style="font-size: 15px;">getRefreshHeader</span></td><td><span style="font-size: 15px;">RefreshHeader</span></td><td><span style="font-size: 15px;">获取Header</span></td></tr><tr><td><span style="font-size: 15px;">getRefreshFooter</span></td><td><span style="font-size: 15px;">RefreshFooter</span></td><td><span style="font-size: 15px;">获取Footer</span></td></tr><tr><td><span style="font-size: 15px;">getState</span></td><td><span style="font-size: 15px;">RefreshState</span></td><td><span style="font-size: 15px;">获取当前状态</span></td></tr><tr><td><span style="font-size: 15px;">isRefreshing</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否正在刷新</span></td></tr><tr><td><span style="font-size: 15px;">isLoading</span></td><td><span style="font-size: 15px;">boolean</span></td><td><span style="font-size: 15px;">是否正在加载</span></td></tr><tr><td><span style="font-size: 15px;">autoRefresh</span></td><td><span style="font-size: 15px;">(int delayed)</span></td><td><span style="font-size: 15px;">触发自动刷新</span></td></tr><tr><td><span style="font-size: 15px;">autoLoadmore</span></td><td><span style="font-size: 15px;">(int delayed)</span></td><td><span style="font-size: 15px;">触发自动加载</span></td></tr></tbody></table><pre><span><br>　　<span style="font-size: 14px;">参数属性引用自: </span></span><span style="font-size: 14px;"><a href="https://blog.csdn.net/lknlll/article/details/77988978?locationNum=2&amp;fps=1" target="_blank">SmartRefreshLayout---“智能”下拉刷新布局</a> 感谢原作者!</span></pre><pre><span>&nbsp;</span></pre></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/SmartRefresh.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_body&quot; c
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 系列 导读</title>
    <link href="https://freefuncode.github.io/2018/08/05/Android%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E7%B3%BB%E5%88%97%E5%AF%BC%E8%AF%BB/"/>
    <id>https://freefuncode.github.io/2018/08/05/Android开源框架系列导读/</id>
    <published>2018-08-05T14:15:29.000Z</published>
    <updated>2019-09-06T13:20:05.795Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/openSourceFrameworks.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <h1>&nbsp;一.导读</h1><h2>　　网络请求</h2><p>　　　　<a id="post_title_link_9381891" href="https://www.cnblogs.com/bugzone/p/rxjava_get.html" target="_blank">Android 开源框架 ( 一 ) OkHttp 网络框架的基本使用</a></p><p>　　　　<a id="post_title_link_9384751" href="https://www.cnblogs.com/bugzone/p/okhttp-utils.html" target="_blank">Android 开源框架 ( 二 ) 基于OkHttp进一步封装的okhttp-utils介绍</a></p><p>　　　　<a id="post_title_link_9384794" href="https://www.cnblogs.com/bugzone/p/OkHttpUtils.html" target="_blank">Android 开源框架 ( 三 ) 基于OkHttp进一步封装的OkHttpUtils介绍</a></p><p>　　　　<a id="post_title_link_9392534" href="https://www.cnblogs.com/bugzone/p/afinal.html" target="_blank">Android 开源框架 ( 四 ) Afinal --- Android 里的 ORM IOC聚合型框架</a></p><p>　　　　<a id="post_title_link_9392536" href="https://www.cnblogs.com/bugzone/p/Xutils.html" target="_blank">Android 开源框架 ( 五 ) xUtils --- Android 里的 ORM IOC聚合型框架</a></p><p>　　　　<a id="post_title_link_9394782" href="https://www.cnblogs.com/bugzone/p/Volley.html" target="_blank">Android 开源框架 ( 六 ) Volley --- Google的轻量级网络通信框架</a></p><h2>　　事件总线</h2><p>　　　　<a id="post_title_link_9399224" href="https://www.cnblogs.com/bugzone/p/eventbus.html" target="_blank">Android 开源框架 ( 七 ) 事件总线---EventBus</a></p><h2>　　依赖注入</h2><p>　　　　<a id="post_title_link_9399226" href="https://www.cnblogs.com/bugzone/p/ButterKnife.html" target="_blank">Android 开源框架 ( 八 ) 注解框架---ButterKnife</a></p><h2>　　图片加载</h2><p>　　　　<a id="post_title_link_9425211" href="https://www.cnblogs.com/bugzone/p/ImageLoader.html" target="_blank">Android 开源框架 ( 九 ) 图片加载框架---ImageLoader</a></p><p>　　　　<a id="post_title_link_9425287" href="https://www.cnblogs.com/bugzone/p/Picasso.html" target="_blank">Android 开源框架 ( 十 ) 图片加载框架---Picasso</a></p><p>　　　　<a id="post_title_link_9425295" href="https://www.cnblogs.com/bugzone/p/Glide.html" target="_blank">Android 开源框架 ( 十一 ) 图片加载框架---Glide</a></p><p>　　　　<a id="post_title_link_9426702" href="https://www.cnblogs.com/bugzone/p/Fresco.html" target="_blank">Android 开源框架 ( 十二 ) 图片加载框架---Fresco</a></p><h2>　　RecyclerView</h2><p>　　　　<a id="post_title_link_9427210" href="https://www.cnblogs.com/bugzone/p/recyclerview.html" target="_blank">Android 开源框架 ( 十三 ) RecyclerView</a></p><p>　　　　<a id="post_title_link_9432304" href="https://www.cnblogs.com/bugzone/p/SmartRefresh.html" target="_blank">Android 开源框架 ( 十四 ) 列表下拉刷新框架 --- SmartRefreshLayout</a></p><p>　　　　<a id="post_title_link_9432687" href="https://www.cnblogs.com/bugzone/p/SwipeRefreshLayout.html" target="_blank">Android 开源框架 ( 十五 ) 下拉刷新框架 --- SwipeRefreshLayout</a>　　　</p><h2>　　视频播放器</h2><p>　　　　<a id="post_title_link_9463295" href="https://www.cnblogs.com/bugzone/p/JiaoZiVideoPlayer.html" target="_blank">Android 开源框架 ( 十六 ) 视频播放器 --- JiaoZiVideoPlayer(JieCaoVideoPlayer)</a>　</p><p>&nbsp;</p><p>&nbsp;</p><h2>二.任重道远</h2><p style="text-align: center;"><img src="https://images2018.cnblogs.com/blog/612293/201808/612293-20180805221424403-1466135863.jpg" alt></p><p>&nbsp;</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/openSourceFrameworks.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 十三 ) RecyclerView</title>
    <link href="https://freefuncode.github.io/2018/08/05/Android%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%8D%81%E4%B8%89RecyclerView/"/>
    <id>https://freefuncode.github.io/2018/08/05/Android开源框架十三RecyclerView/</id>
    <published>2018-08-05T13:19:57.000Z</published>
    <updated>2019-09-06T13:20:05.780Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/recyclerview.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <p>　　RecyclerView是Android 5.0推出的。<br>　　RecyclerView是support:recyclerview-v7中提供的控件，最低兼容到android 3.0版本。可以通过导入support-v7对其进行使用。<br>　　RecyclerView已经标准化ViewHolder，我们自定义的ViewHoler需要继承 RecyclerView.ViewHolder，然后在构造方法中初始化控件，后面会有具体介绍。通过设置不同的LayoutManager，以及结合ItemDecoration , ItemAnimator，ItemTouchHelper，可以实现非常炫酷的效果。</p><h2>一.布局&nbsp;</h2><div class="cnblogs_code"><pre>  &lt;<span style="color: #000000;">android.support.v7.widget.RecyclerView        android:id</span>=<span style="color: #800000;">"</span><span style="color: #800000;">@+id/recyclerView</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_width</span>=<span style="color: #800000;">"</span><span style="color: #800000;">match_parent</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_height</span>=<span style="color: #800000;">"</span><span style="color: #800000;">match_parent</span><span style="color: #800000;">"</span>/&gt;  </pre></div><p>&nbsp;</p><h2>二.基本使用&nbsp;</h2><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">//</span><span style="color: #008000;">设置RecyclerView的适配器</span>adapter = <span style="color: #0000ff;">new</span> MyRecyclerViewAdapter(RecyclerViewActivity.<span style="color: #0000ff;">this</span><span style="color: #000000;">,datas);recyclerview.setAdapter(adapter);</span><span style="color: #008000;">//</span><span style="color: #008000;">设置添加或删除item时的动画，这里使用默认动画</span>mRecyclerView.setItemAnimator(<span style="color: #0000ff;">new</span><span style="color: #000000;"> DefaultItemAnimator());</span><span style="color: #008000;">//</span><span style="color: #008000;">添加RecyclerView的分割线</span>recyclerview.addItemDecoration(<span style="color: #0000ff;">new</span> DividerListItemDecoration(RecyclerViewActivity.<span style="color: #0000ff;">this</span><span style="color: #000000;">,DividerListItemDecoration.VERTICAL_LIST));        </span><span style="color: #008000;">//</span><span style="color: #008000;">LayoutManager</span>recyclerview.setLayoutManager(<span style="color: #0000ff;">new</span> LinearLayoutManager(RecyclerViewActivity.<span style="color: #0000ff;">this</span>, LinearLayoutManager.VERTICAL, <span style="color: #0000ff;">false</span>));</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span> MyRecyclerViewAdapter extends RecyclerView.Adapter&lt;MyRecyclerViewAdapter.ViewHolder&gt;<span style="color: #000000;"> {<pre><code>&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; final Context context;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;  ArrayList&amp;lt;String&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; datas;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; MyRecyclerViewAdapter(Context context, ArrayList&amp;lt;String&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; datas) {    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;.context =&lt;span style=&quot;color: #000000;&quot;&gt; context;    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;.datas =&lt;span style=&quot;color: #000000;&quot;&gt; datas;}&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;* * 相当于getView方法中创建View和ViewHolder * @param parent * @param viewType * @return &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;@Override&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; ViewHolder onCreateViewHolder(ViewGroup parent, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; viewType) {    View itemView &lt;/span&gt;= View.inflate(context, R.layout.item_recyclerview,&lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; ViewHolder(itemView);}&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*相当于于getView绑定数据部分的代码 * 数据和View绑定 * @param holder * @param position &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;@Override&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; onBindViewHolder(ViewHolder holder, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; position) {    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;根据位置得到对应的数据&lt;/span&gt;    String  data  = datas.&lt;span style=&quot;color: #0000ff;&quot;&gt;get&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;(position);    holder.tv_title.setText(data);}&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;* * 得到总条数 * @return &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;@Override&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; getItemCount() {    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; datas.size();}&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;class&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; ViewHolder extends RecyclerView.ViewHolder {    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; ImageView iv_icon;    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; TextView tv_title;    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; ViewHolder(View itemView) {        super(itemView);        iv_icon &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; (ImageView) itemView.findViewById(R.id.iv_icon);        tv_title &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; (TextView) itemView.findViewById(R.id.tv_title);    }}</code></pre><p>}</p></span></pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>&nbsp;</p><h2>三.三种显示方式&nbsp;</h2><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">//</span><span style="color: #008000;">设置List类型效果</span>recyclerview.setLayoutManager(<span style="color: #0000ff;">new</span> LinearLayoutManager(RecyclerViewActivity.<span style="color: #0000ff;">this</span>,LinearLayoutManager.VERTICAL,<span style="color: #0000ff;">false</span><span style="color: #000000;">));<p></p></span><span style="color: #008000;">//</span><span style="color: #008000;">设置Grid类型效果</span><br>recyclerview.setLayoutManager(<span style="color: #0000ff;">new</span> GridLayoutManager(RecyclerViewActivity.<span style="color: #0000ff;">this</span>, <span style="color: #800080;">2</span>, GridLayoutManager.VERTICAL, <span style="color: #0000ff;">false</span><span style="color: #000000;">));<p></p><p></p></span><span style="color: #008000;">//</span><span style="color: #008000;">设置瀑布流类型效果</span><br>recyclerview.setLayoutManager(<span style="color: #0000ff;">new</span> StaggeredGridLayoutManager(<span style="color: #800080;">3</span>,StaggeredGridLayoutManager.VERTICAL));</pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>&nbsp;</p><h2>四.分割线</h2><div class="cnblogs_code"><pre><span style="color: #008000;">//</span><span style="color: #008000;">添加RecyclerView的分割线</span>recyclerview.addItemDecoration(<span style="color: #0000ff;">new</span> DividerListItemDecoration(RecyclerViewActivity.<span style="color: #0000ff;">this</span>,DividerListItemDecoration.VERTICAL_LIST));</pre></div><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #000000;">import android.content.Context;import android.content.res.TypedArray;import android.graphics.Canvas;import android.graphics.Rect;import android.graphics.drawable.Drawable;import android.support.v7.widget.LinearLayoutManager;import android.support.v7.widget.RecyclerView;import android.view.View;<p></p></span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> DividerListItemDecoration extends RecyclerView.ItemDecoration {<br>    </span><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span> final <span style="color: #0000ff;">int</span>[] ATTRS = <span style="color: #0000ff;">new</span> <span style="color: #0000ff;">int</span><span style="color: #000000;">[]{<br>            android.R.attr.listDivider<br>    };<p></p><pre><code>&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; final &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; HORIZONTAL_LIST =&lt;span style=&quot;color: #000000;&quot;&gt; LinearLayoutManager.HORIZONTAL;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; final &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; VERTICAL_LIST =&lt;span style=&quot;color: #000000;&quot;&gt; LinearLayoutManager.VERTICAL;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Drawable mDivider;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; mOrientation;&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; DividerListItemDecoration(Context context, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; orientation) {    final TypedArray a &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; context.obtainStyledAttributes(ATTRS);    mDivider &lt;/span&gt;= a.getDrawable(&lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);    a.recycle();    setOrientation(orientation);}&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; setOrientation(&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; orientation) {    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (orientation != HORIZONTAL_LIST &amp;amp;&amp;amp; orientation !=&lt;span style=&quot;color: #000000;&quot;&gt; VERTICAL_LIST) {        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; IllegalArgumentException(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;invalid orientation&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);    }    mOrientation &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; orientation;}@Override&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; onDraw(Canvas c, RecyclerView parent) {</code></pre><p></p></span><span style="color: #008000;">//</span><span style="color: #008000;">        Log.e(“recyclerview - itemdecoration”, “onDraw()”);</span><p></p><pre><code>    &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (mOrientation ==&lt;span style=&quot;color: #000000;&quot;&gt; VERTICAL_LIST) {        drawVertical(c, parent);    } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {        drawHorizontal(c, parent);    }}&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; drawVertical(Canvas c, RecyclerView parent) {    final &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; left =&lt;span style=&quot;color: #000000;&quot;&gt; parent.getPaddingLeft();    final &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; right = parent.getWidth() -&lt;span style=&quot;color: #000000;&quot;&gt; parent.getPaddingRight();    final &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; childCount =&lt;span style=&quot;color: #000000;&quot;&gt; parent.getChildCount();    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;; i &amp;lt; childCount; i++&lt;span style=&quot;color: #000000;&quot;&gt;) {        final View child &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; parent.getChildAt(i);        android.support.v7.widget.RecyclerView v &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; android.support.v7.widget.RecyclerView(parent.getContext());        final RecyclerView.LayoutParams &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;params&lt;/span&gt; =&lt;span style=&quot;color: #000000;&quot;&gt; (RecyclerView.LayoutParams) child                .getLayoutParams();        final &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; top = child.getBottom() + &lt;span style=&quot;color: #0000ff;&quot;&gt;params&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.bottomMargin;        final &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; bottom = top +&lt;span style=&quot;color: #000000;&quot;&gt; mDivider.getIntrinsicHeight();        mDivider.setBounds(left, top, right, bottom);        mDivider.draw(c);    }}&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; drawHorizontal(Canvas c, RecyclerView parent) {    final &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; top =&lt;span style=&quot;color: #000000;&quot;&gt; parent.getPaddingTop();    final &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; bottom = parent.getHeight() -&lt;span style=&quot;color: #000000;&quot;&gt; parent.getPaddingBottom();    final &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; childCount =&lt;span style=&quot;color: #000000;&quot;&gt; parent.getChildCount();    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt; (&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;; i &amp;lt; childCount; i++&lt;span style=&quot;color: #000000;&quot;&gt;) {        final View child &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; parent.getChildAt(i);        final RecyclerView.LayoutParams &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;params&lt;/span&gt; =&lt;span style=&quot;color: #000000;&quot;&gt; (RecyclerView.LayoutParams) child                .getLayoutParams();        final &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; left = child.getRight() + &lt;span style=&quot;color: #0000ff;&quot;&gt;params&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.rightMargin;        final &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; right = left +&lt;span style=&quot;color: #000000;&quot;&gt; mDivider.getIntrinsicHeight();        mDivider.setBounds(left, top, right, bottom);        mDivider.draw(c);    }}@Override&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; getItemOffsets(Rect outRect, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; itemPosition, RecyclerView parent) {    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (mOrientation ==&lt;span style=&quot;color: #000000;&quot;&gt; VERTICAL_LIST) {        outRect.&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;set&lt;/span&gt;(&lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;, mDivider.getIntrinsicHeight());    } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {        outRect.&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;set&lt;/span&gt;(&lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;, mDivider.getIntrinsicWidth(), &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);    }}</code></pre><p>}</p></pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>&nbsp;</p><p>　　RecyclerView 和 ListView 都可以加头和尾。 在后面列表的上拉加载，下拉刷新控件中再讲。</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/recyclerview.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_body&quot; c
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 十二 ) 图片加载框架---Fresco</title>
    <link href="https://freefuncode.github.io/2018/08/05/Android%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%8D%81%E4%BA%8C%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%A1%86%E6%9E%B6-Fresco/"/>
    <id>https://freefuncode.github.io/2018/08/05/Android开源框架十二图片加载框架-Fresco/</id>
    <published>2018-08-05T10:43:27.000Z</published>
    <updated>2019-09-06T13:20:05.780Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/Fresco.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <p>　　Fresco是Facebook推出的一款用于Android应用中展示图片的强大图片库。它具有强大的内存管理、渐进式呈现图片、支持加载Gif图和WebP格式等特点。</p><p>　　相比于其他图片框架要庞大的多，但是对于图片的处理也要比其他框架支持的多。</p><p>　　Fresco官方中文介绍文档：<a href="https://www.fresco-cn.org/" target="_blank">https://www.fresco-cn.org/</a></p><p>　　Fresco GitHub 地址：<a href="https://github.com/facebook/fresco" target="_blank">https://github.com/facebook/fresco</a></p><h2>Fresco使用</h2><h3>　　1.添加依赖</h3><div class="cnblogs_code"><pre>compile <span style="color: #800000;">'</span><span style="color: #800000;">com.facebook.fresco:fresco:1.10.0</span><span style="color: #800000;">'</span></pre></div><h4>　　其他相关依赖</h4><div class="cnblogs_code"><pre>compile <span style="color: #800000;">'</span><span style="color: #800000;">com.facebook.fresco:animated-gif:1.5.0</span><span style="color: #800000;">'</span><span style="color: #008000;">//</span><span style="color: #008000;">加载gif动图需添加此库</span>compile <span style="color: #800000;">'</span><span style="color: #800000;">com.facebook.fresco:animated-webp:1.5.0</span><span style="color: #800000;">'</span><span style="color: #008000;">//</span><span style="color: #008000;">加载webp动图需添加此库</span>compile <span style="color: #800000;">'</span><span style="color: #800000;">com.facebook.fresco:webpsupport:1.5.0</span><span style="color: #800000;">'</span><span style="color: #008000;">//</span><span style="color: #008000;">支持webp需添加此库</span>compile <span style="color: #800000;">'</span><span style="color: #800000;">com.facebook.fresco:imagepipeline-okhttp3:1.5.0</span><span style="color: #800000;">'</span><span style="color: #008000;">//</span><span style="color: #008000;">网络实现层使用okhttp3需添加此库</span>compile <span style="color: #800000;">'</span><span style="color: #800000;">jp.wasabeef:fresco-processors:2.1.0@aar</span><span style="color: #800000;">'</span><span style="color: #008000;">//</span><span style="color: #008000;">用于提供fresco的各种图片变换</span></pre></div><h3>　　2.图片加载布局控件</h3><p>　　必须设置layout_width、layout_height两个属性，否则无法展示。并且注意SimpleDraweeView不支持wrap_content属性。可以参考官方文档：<a href="https://www.fresco-cn.org/docs/wrap-content.html" target="_blank">wrap_content的限制</a> 。你必须指定尺寸或者用<code class="highlighter-rouge">match_parent</code>来布局。</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>&lt;<span style="color: #000000;">com.facebook.drawee.view.SimpleDraweeView        android:id</span>=<span style="color: #800000;">"</span><span style="color: #800000;">@+id/sdv_fresco</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_width</span>=<span style="color: #800000;">"</span><span style="color: #800000;">130dp</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_gravity</span>=<span style="color: #800000;">"</span><span style="color: #800000;">center</span><span style="color: #800000;">"</span><span style="color: #000000;">        android:layout_height</span>=<span style="color: #800000;">"</span><span style="color: #800000;">130dp</span><span style="color: #800000;">"</span><span style="color: #000000;">        fresco:placeholderImage</span>=<span style="color: #800000;">"</span><span style="color: #800000;">@drawable/atguigu_logo</span><span style="color: #800000;">"</span> /&gt;</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h2>　　3.常用属性</h2><h4>　　3.1&nbsp;带进度条的图片</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">　　//</span><span style="color: #008000;"> 设置样式</span>    GenericDraweeHierarchyBuilder builder = <span style="color: #0000ff;">new</span><span style="color: #000000;"> GenericDraweeHierarchyBuilder(getResources());    GenericDraweeHierarchy hierarchy </span>= builder.setProgressBarImage(<span style="color: #0000ff;">new</span><span style="color: #000000;"> ProgressBarDrawable()).build();    sdvFresco.setHierarchy(hierarchy);    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 加载图片的地址</span>    Uri uri = Uri.parse(<span style="color: #800000;">"</span><span style="color: #800000;">http://</span><span style="color: #800000;">"</span><span style="color: #000000;">);    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 加载图片</span>    sdvFresco.setImageURI(uri);</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h4>　　3.2&nbsp;图片的不同裁剪</h4><p>　　　　CENTER</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>　　GenericDraweeHierarchyBuilder builder = <span style="color: #0000ff;">new</span><span style="color: #000000;"> GenericDraweeHierarchyBuilder(getResources());<pre><code>&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;居中，无缩放&lt;/span&gt;GenericDraweeHierarchy hierarchy =&lt;span style=&quot;color: #000000;&quot;&gt; builder.setActualImageScaleType(ScalingUtils.ScaleType.CENTER).build();&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 设置样式&lt;/span&gt;</code></pre><p><span style="color: #000000;">    sdvFresco.setHierarchy(hierarchy);<br>    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 加载图片的地址</span><br>    Uri uri = Uri.parse(<span style="color: #800000;">“</span><span style="color: #800000;">http://</span><span style="color: #800000;">“</span><span style="color: #000000;">);<br>    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 加载图片</span><br>    sdvFresco.setImageURI(uri);</p></span></pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>　　CENTER_CROP</p><div class="cnblogs_code"><pre><span style="color: #008000;">//</span><span style="color: #008000;">保持宽高比缩小或放大，使得两边都大于或等于显示边界。居中显示</span>    GenericDraweeHierarchy hierarchy = builder.setActualImageScaleType(ScalingUtils.ScaleType.CENTER_CROP).build();</pre></div><p>　　FOCUS_CROP</p><div class="cnblogs_code"><pre><span style="color: #008000;">//</span><span style="color: #008000;"> 同centerCrop, 但居中点不是中点，而是指定的某个点,这里我设置为图片的左上角那点</span>    PointF point = <span style="color: #0000ff;">new</span> PointF(<span style="color: #800080;">0</span>,<span style="color: #800080;">0</span><span style="color: #000000;">);    GenericDraweeHierarchy hierarchy </span>= builder.setActualImageScaleType(ScalingUtils.ScaleType.FOCUS_CROP)</pre></div><p>　　CENTER_INSIDE</p><div class="cnblogs_code"><pre><span style="color: #008000;">//</span><span style="color: #008000;">使两边都在显示边界内，居中显示。如果图尺寸大于显示边界，则保持长宽比缩小图片</span>    GenericDraweeHierarchy hierarchy = builder.setActualImageScaleType(ScalingUtils.ScaleType.CENTER_INSIDE).build();</pre></div><p>　　FIT_CENTER</p><div class="cnblogs_code"><pre><span style="color: #008000;">//</span><span style="color: #008000;">保持宽高比，缩小或者放大，使得图片完全显示在显示边界内。居中显示</span>    GenericDraweeHierarchy hierarchy = builder.setActualImageScaleType(ScalingUtils.ScaleType.FIT_CENTER).build();</pre></div><p>　　FIT_START</p><div class="cnblogs_code"><pre><span style="color: #008000;">//</span><span style="color: #008000;">保持宽高比，缩小或者放大，使得图片完全显示在显示边界内，不居中，和显示边界左上对齐</span>    GenericDraweeHierarchy hierarchy = builder.setActualImageScaleType(ScalingUtils.ScaleType.FIT_START).build();</pre></div><p>　　FIT_END</p><div class="cnblogs_code"><pre><span style="color: #008000;">//</span><span style="color: #008000;">保持宽高比，缩小或者放大，使得图片完全显示在显示边界内，不居中，和显示边界右下对齐</span>    GenericDraweeHierarchy hierarchy = builder.setActualImageScaleType(ScalingUtils.ScaleType.FIT_END).build();</pre></div><p>　　FIT_XY</p><div class="cnblogs_code"><pre><span style="color: #008000;">//</span><span style="color: #008000;">不保持宽高比，填充满显示边界</span>    GenericDraweeHierarchy hierarchy = builder.setActualImageScaleType(ScalingUtils.ScaleType.FIT_XY).build();</pre></div><p>　　title mode</p><div class="cnblogs_code"><pre><span style="color: #008000;">//</span><span style="color: #008000;">如要使用title mode显示, 需要设置为none</span>    GenericDraweeHierarchy hierarchy = builder.setActualImageScaleType(<span style="color: #0000ff;">null</span>).build();</pre></div><h4>　　3.3&nbsp;圆形和圆角图片　　</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">　　//</span><span style="color: #008000;">圆形图片</span>    parames =<span style="color: #000000;"> RoundingParams.asCircle();    GenericDraweeHierarchy hierarchy </span>=<span style="color: #000000;"> builder.setRoundingParams(parames).build();<pre><code>&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;圆角图片&lt;/span&gt;parames =&lt;span style=&quot;color: #000000;&quot;&gt; RoundingParams.fromCornersRadius(50f);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;parames.setOverlayColor(getResources().getColor(android.R.color.holo_red_light));&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;覆盖层&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;parames.setBorder(getResources().getColor(android.R.color.holo_blue_light), 5);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;边框&lt;/span&gt;GenericDraweeHierarchy hierarchy = builder.setRoundingParams(parames).build();&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><h4>　　3.4&nbsp;渐进式展示图片</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">　　//</span><span style="color: #008000;"> 加载质量配置</span>    ProgressiveJpegConfig jpegConfig = <span style="color: #0000ff;">new</span><span style="color: #000000;"> ProgressiveJpegConfig() {        @Override        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">int</span> getNextScanNumberToDecode(<span style="color: #0000ff;">int</span><span style="color: #000000;"> scanNumber) {            </span><span style="color: #0000ff;">return</span> scanNumber + <span style="color: #800080;">2</span><span style="color: #000000;">;        }<pre><code>    @Override    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; QualityInfo getQualityInfo(&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; scanNumber) {        boolean isGoodEnough &lt;/span&gt;= (scanNumber &amp;gt;= &lt;span style=&quot;color: #800080;&quot;&gt;5&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; ImmutableQualityInfo.of(scanNumber, isGoodEnough, &lt;span style=&quot;color: #0000ff;&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);    }};ImagePipelineConfig.newBuilder(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;).setProgressiveJpegConfig(jpegConfig).build();&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 获取图片URL&lt;/span&gt;Uri uri = Uri.parse(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;http://&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 获取图片请求&lt;/span&gt;ImageRequest request = ImageRequestBuilder.newBuilderWithSource(uri).setProgressiveRenderingEnabled(&lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;).build();DraweeController draweeController &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; Fresco.newDraweeControllerBuilder()        .setImageRequest(request)        .setTapToRetryEnabled(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)        .setOldController(sdvFresco.getController())&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;使用oldController可以节省不必要的内存分配&lt;/span&gt;</code></pre><p><span style="color: #000000;">            .build();</span></p><pre><code>&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 设置加载的控制&lt;/span&gt;sdvFresco.setController(draweeController);&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><h4>　　3.5&nbsp;GIF动画图片</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>　　Uri uri = Uri.parse(<span style="color: #800000;">"</span><span style="color: #800000;">http://</span><span style="color: #800000;">"</span><span style="color: #000000;">);    DraweeController controller </span>=<span style="color: #000000;"> Fresco.newDraweeControllerBuilder()            .setUri(uri)            .setAutoPlayAnimations(</span><span style="color: #0000ff;">true</span>) <span style="color: #008000;">//</span><span style="color: #008000;">是否自动播放</span><span style="color: #000000;">            .setOldController(sdvFresco.getController())            .build();<pre><code>sdvFresco.setController(controller);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 动画开始&lt;/span&gt;Animatable animatable =&lt;span style=&quot;color: #000000;&quot;&gt; sdvFresco.getController().getAnimatable();&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;(animatable != &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp; !&lt;span style=&quot;color: #000000;&quot;&gt;animatable.isRunning()) {    animatable.start();}&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;动画停止&lt;/span&gt; Animatable animatable =&lt;span style=&quot;color: #000000;&quot;&gt; sdvFresco.getController().getAnimatable();&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;(animatable != &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt; &amp;amp;&amp;amp;&lt;span style=&quot;color: #000000;&quot;&gt; animatable.isRunning()) {    animatable.stop();}&lt;/span&gt;&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><h4>　　3.6&nbsp;多图请求及图片复用</h4><p>　　　　先显示低分辨率的图，然后是高分辨率的图</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">　　//</span><span style="color: #008000;"> 图片地址</span>    Uri lowUri = Uri.parse(<span style="color: #800000;">"</span><span style="color: #800000;">http://</span><span style="color: #800000;">"</span><span style="color: #000000;">);    Uri highUri </span>= Uri.parse(<span style="color: #800000;">"</span><span style="color: #800000;">http://</span><span style="color: #800000;">"</span><span style="color: #000000;">);    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 控制加载图片</span>    DraweeController controller =<span style="color: #000000;"> Fresco.newDraweeControllerBuilder()            .setLowResImageRequest(ImageRequest.fromUri(lowUri))            .setImageRequest(ImageRequest.fromUri(highUri))            .build();    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 加载图片</span><span style="color: #000000;">    sdvFresco.setController(controller);<pre><code>本地缩略图预览&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 图片地址&lt;/span&gt;Uri uri = Uri.fromFile(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; File(Environment.getExternalStorageDirectory() +&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;/meinv1.jpg&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;));&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 加载图片的请求&lt;/span&gt;ImageRequest request =&lt;span style=&quot;color: #000000;&quot;&gt; ImageRequestBuilder.newBuilderWithSource(uri)        .setLocalThumbnailPreviewsEnabled(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)        .build();&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 控制图片的加载&lt;/span&gt;DraweeController controller =&lt;span style=&quot;color: #000000;&quot;&gt; Fresco.newDraweeControllerBuilder()        .setImageRequest(request)        .build();&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 加载图片&lt;/span&gt;</code></pre><p><span style="color: #000000;">    sdvFresco.setController(controller);</span></p><pre><code>本地图片复用&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;本地图片的复用&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;在请求之前，还会去内存中请求一次图片，没有才会先去本地，最后去网络uri&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;本地准备复用图片的uri  如果本地这个图片不存在，会自动去加载下一个uri&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 请求加载图片&lt;/span&gt;Uri uri1 = Uri.fromFile(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; File(Environment.getExternalStorageDirectory()+&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;/meinv.jpg&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;));&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;图片的网络uri&lt;/span&gt;Uri uri2 = Uri.parse(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;http://&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);ImageRequest request1 &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; ImageRequest.fromUri(uri1);ImageRequest request2 &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; ImageRequest.fromUri(uri2);ImageRequest[] requests &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; {request1, request2};&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 控制加载图片&lt;/span&gt;DraweeController controller =&lt;span style=&quot;color: #000000;&quot;&gt; Fresco.newDraweeControllerBuilder()        .setFirstAvailableImageRequests(requests)        .setOldController(sdvFresco.getController())        .build();&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 加载图片&lt;/span&gt;sdvFresco.setController(controller);&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><h4>　　3.7&nbsp;图片加载监听</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>    <span style="color: #008000;">//</span><span style="color: #008000;"> 图片加载的控制     </span><span style="color: #008000;">//</span><span style="color: #008000;">添加监听事件 .setControllerListener(controllerListener)</span><span style="color: #000000;">    SimpleDraweeView sdvFrescoListener;<pre><code>DraweeController controller &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; Fresco.newDraweeControllerBuilder()        .setOldController(sdvFrescoListener.getController())        .setImageRequest(request)        .setControllerListener(controllerListener)        .build();&lt;/span&gt;&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #0000ff;">private</span> ControllerListener controllerListener = <span style="color: #0000ff;">new</span> BaseControllerListener&lt;ImageInfo&gt;<span style="color: #000000;">(){        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 加载图片完毕</span><span style="color: #000000;">        @Override        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onFinalImageSet(String id, ImageInfo imageInfo, Animatable animatable) {            super.onFinalImageSet(id, imageInfo, animatable);<pre><code>    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (imageInfo == &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) {        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;    }    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 获取图片的质量&lt;/span&gt;    QualityInfo qualityInfo =&lt;span style=&quot;color: #000000;&quot;&gt; imageInfo.getQualityInfo();    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;页面文本打印setText&lt;/span&gt;    tvFrescoListener.setText(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Final image received! &lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; +            &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;\nSize: &lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; +&lt;span style=&quot;color: #000000;&quot;&gt; imageInfo.getWidth()            &lt;/span&gt;+ &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;x&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; +&lt;span style=&quot;color: #000000;&quot;&gt; imageInfo.getHeight()            &lt;/span&gt;+ &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;\nQuality level: &lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; +&lt;span style=&quot;color: #000000;&quot;&gt; qualityInfo.getQuality()            &lt;/span&gt;+ &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;\ngood enough: &lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; +&lt;span style=&quot;color: #000000;&quot;&gt; qualityInfo.isOfGoodEnoughQuality()            &lt;/span&gt;+ &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;\nfull quality: &lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; +&lt;span style=&quot;color: #000000;&quot;&gt; qualityInfo.isOfFullQuality());}&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 渐进式加载图片回调&lt;/span&gt;</code></pre><p><span style="color: #000000;">        @Override<br>        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onIntermediateImageSet(String id, ImageInfo imageInfo) {<br>            super.onIntermediateImageSet(id, imageInfo);</span></p><pre><code>    tvFrescoListener2.setText(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;IntermediateImageSet image receiced&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);}&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 加载图片失败&lt;/span&gt;</code></pre><p><span style="color: #000000;">        @Override<br>        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onFailure(String id, Throwable throwable) {<br>            super.onFailure(id, throwable);</span></p><pre><code>        tvFrescoListener.setText(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Error loading&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt; +&lt;span style=&quot;color: #000000;&quot;&gt; id);    }}&lt;/span&gt;&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><h4>　　3.8&nbsp;图片修改和旋转</h4><p>　　　　修内存中改图片大小 setResizeOptions&nbsp;</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre> 　　<span style="color: #008000;">//</span><span style="color: #008000;"> 图片地址</span>    Uri uri = Uri.parse(<span style="color: #800000;">"</span><span style="color: #800000;">http://</span><span style="color: #800000;">"</span><span style="color: #000000;">);    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 图片的请求</span>    ImageRequest request =<span style="color: #000000;"> ImageRequestBuilder.newBuilderWithSource(uri)            .setResizeOptions(</span><span style="color: #0000ff;">new</span> ResizeOptions(<span style="color: #800080;">50</span>,<span style="color: #800080;">50</span><span style="color: #000000;">))            .build();    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 控制图片的加载</span>    PipelineDraweeController controller =<span style="color: #000000;"> (PipelineDraweeController) Fresco.newDraweeControllerBuilder()            .setOldController(sdvFresco.getController())            .setImageRequest(request)            .build();    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 加载图片</span>    sdvFresco.setController(controller);</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>　　　　旋转图片 setAutoRotateEnabled</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>　　Uri uri = Uri.parse(<span style="color: #800000;">"</span><span style="color: #800000;">http://</span><span style="color: #800000;">"</span><span style="color: #000000;">);    ImageRequest request </span>=<span style="color: #000000;"> ImageRequestBuilder.newBuilderWithSource(uri)            .setAutoRotateEnabled(</span><span style="color: #0000ff;">true</span><span style="color: #000000;">)            .build();    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 控制图片的加载</span>    DraweeController controller =<span style="color: #000000;"> Fresco.newDraweeControllerBuilder()            .setOldController(sdvFresco.getController())            .setImageRequest(request)            .build();    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 加载图片</span>    sdvFresco.setController(controller);</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h4>　　3.9&nbsp;修改图片(显示过程同上,主要更改了ImageRequest设置) setPostprocessor</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>    <span style="color: #008000;">//</span><span style="color: #008000;"> 修改图片</span>    Postprocessor postProcessor = <span style="color: #0000ff;">new</span><span style="color: #000000;"> BasePostprocessor() {        @Override        </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> String getName() {            </span><span style="color: #0000ff;">return</span> <span style="color: #800000;">"</span><span style="color: #800000;">postProcessor</span><span style="color: #800000;">"</span><span style="color: #000000;">;        }        @Override        </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> process(Bitmap bitmap) {            </span><span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> x = <span style="color: #800080;">0</span>; x &lt; bitmap.getWidth(); x += <span style="color: #800080;">2</span><span style="color: #000000;">) {                </span><span style="color: #0000ff;">for</span> (<span style="color: #0000ff;">int</span> y = <span style="color: #800080;">0</span>; y &lt; bitmap.getHeight(); y += <span style="color: #800080;">2</span><span style="color: #000000;">) {                    bitmap.setPixel(x, y, Color.RED);                }            }        }    };<pre><code>&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 创建图片请求&lt;/span&gt;ImageRequest request =&lt;span style=&quot;color: #000000;&quot;&gt; ImageRequestBuilder.newBuilderWithSource(uri)        .setPostprocessor(postProcessor)        .build();&lt;/span&gt;&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><h4>&nbsp;　　3.10&nbsp;动态展示图片（添加SimpleDraweeView到LinearLayout中）</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>　　SimpleDraweeView simpleDraweeView = <span style="color: #0000ff;">new</span> SimpleDraweeView(<span style="color: #0000ff;">this</span><span style="color: #000000;">);    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 设置宽高比</span>    simpleDraweeView.setAspectRatio(<span style="color: #800080;">3.0f</span><span style="color: #000000;">);<pre><code>&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 图片的地址&lt;/span&gt;Uri uri = Uri.parse(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;http://&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 图片的请求&lt;/span&gt;ImageRequest request =&lt;span style=&quot;color: #000000;&quot;&gt; ImageRequestBuilder.newBuilderWithSource(uri)        .build();&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 加载图片的控制&lt;/span&gt;PipelineDraweeController controller =&lt;span style=&quot;color: #000000;&quot;&gt; (PipelineDraweeController) Fresco.newDraweeControllerBuilder()        .setOldController(simpleDraweeView.getController())        .setImageRequest(request)        .build();&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 加载图片&lt;/span&gt;</code></pre><p><span style="color: #000000;">    simpleDraweeView.setController(controller);<br>    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 添加View到线性布局中</span><br>    linearLayout.addView(simpleDraweeView);</p></span></pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>&nbsp;</p><h4>&nbsp;</h4></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/Fresco.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_body&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 十一 ) 图片加载框架---Glide</title>
    <link href="https://freefuncode.github.io/2018/08/05/Android%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%8D%81%E4%B8%80%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%A1%86%E6%9E%B6-Glide/"/>
    <id>https://freefuncode.github.io/2018/08/05/Android开源框架十一图片加载框架-Glide/</id>
    <published>2018-08-05T06:07:01.000Z</published>
    <updated>2019-09-06T13:20:05.780Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/Glide.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <h2>一.引言</h2><p>&nbsp;Glide被广泛运用在google的开源项目中，包括2014年的google I/O大会上发布的官方app</p><div>&nbsp;前面介绍了</div><div>&nbsp; 　　Universal ImageLoader&nbsp;<a id="post_title_link_9425287" href="https://www.cnblogs.com/bugzone/p/Picasso.html" target="_blank">Android 开源框架 ( 十 ) 图片加载框架---Picasso</a></div><div>&nbsp; 　　Picasso.&nbsp;<a id="post_title_link_9425211" href="https://www.cnblogs.com/bugzone/p/ImageLoader.html" target="_blank">Android 开源框架 ( 九 ) 图片加载框架---ImageLoader</a></div><div>　　</div><div>　　而本文介绍的Glide是在Picasso基础上进行的二次开发，和Picasso 有90%相似度，其优势显而易见。Universal ImageLoader已停止服务。</div><div>&nbsp;</div><h2>二.基本使用</h2><h3>　　1.添加最新依赖　　</h3><div class="cnblogs_code"><pre>compile <span style="color: #800000;">'</span><span style="color: #800000;">com.github.bumptech.glide:glide:4.7.1</span><span style="color: #800000;">'</span></pre></div><p><strong>注意</strong>：Glide默认会导入Android的support-v4包。4.71版本默认导入的是v4包的27版本。如果你的项目中有v4包的别的版本，就会引起冲突发生错误如 java.lang.NoSuchMethodError: No static method。</p><h3>　　2.基本使用</h3><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #000000;">Glide.with(mContext)    .load(mDatas[position])    .placeholder(R.mipmap.ic_launcher) </span><span style="color: #008000;">//</span><span style="color: #008000;">占位图</span>    .error(R.mipmap.ic_launcher)  <span style="color: #008000;">//</span><span style="color: #008000;">出错的占位图</span>    .<span style="color: #0000ff;">override</span>(width, height) <span style="color: #008000;">//</span><span style="color: #008000;">图片显示的分辨率 ，像素值 可以转化为DP再设置</span><span style="color: #000000;">    .animate(R.anim.glide_anim)    .centerCrop()    .fitCenter()    .into(holder.image);</span></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h2>三.拓展了解Glide加载不同的图片</h2><p>　　Glide不仅仅可以加载网络图片，同样也能加载资源图片，本地图片，GIf, 视频快照，缩略图等。</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">　　//</span><span style="color: #008000;">（1）加载网络图片</span>    Glide.with(<span style="color: #0000ff;">this</span>).load(<span style="color: #800000;">"</span><span style="color: #800000;">http://img1.imgtn.bdimg.com/it/u=2615772929,948758168&amp;fm=21&amp;gp=0.jpg</span><span style="color: #800000;">"</span><span style="color: #000000;">).into(ivGlide1);<pre><code>&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;（2）加载资源图片&lt;/span&gt;Glide.with(&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;).load(R.drawable.atguigu_logo).into(ivGlide2);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;（3）加载本地图片&lt;/span&gt;String path = Environment.getExternalStorageDirectory() + &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;/meinv1.jpg&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;File file &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; File(path);Uri uri &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; Uri.fromFile(file);Glide.with(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;).load(uri).into(ivGlide3);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; （4）加载网络gif&lt;/span&gt;String gifUrl = &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;http://b.hiphotos.baidu.com/zhidao/pic/item/faedab64034f78f066abccc57b310a55b3191c67.jpg&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;Glide.with(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;).load(gifUrl).placeholder(R.mipmap.ic_launcher).into(ivGlide4);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; （5）加载资源gif&lt;/span&gt;Glide.with(&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;).load(R.drawable.loading).asGif().placeholder(R.mipmap.ic_launcher).into(ivGlide5);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;（6）加载本地gif&lt;/span&gt;String gifPath = Environment.getExternalStorageDirectory() + &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;/meinv2.jpg&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;File gifFile &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; File(gifPath);Glide.with(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;).load(gifFile).placeholder(R.mipmap.ic_launcher).into(ivGlide6);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;（7）加载本地小视频和快照&lt;/span&gt;String videoPath = Environment.getExternalStorageDirectory() + &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;/video.mp4&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;File videoFile &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; File(videoPath);Glide.with(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;).load(Uri.fromFile(videoFile)).placeholder(R.mipmap.ic_launcher).into(ivGlide7);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;（8）设置缩略图比例,然后，先加载缩略图，再加载原图&lt;/span&gt;String urlPath = Environment.getExternalStorageDirectory() + &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;/meinv1.jpg&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;Glide.with(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;).load(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; File(urlPath)).thumbnail(&lt;span style=&quot;color: #800080;&quot;&gt;0.1f&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;).centerCrop().placeholder(R.mipmap.ic_launcher).into(ivGlide8);&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;（9）先建立一个缩略图对象，然后，先加载缩略图，再加载原图&lt;/span&gt;DrawableRequestBuilder thumbnailRequest = Glide.with(&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;).load(&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; File(urlPath));Glide.with(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;).load(Uri.fromFile(videoFile)).thumbnail(thumbnailRequest).centerCrop().placeholder(R.mipmap.ic_launcher).into(ivGlide9);&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><p>&nbsp;</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/Glide.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_body&quot; class=&quot;b
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 十 ) 图片加载框架---Picasso</title>
    <link href="https://freefuncode.github.io/2018/08/05/Android%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%8D%81%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%A1%86%E6%9E%B6-Picasso/"/>
    <id>https://freefuncode.github.io/2018/08/05/Android开源框架十图片加载框架-Picasso/</id>
    <published>2018-08-05T05:56:31.000Z</published>
    <updated>2019-09-06T13:20:05.780Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/Picasso.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <p>　　Picasso 是Square 公司（SQUARE美国一家移动支付公司）开源的Android 端的图片加载和缓存框架。Square 还开源了Rerefoit 、OkHttp、LeakCanary、Picasso等等都是非常火的开源项目。</p><p>　　Picasso官方介绍网站：<a href="http://square.github.io/picasso/" target="_blank">http://square.github.io/picasso/</a></p><h2>一.基本使用</h2><p>　　1.添加依赖</p><div class="cnblogs_code"><pre>compile <span style="color: #800000;">'</span><span style="color: #800000;">com.squareup.picasso:picasso:2.5.2</span><span style="color: #800000;">'</span></pre></div><p>　　如果需要对加载的图片进行个性化处理可以(转换器Transformation)，添加图片处理的依赖库</p><div class="cnblogs_code"><pre>compile <span style="color: #800000;">'</span><span style="color: #800000;">jp.wasabeef:picasso-transformations:2.1.0</span><span style="color: #800000;">'</span>    <span style="color: #008000;">//</span><span style="color: #008000;"> If you want to use the GPU Filters</span>compile <span style="color: #800000;">'</span><span style="color: #800000;">jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1</span><span style="color: #800000;">'</span></pre></div><p>&nbsp; &nbsp; 2.基本使用</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>    <span style="color: #008000;">//</span><span style="color: #008000;"> 加载图片</span><span style="color: #000000;">    Picasso.with(mContext)            .load(url)            .placeholder(R.drawable.ic_launcher)            .error(R.drawable.ic_launcher)            .into(holder.iv);        </span></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h2>二.Picasso其他设置</h2><div>　　<strong>1.设置的默认图</strong></div><div><div class="cnblogs_code"><pre>.placeholder(R.drawable.default_bg)</pre></div><p>　　<strong>2.调用into的时候明确告诉你没有占位图设置。placeholder和noPlaceholder 不能同时应用在同一个请求上，否则会抛异常。</strong></p></div><div><div class="cnblogs_code"><pre>.noPlaceholder()</pre></div><p>　　<strong>3.加载图片出错的情况下显示的默认图</strong></p></div><div><div class="cnblogs_code"><pre>.error(R.drawable.error_iamge)</pre></div><p><strong>　　4.into 显示到ImageView 都会有一个简单的渐入过度效果,提升用户体验。如果不需要就设置noFade。默认会有渐变.</strong></p></div><div><div class="cnblogs_code"><pre>.noFade()</pre></div><p><strong>　　5.设置图片尺寸(Resize)</strong></p></div><div><div class="cnblogs_code"><pre>.resize(<span style="color: #800080;">400</span>,<span style="color: #800080;">200</span>) <span style="color: #008000;">//</span><span style="color: #008000;">该单位是pixels(px)</span>.resizeDimen(R.dimen.image_width,R.dimen.image_height) <span style="color: #008000;">//</span><span style="color: #008000;">resizeDimen(int targetWidthResId, int targetHeightResId) </span><span style="color: #008000;">//</span><span style="color: #008000;">该单位dimen里的属性，可以设置为dp值</span></pre></div><p><strong>　　6.设置缩放(Scale)</strong></p></div><div>　　　　只有当原始图片的尺寸大于我们指定的尺寸时，resize才起作用</div><div><div class="cnblogs_code"><pre>.resize(<span style="color: #800080;">4000</span>,<span style="color: #800080;">2000</span><span style="color: #000000;">).onlyScaleDown()</span></pre></div><p><strong>　　7.设置裁剪(Crop)</strong></p></div><div>&nbsp;　　　　<strong>7.1 centerCrop()</strong>充满ImageView 的边界，居中裁剪。ImageView 的ScaleType 也有这个属性。<br>&nbsp;<div class="cnblogs_code"><pre>.centerCrop()        </pre></div><p>　　　　<strong>7.2</strong> 上面的centerCrop是可能看不到全部图片的，如果你想让View将图片展示完全，可以用<strong>centerInside</strong>，但是如果图片尺寸小于View尺寸的话，是不能充满View边界的。</p><div class="cnblogs_code"><pre> .centerInside()</pre></div><p>　　　　<strong>7.3 fit</strong> 它会自动测量我们的View的大小，然后内部调用reszie方法把图片裁剪到View的大小，这就帮我们做了计算size和调用resize。</p><div class="cnblogs_code"><pre>  .fit()</pre></div><p>&nbsp;使用fit 还是会出现拉伸扭曲的情况，因此最好配合前面的centerCrop使用</p></div><div><div class="cnblogs_code"><pre><span style="color: #000000;">.fit().centerCrop()</span></pre></div><p>　　<strong>注意</strong>：</p></div><div>　　&nbsp;　　1，fit 只对ImageView 有效。<br>&nbsp;　　　　2，使用fit时，ImageView 宽和高不能为wrap_content,很好理解，因为它要测量宽高。<br>&nbsp;<br>　　<strong>8.图片旋转rotate(int degree)，该方法它是默认以（0，0）点旋转。</strong><br><div class="cnblogs_code"><pre>.rotate(<span style="color: #800080;">180</span><span style="color: #000000;">) </span><span style="color: #008000;">//</span><span style="color: #008000;">rotate(float degrees, float pivotX, float pivotY) 以(pivotX, pivotY)为原点旋转</span> .rotate(<span style="color: #800080;">180</span>,<span style="color: #800080;">100</span>,<span style="color: #800080;">100</span>)</pre></div><p><strong>&nbsp;9.转换器Transformation 添加依赖时候添加了Picasso Transformation的依赖。</strong></p><div class="cnblogs_code"><pre>compile <span style="color: #800000;">'</span><span style="color: #800000;">jp.wasabeef:picasso-transformations:2.1.0</span><span style="color: #800000;">'</span></pre></div><p>&nbsp;　　Transformation 这就是Picasso的一个非常强大的功能了，它允许你在load图片 -&gt; into ImageView 中间这个过成对图片做一系列的变换。比如你要做图片高斯模糊、添加圆角、做度灰处理、圆形图片等等都可以通过Transformation来完成。</p>&nbsp;具体使用可以自己继续探索，功能很多，</div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/Picasso.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_body&quot; class=
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 九 ) 图片加载框架---ImageLoader</title>
    <link href="https://freefuncode.github.io/2018/08/05/Android%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E4%B9%9D%E5%9B%BE%E7%89%87%E5%8A%A0%E8%BD%BD%E6%A1%86%E6%9E%B6-ImageLoader/"/>
    <id>https://freefuncode.github.io/2018/08/05/Android开源框架九图片加载框架-ImageLoader/</id>
    <published>2018-08-05T05:00:34.000Z</published>
    <updated>2019-09-06T13:20:05.764Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/ImageLoader.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <h2>一.引言</h2><p>　　Android的每一个App通常只拥有有限的系统资源，Android设备为每个App分配的内存大小是也是有上限的，并且，针对不同的设备配置所分配的内存大小也是不一样的，最小为16MB。图片会占用大量的内存，尤其是那些超清照片。所以图片加载时做容易造成安卓内存溢出的原因，而要解决这些问题还需要很多相关知识：<br>　　1、多线程下载，线程管理。<br>　　2、多级缓存架构设计和策略，内存缓存，磁盘缓存，缓存有效性处理。<br>　　3、图片压缩，特效处理，动画处理。<br>　　4、复杂网络情况下下载图片策略，例如弱网络等。<br>　　5、内存管理，lru 算法、对象引用、GC回收等优化。</p><p>　　Universal ImageLoader 是很早开源的图片缓存，在早期被很多应用使用。</p><p>　　Universal ImageLoader的GitHub地址：<a href="https://github.com/nostra13/Android-Universal-Image-Loader" target="_blank">https://github.com/nostra13/Android-Universal-Image-Loader</a><br>　　最近一次更新是在3年前,已经停止更新了。不推荐新项目中使用。</p><h2>二.基本使用　</h2><h3>　　1. 添加依赖</h3><div class="cnblogs_code"><pre>compile <span style="color: #800000;">'</span><span style="color: #800000;">com.nostra13.universalimageloader:universal-image-loader:1.9.5</span><span style="color: #800000;">'</span></pre></div><h3>　　2.Application初始化</h3><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">　　　　//</span><span style="color: #008000;"> 初始化参数</span>        ImageLoaderConfiguration config = <span style="color: #0000ff;">new</span><span style="color: #000000;"> ImageLoaderConfiguration.Builder(context)                .threadPriority(Thread.NORM_PRIORITY </span>- <span style="color: #800080;">2</span>)               <span style="color: #008000;">//</span><span style="color: #008000;"> 线程优先级</span>                .denyCacheImageMultipleSizesInMemory()                  <span style="color: #008000;">//</span><span style="color: #008000;"> 当同一个Uri获取不同大小的图片，缓存到内存时，只缓存一个。默认会缓存多个不同的大小的相同图片</span>                .discCacheFileNameGenerator(<span style="color: #0000ff;">new</span> Md5FileNameGenerator()) <span style="color: #008000;">//</span><span style="color: #008000;"> 将保存的时候的URI名称用MD5</span>                .tasksProcessingOrder(QueueProcessingType.LIFO)         <span style="color: #008000;">//</span><span style="color: #008000;"> 设置图片下载和显示的工作队列排序</span>                .writeDebugLogs()                                       <span style="color: #008000;">//</span><span style="color: #008000;"> 打印debug log</span><span style="color: #000000;">                .build();<pre><code>&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 全局初始化此配置&lt;/span&gt;ImageLoader.getInstance().init(config);&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><h3>　　3.基本使用</h3><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #000000;">imageLoader.displayImage(Constants.IMAGES[position],holder.iv,options);<p></p></span><span style="color: #0000ff;">private</span> DisplayImageOptions options = <span style="color: #0000ff;">new</span><span style="color: #000000;"> DisplayImageOptions.Builder()<br>            .showStubImage(R.drawable.atguigu_logo)          </span><span style="color: #008000;">//</span><span style="color: #008000;"> 设置图片下载期间显示的图片</span><br>            .showImageForEmptyUri(R.drawable.atguigu_logo)  <span style="color: #008000;">//</span><span style="color: #008000;"> 设置图片Uri为空或是错误的时候显示的图片</span><br>            .showImageOnFail(R.drawable.atguigu_logo)       <span style="color: #008000;">//</span><span style="color: #008000;"> 设置图片加载或解码过程中发生错误显示的图片</span><br>            .cacheInMemory(<span style="color: #0000ff;">true</span>)                        <span style="color: #008000;">//</span><span style="color: #008000;"> 设置下载的图片是否缓存在内存中</span><br>            .cacheOnDisk(<span style="color: #0000ff;">true</span>)                          <span style="color: #008000;">//</span><span style="color: #008000;"> 设置下载的图片是否缓存在SD卡中</span><br>            .displayer(<span style="color: #0000ff;">new</span> RoundedBitmapDisplayer(<span style="color: #800080;">20</span>))  <span style="color: #008000;">//</span><span style="color: #008000;"> 设置成圆角图片</span><br>            .build();                                   <span style="color: #008000;">//</span><span style="color: #008000;"> 创建配置过得DisplayImageOption对象;        </span></pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h2>三.拓展了解</h2><p>　　<strong>ImageLoaderConfiguration</strong>是针对图片缓存的全局配置，主要有线程类、缓存大小、磁盘大小、图片下载与解析、日志方面的配置。<br>　　<strong>ImageLoader</strong>是具体下载图片，缓存图片，显示图片的具体执行类，它有两个具体的方法displayImage(...)、loadImage(...)，但是其实最终他们的实现都是displayImage(...)。<br>　　<strong>DisplayImageOptions</strong>用于指导每一个Imageloader根据网络图片的状态（空白、下载错误、正在下载）显示对应的图片，是否将缓存加载到磁盘上，下载完后对图片进行怎么样的处理。</p><h4>　　1.ImageLoaderConfiguration的配置主要是全局性的配置，主要有线程类、缓存大小、磁盘大小、图片下载与解析、日志方面的配置。</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> ImageLoaderConfiguration config;    config </span>= <span style="color: #0000ff;">new</span> ImageLoaderConfiguration.Builder(context)<span style="color: #008000;">//</span><span style="color: #008000;"> 开始构建 ,图片加载配置</span>            .threadPriority(Thread.NORM_PRIORITY - <span style="color: #800080;">2</span>)<span style="color: #008000;">//</span><span style="color: #008000;"> 设置线程优先级</span>            .threadPoolSize(<span style="color: #800080;">3</span>)<span style="color: #008000;">//</span><span style="color: #008000;"> 线程池内加载的数量 ;减少配置之中线程池的大小，(.threadPoolSize).推荐1-5；</span>            .denyCacheImageMultipleSizesInMemory()<span style="color: #008000;">//</span><span style="color: #008000;"> 设置加载的图片有多样的</span>            .tasksProcessingOrder(QueueProcessingType.LIFO)<span style="color: #008000;">//</span><span style="color: #008000;"> 图片加载任务顺序</span>            .memoryCache(<span style="color: #0000ff;">new</span> WeakMemoryCache())<span style="color: #008000;">//</span><span style="color: #008000;">使用.memoryCache(new WeakMemoryCache())，不要使用.cacheInMemory();</span>            .memoryCacheExtraOptions(<span style="color: #800080;">480</span>, <span style="color: #800080;">800</span>) <span style="color: #008000;">//</span><span style="color: #008000;"> 即保存的每个缓存文件的最大长宽</span>            .memoryCacheSizePercentage(<span style="color: #800080;">60</span>)<span style="color: #008000;">//</span><span style="color: #008000;"> 图片内存占应用的60%；</span>             .diskCacheFileNameGenerator(<span style="color: #0000ff;">new</span> HashCodeFileNameGenerator())<span style="color: #008000;">//</span><span style="color: #008000;">使用HASHCODE对UIL进行加密命名</span>            .diskCacheFileNameGenerator(<span style="color: #0000ff;">new</span> Md5FileNameGenerator())<span style="color: #008000;">//</span><span style="color: #008000;"> 将保存的时候的URI名称用MD5 加密</span>            .diskCacheSize(<span style="color: #800080;">50</span> * <span style="color: #800080;">1024</span> * <span style="color: #800080;">1024</span>) <span style="color: #008000;">//</span><span style="color: #008000;"> 缓存设置大小为50 Mb</span>            .diskCache(<span style="color: #0000ff;">new</span> UnlimitedDiskCache(cacheDir))<span style="color: #008000;">//</span><span style="color: #008000;"> 自定义缓存路径</span>            .diskCacheFileCount(<span style="color: #800080;">100</span>) <span style="color: #008000;">//</span><span style="color: #008000;"> 缓存的文件数量</span>            .denyCacheImageMultipleSizesInMemory()<span style="color: #008000;">//</span><span style="color: #008000;"> 自动缩放</span>            .imageDownloader(<span style="color: #0000ff;">new</span> BaseImageDownloader(context, <span style="color: #800080;">5</span> * <span style="color: #800080;">1000</span>, <span style="color: #800080;">30</span> * <span style="color: #800080;">1000</span>)) <span style="color: #008000;">//</span><span style="color: #008000;"> connectTimeout (5 s), readTimeout (30 s)超时时间</span>            .memoryCacheExtraOptions(<span style="color: #800080;">480</span>, <span style="color: #800080;">800</span>)<span style="color: #008000;">//</span><span style="color: #008000;">设置缓存图片时候的宽高最大值，默认为屏幕宽高;保存的每个缓存文件的最大长宽</span>            .defaultDisplayImageOptions(options)<span style="color: #008000;">//</span><span style="color: #008000;"> 如果需要打开缓存机制，需要自己builde一个option,可以是DisplayImageOptions.createSimple()</span>            .writeDebugLogs() <span style="color: #008000;">//</span><span style="color: #008000;"> Remove for release app</span>            .build();构建完成（参数可以不用设置全，根据需要来配置）        </pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h4>　　2.每一个ImageLoader.displayImage(...)都可以使用Display Options。</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #0000ff;">    private</span><span style="color: #000000;"> DisplayImageOptions options;    options </span>= <span style="color: #0000ff;">new</span> DisplayImageOptions.Builder()<span style="color: #008000;">//</span><span style="color: #008000;"> 开始构建, 显示的图片的各种格式</span>                .resetViewBeforeLoading(<span style="color: #0000ff;">true</span>)<span style="color: #008000;">//</span><span style="color: #008000;"> 设置图片在下载前是否重置，复位</span>                .cacheInMemory(<span style="color: #0000ff;">true</span>)<span style="color: #008000;">//</span><span style="color: #008000;"> 开启内存缓存</span>                .cacheOnDisk(<span style="color: #0000ff;">true</span>) <span style="color: #008000;">//</span><span style="color: #008000;"> 开启硬盘缓存</span>                 .displayer(<span style="color: #0000ff;">new</span> RoundedBitmapDisplayer(<span style="color: #800080;">20</span>))<span style="color: #008000;">//</span><span style="color: #008000;"> 是否设置为圆角，弧度为多少；避免使用RoundedBitmapDisplayer.他会创建新的ARGB_8888格式的Bitmap对象；</span>                .displayer(<span style="color: #0000ff;">new</span> FadeInBitmapDisplayer(<span style="color: #800080;">100</span>))<span style="color: #008000;">//</span><span style="color: #008000;"> 是否图片加载好后渐入的动画时间</span>                .displayer(<span style="color: #0000ff;">new</span> SimpleBitmapDisplayer())<span style="color: #008000;">//</span><span style="color: #008000;"> 正常显示一张图片　</span>                .bitmapConfig(Bitmap.Config.RGB_565)<span style="color: #008000;">//</span><span style="color: #008000;"> 设置图片的解码类型;使用.bitmapConfig(Bitmap.config.RGB_565)代替ARGB_8888;</span>                .considerExifParams(<span style="color: #0000ff;">true</span>)<span style="color: #008000;">//</span><span style="color: #008000;"> 是否考虑JPEG图像EXIF参数（旋转，翻转）</span>                .imageScaleType(ImageScaleType.EXACTLY)<span style="color: #008000;">//</span><span style="color: #008000;"> 缩放级别</span>                .imageScaleType(ImageScaleType.IN_SAMPLE_INT)<span style="color: #008000;">//</span><span style="color: #008000;">这两种配置缩放都推荐</span>                .build();<span style="color: #008000;">//</span><span style="color: #008000;"> 构建完成（参数可以不用设置全，根据需要来配置）</span>    ImageLoader.getInstance().init(config);//初始化完成</pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h4>　　3.ImageLoader是显示图片的具体执行类，它有两个具体的方法displayImage loadImage(...)</h4><div class="cnblogs_code"><pre>ImageLoader.getInstance().displayImage(url, imageView, options);    </pre></div><p>&nbsp;</p><p>　</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/ImageLoader.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_body&quot; cl
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 七 ) 事件总线---EventBus</title>
    <link href="https://freefuncode.github.io/2018/08/02/Android%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E4%B8%83%E4%BA%8B%E4%BB%B6%E6%80%BB%E7%BA%BF-EventBus/"/>
    <id>https://freefuncode.github.io/2018/08/02/Android开源框架七事件总线-EventBus/</id>
    <published>2018-08-02T14:54:14.000Z</published>
    <updated>2019-09-06T13:20:05.764Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/eventbus.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <p>　　</p><h2 style="display: inline !important;">一.引言</h2><div><em id="__mceDel">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;</em>与四大组件之一的BroadCast广播比较，广播主要监听系统级事件，比如网络切换，电池电量等属于进程间的通信，EventBus 是进程内的通信。<br>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp;了解BroadCast 可以查看该文章：<a id="post_title_link_9045362" href="https://www.cnblogs.com/bugzone/p/BroadcastReceiver.html" target="_blank">Android 四大组件 (三) BroadcastReceiver 介绍</a></div><h2>二.基本使用</h2><div>　　引入类库:<div class="cnblogs_code"><pre>compile <span style="color: #800000;">'</span><span style="color: #800000;">com.jakewharton:butterknife:8.5.1</span><span style="color: #800000;">'</span></pre></div><p>　　页面打开时候初始化并注册EventBus</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">//</span><span style="color: #008000;">初始化</span><span style="color: #000000;"> @Override    </span><span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onCreate(Bundle savedInstanceState) {        super.onCreate(savedInstanceState);        setContentView(R.layout.activity_main);   　　　　</span><span style="color: #008000;">//</span><span style="color: #008000;">注册 EventBus</span>  　　　　EventBus.getDefault().register(<span style="color: #0000ff;">this</span><span style="color: #000000;">); }</span></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>　　页面销毁时候解除EventBus注册</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">//</span><span style="color: #008000;">销毁 EventBus</span><span style="color: #000000;"> @Override </span><span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onDestroy() {  super.onDestroy();  EventBus.getDefault().unregister(</span><span style="color: #0000ff;">this</span><span style="color: #000000;">); }</span></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>　　发布事件 publish</p><div class="cnblogs_code"><pre><span style="color: #008000;">//</span><span style="color: #008000;">发布事件</span> EventBus.getDefault().post(<span style="color: #0000ff;">new</span> EventBean(<span style="color: #800000;">"</span><span style="color: #800000;">我来自第二个页面的触发</span><span style="color: #800000;">"</span>));</pre></div><p>　　接受者 subscribe.注意方法名可以随便取,但是参数类型与publish发布者的保持一致. 这里是EventBean</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">//</span><span style="color: #008000;">订阅者事件，处理事件反馈的消息</span><span style="color: #000000;"> @Subscribe </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> OnEvent(EventBean bean) {  </span><span style="color: #008000;">//</span><span style="color: #008000;">拿到发布者传过来的event事件带的消息</span>  String msgStr =<span style="color: #000000;"> bean.getMsg();  </span><span style="color: #008000;">//</span><span style="color: #008000;">UI打印出拿到的消息</span><span style="color: #000000;">  tvFirst.setText(msgStr); }</span></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>&nbsp;</p><h2>三.ThreadMode 分析</h2><h3>　　五种 ThreadMode介绍　</h3><div class="cnblogs_Highlighter sh-gutter"><div><div id="highlighter_548763" class="syntaxhighlighter  csharp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div><div class="line number7 index6 alt2">7</div><div class="line number8 index7 alt1">8</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">　　　　ThreadMode.MAIN 订阅者将在Android的主线程（有时称为UI线程）中被调用。如果发布线程是主线程，则将直接调用事件处理程序方法（与ThreadMode.POSTING中描述的同步）。使用此模式的事件处理程序必须快速返回以避免阻塞主线程.</code></div><div class="line number2 index1 alt1"><code class="csharp plain">　　　　ThreadMode.MAIN_ORDERED 订阅者将在Android的主线程中被调用。该事件总是排队等待以后传递给订阅者。这给事件处理一个更严格和更一致的顺序（因此名字MAIN_ORDERED）。例如，如果使用MAIN线程模式在事件处理程序中发布另一个事件，</code></div><div class="line number3 index2 alt2"><code class="csharp plain">则第二个事件处理程序将在第一个事件处理程序之前完成（因为它被同步调用 - 将其与方法调用进行比较）。使用MAIN_ORDERED，第一个事件处理程序将完成，然后第二个将在稍后的时间点被调用（只要主线程有能力）.</code></div><div class="line number4 index3 alt1"><code class="csharp plain">　　　　ThreadMode.BACKGROUND 订阅者将在后台线程中被调用。如果发布线程不是主线程，则会在发布线程中直接调用事件处理程序方法。如果发布线程是主线程，则EventBus将使用一个后台线程来按顺序发送所有事件。使用这种模式的事件处理程序应该尽快返回以避免阻塞后台线程。</code></div><div class="line number5 index4 alt2"><code class="csharp plain">　　　　ThreadMode.ASYNC 事件处理程序方法在单独的线程中调用。这总是独立于发布线程和主线程。发布事件永远不会等待使用此模式的事件处理程序方法。事件处理程序方法应该使用这种模式，如果它们的执行可能需要一些时间，</code></div><div class="line number6 index5 alt1"><code class="csharp plain">例如网络访问。避免同时触发大量长时间运行的异步处理程序方法来限制并发线程的数量。EventBus使用线程池有效地重用已完成异步事件处理程序通知中的线程。</code></div><div class="line number7 index6 alt2"><code class="csharp plain">　　　　ThreadMode.POSTING这是默认的。订阅者将在发布该事件的同一个线程中被调用。事件传递是同步完成的，所有订阅者一旦发布完成就被调用。这个ThreadMode意味着最小的开销，因为它避免了完全的线程切换。</code></div><div class="line number8 index7 alt1"><code class="csharp plain">因此，对于已知完成的简单任务而言，这是推荐的模式，其时间很短，不需要主线程。使用这种模式的事件处理程序应该快速返回以避免阻塞发布线程，这可能是主线程。</code></div></div></td></tr></tbody></table></div></div></div><h3>　　源码查看下五种ThreadMode不同处理方式:</h3></div><div><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span> postToSubscription(Subscription subscription, Object <span style="color: #0000ff;">event</span><span style="color: #000000;">, boolean isMainThread) {        </span><span style="color: #0000ff;">switch</span><span style="color: #000000;"> (subscription.subscriberMethod.threadMode) {   　　　　　　</span><span style="color: #008000;">//</span><span style="color: #008000;">发送和订阅者在同一线程内</span>            <span style="color: #0000ff;">case</span><span style="color: #000000;"> POSTING:                invokeSubscriber(subscription, </span><span style="color: #0000ff;">event</span><span style="color: #000000;">);                </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;   　　　　</span><span style="color: #008000;">//</span><span style="color: #008000;">主线程</span>            <span style="color: #0000ff;">case</span><span style="color: #000000;"> MAIN:                </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (isMainThread) {                    invokeSubscriber(subscription, </span><span style="color: #0000ff;">event</span><span style="color: #000000;">);                } </span><span style="color: #0000ff;">else</span><span style="color: #000000;"> {                    mainThreadPoster.enqueue(subscription, </span><span style="color: #0000ff;">event</span><span style="color: #000000;">);                }                </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;   　　　　　　</span><span style="color: #008000;">//</span>             <span style="color: #0000ff;">case</span><span style="color: #000000;"> MAIN_ORDERED:                </span><span style="color: #0000ff;">if</span> (mainThreadPoster != <span style="color: #0000ff;">null</span><span style="color: #000000;">) {                    mainThreadPoster.enqueue(subscription, </span><span style="color: #0000ff;">event</span><span style="color: #000000;">);                } </span><span style="color: #0000ff;">else</span><span style="color: #000000;"> {                    </span><span style="color: #008000;">//</span><span style="color: #008000;"> temporary: technically not correct as poster not decoupled from subscriber</span>                    invokeSubscriber(subscription, <span style="color: #0000ff;">event</span><span style="color: #000000;">);                }                </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;   　　　　</span><span style="color: #008000;">//</span><span style="color: #008000;">后台，不能并发处理</span>            <span style="color: #0000ff;">case</span><span style="color: #000000;"> BACKGROUND:                </span><span style="color: #0000ff;">if</span><span style="color: #000000;"> (isMainThread) {                    backgroundPoster.enqueue(subscription, </span><span style="color: #0000ff;">event</span><span style="color: #000000;">);                } </span><span style="color: #0000ff;">else</span><span style="color: #000000;"> {                    invokeSubscriber(subscription, </span><span style="color: #0000ff;">event</span><span style="color: #000000;">);                }                </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;   　　　　　　</span><span style="color: #008000;">//</span><span style="color: #008000;">子线程 异步并发处理 </span>            <span style="color: #0000ff;">case</span><span style="color: #000000;"> ASYNC:                asyncPoster.enqueue(subscription, </span><span style="color: #0000ff;">event</span><span style="color: #000000;">);                </span><span style="color: #0000ff;">break</span><span style="color: #000000;">;            </span><span style="color: #0000ff;">default</span><span style="color: #000000;">:                </span><span style="color: #0000ff;">throw</span> <span style="color: #0000ff;">new</span> IllegalStateException(<span style="color: #800000;">"</span><span style="color: #800000;">Unknown thread mode: </span><span style="color: #800000;">"</span> +<span style="color: #000000;"> subscription.subscriberMethod.threadMode);        }    }</span></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div>&nbsp;<h2>四.粘性事件</h2>&nbsp;　　简单说就是: 发送事件之后再订阅该事件也能收到该事件。同样Android 中也有同样的粘性事件机制,如 粘性广播(Sticky Broadcast).</div><h3>&nbsp;　　粘性事件使用场景:</h3><p>　　一些事件进行信息感兴趣的事件后发布。 例如,一个事件信号,一些初始化完成。 或者如果你有传感器位置数据和你想抓住最近的值。 而不是实现自己的缓存,您可以使用黏性的事件。 EventBus保持过去的事件的特定类型在内存中。 黏性的事件可以交付给用户或显式查询。 因此,你不需要任何特殊的逻辑来考虑可用的数据。</p><div><h3>&nbsp;　　粘性使用示例：</h3><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">//</span><span style="color: #008000;"> 1创建一个粘性事件类</span> <span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> StickyEvent {  </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> String msg;  </span><span style="color: #0000ff;">public</span><span style="color: #000000;"> StickyEvent(String msg) {   </span><span style="color: #0000ff;">this</span>.msg =<span style="color: #000000;"> msg;  } }</span></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><div class="cnblogs_code"><pre> <span style="color: #008000;">//</span><span style="color: #008000;"> 2 发送粘性事件</span> EventBus.getDefault().postSticky(<span style="color: #0000ff;">new</span> StickyEvent(<span style="color: #800000;">"</span><span style="color: #800000;">我是粘性事件</span><span style="color: #800000;">"</span>));</pre></div><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">　　//</span><span style="color: #008000;"> 3 接收粘性事件</span>    @Subscribe(threadMode = ThreadMode.MAIN, sticky = <span style="color: #0000ff;">true</span><span style="color: #000000;">)    </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> StickyEventBus(StickyEvent <span style="color: #0000ff;">event</span><span style="color: #000000;">){        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 显示接收的数据</span>        tv_eventbus_send_result.setText(<span style="color: #0000ff;">event</span><span style="color: #000000;">.msg);    }</span></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">//</span><span style="color: #008000;"> 4.接收粘性事件数据按钮的点击事件处理</span> bt_eventbus_send_sticky.setOnClickListener(<span style="color: #0000ff;">new</span><span style="color: #000000;"> View.OnClickListener() {  　　@Override  　　</span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onClick(View v) {   　　</span><span style="color: #008000;">//</span><span style="color: #008000;">true第一次点击，防止重复注册</span>   　　　　<span style="color: #0000ff;">if</span><span style="color: #000000;">(isFirstFlag) {    　　　　　　isFirstFlag </span>= <span style="color: #0000ff;">false</span><span style="color: #000000;">;    　　　　　　</span><span style="color: #008000;">//</span><span style="color: #008000;"> 4 注册</span>    　　　　　　EventBus.getDefault().register(EventBusSendActivity.<span style="color: #0000ff;">this</span><span style="color: #000000;">);   　　　　}  　　} });</span></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #000000;">@Override    </span><span style="color: #0000ff;">protected</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onDestroy() {        super.onDestroy();        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 5 解注册</span><span style="color: #000000;">        EventBus.getDefault().removeAllStickyEvents();        EventBus.getDefault().unregister(EventBusSendActivity.</span><span style="color: #0000ff;">this</span><span style="color: #000000;">);    }</span></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div>&nbsp;</div></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/eventbus.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_body&quot; class
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 六 ) Volley --- Google的轻量级网络通信框架</title>
    <link href="https://freefuncode.github.io/2018/08/01/Android%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%85%ADVolley-Google%E7%9A%84%E8%BD%BB%E9%87%8F%E7%BA%A7%E7%BD%91%E7%BB%9C%E9%80%9A%E4%BF%A1%E6%A1%86%E6%9E%B6/"/>
    <id>https://freefuncode.github.io/2018/08/01/Android开源框架六Volley-Google的轻量级网络通信框架/</id>
    <published>2018-07-31T23:36:18.000Z</published>
    <updated>2019-09-06T13:20:05.780Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/Volley.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <h2>一.Volley介绍 　　</h2><p>　　2013年Google I/O大会上推出的一个新的Android网络通信框架,目标是将HTTP的通信操作再进行简单化,除了简单易用之外，Volley在性能方面也进行了大幅度的调整，它的设计目标就是非常适合去进行数据量不大，但通信频繁的网络操作，而对于大数据量的网络操作，比如说下载文件等，Volley的表现就会非常糟糕。不过谷歌已经停止更新Volley了，现在OkHttp成为新一代网络通信的新宠。</p><h2>二.Volley使用</h2><h4>1.导入jar包</h4><p>如果只是用于学习,可以通过gradle引用&nbsp;compile 'com.mcxiaoke.volley:library:1.0.19'&nbsp;了解下.但是如果用于项目中,最好下载Google官方的jar包.</p><div class="cnblogs_Highlighter sh-gutter"><div><div id="highlighter_13119" class="syntaxhighlighter  csharp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">compile </code><code class="csharp string">'com.mcxiaoke.volley:library:1.0.19'</code><code class="csharp plain">　　</code></div></div></td></tr></tbody></table></div></div></div><h4>2.授权</h4><div class="cnblogs_code"><pre>&lt;uses-permission android:name=<span style="color: #800000;">"</span><span style="color: #800000;">android.permission.INTERNET</span><span style="color: #800000;">"</span> /&gt;</pre></div><h4>3.使用JsonObjectRequest get请求方式示例</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>        <span style="color: #008000;">//</span><span style="color: #008000;">1.创建一个请求队列RequestQueue     </span>        RequestQueue queue= Volley.newRequestQueue(<span style="color: #0000ff;">this</span><span style="color: #000000;">);        </span><span style="color: #008000;">//</span><span style="color: #008000;">2.创建StringRequest对象 </span>        JsonObjectRequest request=<span style="color: #0000ff;">new</span> JsonObjectRequest(url, <span style="color: #0000ff;">new</span> Response.Listener&lt;JSONObject&gt;<span style="color: #000000;">() {            @Override            </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onResponse(JSONObject jsonObject) {                </span><span style="color: #008000;">//</span><span style="color: #008000;">接收返回数据</span>                Log.e(<span style="color: #800000;">"</span><span style="color: #800000;">success</span><span style="color: #800000;">"</span><span style="color: #000000;">,jsonObject.toString());            }        }, </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> Response.ErrorListener() {            @Override            </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onErrorResponse(VolleyError volleyError) {<pre><code>    }});&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;3.将请求对象添加到请求队列中&lt;/span&gt;queue.add(request);&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><p>　　同样还有一些其他请求:ClearCacheRequest,ImageRequest,JsonArrayRequest,JsonRequest,StringRequest 用法一样.</p><p>　　　　　　　　<img src="https://images2018.cnblogs.com/blog/612293/201807/612293-20180731105814344-1488596964.jpg" alt></p><hr><p>&nbsp;</p><p> 　　　　　　<strong>1.ClearCacheRequest</strong> :A synthetic request used for clearing the cache. 用于清除缓存请求类<br>        　　　　　　<strong>2.ImageRequest</strong> :A canned request for getting an image at a given URL and calling back with a decoded Bitmap. 通过Url获取对应解码位图decoded BitMap 请求类<br>        　　　　　　<strong>3.JsonArrayRequest</strong> :A request for retrieving a {@link JSONArray} response body at a given URL. 通过Url返回一个{@ Link JSONArray}Json数组请求类<br>        　　　　　　<strong>4.JsonObjectRequest</strong> :A request for retrieving a {@link JSONObject} response body at a given URL, allowing for an optional {@link JSONObject} to be passed in as part of the request body. 可以通过Url返回一个{@link JSONObject},也可以使用{@link JSONObject}当做请求Request的传递参数.<br>        　　　　　　<strong>5.JsonRequest</strong> :A request for retrieving a T type response body at a given URL that also optionally sends along a JSON body in the request specified. 通过Url返回一个定义的泛型T ,也可以使用JSON当做请求Request的传递参数的类<br>        　　　　　　<strong>6.StringRequest</strong> :A canned request for retrieving the response body at a given URL as a String. 通过Url返回一个String字符串请求类</p><hr><h4><br>    　　4.使用JsonObjectRequest post请求方式示例</h4><p>    　　Post请求,只需要在Request请求里,添加一个参数Request.Method.POST : new JsonObjectRequest(Request.Method.POST,url, new Response.Listener&lt;JSONObject&gt;() {...});其他部分一样.</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>RequestQueue queue= Volley.newRequestQueue(<span style="color: #0000ff;">this</span><span style="color: #000000;">);        JsonObjectRequest request</span>=<span style="color: #0000ff;">new</span> JsonObjectRequest(Request.Method.POST,url, <span style="color: #0000ff;">new</span> Response.Listener&lt;JSONObject&gt;<span style="color: #000000;">() {            @Override            </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onResponse(JSONObject jsonObject) {                </span><span style="color: #008000;">//</span><span style="color: #008000;">接收返回数据</span>                Log.e(<span style="color: #800000;">"</span><span style="color: #800000;">success</span><span style="color: #800000;">"</span><span style="color: #000000;">,jsonObject.toString());            }        }, </span><span style="color: #0000ff;">new</span><span style="color: #000000;"> Response.ErrorListener() {            @Override            </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onErrorResponse(VolleyError volleyError) {<pre><code>    }});queue.add(request);&lt;/span&gt;&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><p> 　　通过Request.Method.能看到Volley支持的一些请求方式: <br>         　　　　　　　　　　<img src="https://images2018.cnblogs.com/blog/612293/201807/612293-20180731105752291-1794437800.jpg" alt><br>    </p><h4>　　5.HurlStack 与&nbsp;HttpClientStack 介绍</h4><p>　　&nbsp;Volley是官方出的，volley在设计的时候是将具体的请求客户端做了下封装，也就是说可以支持HttpUrlConnection, HttpClient.当然也可以自己封装支持OkHttp.</p><p>　　Volley.java类</p><p>　　</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #0000ff;">　　if</span> (stack == <span style="color: #0000ff;">null</span><span style="color: #000000;">) {            </span><span style="color: #0000ff;">if</span> (Build.VERSION.SDK_INT &gt;= <span style="color: #800080;">9</span><span style="color: #000000;">) {                </span><span style="color: #008000;">//</span><span style="color: #008000;">HttpURLConnection 请求方式</span>                stack = <span style="color: #0000ff;">new</span><span style="color: #000000;"> HurlStack();            } </span><span style="color: #0000ff;">else</span><span style="color: #000000;"> {                </span><span style="color: #008000;">//</span><span style="color: #008000;"> Prior to Gingerbread, HttpUrlConnection was unreliable.                </span><span style="color: #008000;">//</span><span style="color: #008000;"> See: </span><span style="color: #008000; text-decoration: underline;">http://android-developers.blogspot.com/2011/09/androids-http-clients.html</span>                <span style="color: #008000;">//</span><span style="color: #008000;">HttpClient 请求方式</span>                stack = <span style="color: #0000ff;">new</span><span style="color: #000000;"> HttpClientStack(AndroidHttpClient.newInstance(userAgent));            }        }</span></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>然后具体看下&nbsp;HurlStack.java 里的HttpUrlConnection请求封装.</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>　　/**     *<span style="color: #000000;"> An {@link HttpStack} based on {@link HttpURLConnection}.     </span>*/<span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> HurlStack implements HttpStack {<pre><code>&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; final String HEADER_CONTENT_TYPE = &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Content-Type&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;* * Create an {@link HttpURLConnection} for the specified {@code url}. &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;protected&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HttpURLConnection createConnection(URL url) throws IOException {    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (HttpURLConnection) url.openConnection();}&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;* * Opens an {@link HttpURLConnection} with parameters. * @param url * @return an open connection * @throws IOException &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; HttpURLConnection openConnection(URL url, Request&amp;lt;?&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; request) throws IOException {    HttpURLConnection connection &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; createConnection(url);    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; timeoutMs =&lt;span style=&quot;color: #000000;&quot;&gt; request.getTimeoutMs();    connection.setConnectTimeout(timeoutMs);    connection.setReadTimeout(timeoutMs);    connection.setUseCaches(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;false&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);    connection.setDoInput(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);    &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; use caller-provided custom SslSocketFactory, if any, for HTTPS&lt;/span&gt;    &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;https&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;.equals(url.getProtocol()) &amp;amp;&amp;amp; mSslSocketFactory != &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) {        ((HttpsURLConnection)connection).setSSLSocketFactory(mSslSocketFactory);    }    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; connection;}@SuppressWarnings(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;deprecation&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; package &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; setConnectionParametersForRequest(HttpURLConnection connection,        Request&lt;/span&gt;&amp;lt;?&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; request) throws IOException, AuthFailureError {    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;switch&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (request.getMethod()) {        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Method.DEPRECATED_GET_OR_POST:            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; This is the deprecated way that needs to be handled for backwards compatibility.            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; If the request&apos;s post body is null, then the assumption is that the request is            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; GET.  Otherwise, it is assumed that the request is a POST.&lt;/span&gt;            &lt;span style=&quot;color: #0000ff;&quot;&gt;byte&lt;/span&gt;[] postBody =&lt;span style=&quot;color: #000000;&quot;&gt; request.getPostBody();            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (postBody != &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) {                &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; Prepare output. There is no need to set Content-Length explicitly,                &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; since this is handled by HttpURLConnection using the size of the prepared                &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; output stream.&lt;/span&gt;                connection.setDoOutput(&lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);                connection.setRequestMethod(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;POST&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);                connection.addRequestProperty(HEADER_CONTENT_TYPE,                        request.getPostBodyContentType());                DataOutputStream &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;out&lt;/span&gt; = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; DataOutputStream(connection.getOutputStream());                &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.write(postBody);                &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.close();            }            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;break&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Method.GET:            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; Not necessary to set the request method because connection defaults to GET but            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; being explicit here.&lt;/span&gt;            connection.setRequestMethod(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;GET&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;break&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Method.DELETE:            connection.setRequestMethod(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;DELETE&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;break&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Method.POST:            connection.setRequestMethod(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;POST&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);            addBodyIfExists(connection, request);            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;break&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Method.PUT:            connection.setRequestMethod(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;PUT&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);            addBodyIfExists(connection, request);            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;break&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Method.HEAD:            connection.setRequestMethod(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;HEAD&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;break&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Method.OPTIONS:            connection.setRequestMethod(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;OPTIONS&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;break&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Method.TRACE:            connection.setRequestMethod(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;TRACE&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;break&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Method.PATCH:            connection.setRequestMethod(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;PATCH&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);            addBodyIfExists(connection, request);            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;break&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;default&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Unknown method type.&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);    }}    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; addBodyIfExists(HttpURLConnection connection, Request&amp;lt;?&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; request)        throws IOException, AuthFailureError {        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;byte&lt;/span&gt;[] body =&lt;span style=&quot;color: #000000;&quot;&gt; request.getBody();        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (body != &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) {            connection.setDoOutput(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;true&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);            connection.addRequestProperty(HEADER_CONTENT_TYPE, request.getBodyContentType());            DataOutputStream &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;out&lt;/span&gt; = &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; DataOutputStream(connection.getOutputStream());            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.write(body);            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;out&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.close();        }    }</code></pre><p>}    </p></span></pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>在看看HttpClientStack.java 里的HttpClient的封装.&nbsp; 注意下哈,<strong>HttpClient 已经在Android 6.0 删除</strong>.</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #008000;">/*</span><span style="color: #008000;">* * An HttpStack that performs request over an {@link HttpClient}. </span><span style="color: #008000;">*/</span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> HttpClientStack implements HttpStack {    </span><span style="color: #0000ff;">protected</span><span style="color: #000000;"> final HttpClient mClient;<pre><code>&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;private&lt;/span&gt; final &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; String HEADER_CONTENT_TYPE = &lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Content-Type&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;* * Creates the appropriate subclass of HttpUriRequest for passed in request. &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;@SuppressWarnings(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;deprecation&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;/*&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; protected &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;*/&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;static&lt;/span&gt; HttpUriRequest createHttpRequest(Request&amp;lt;?&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; request,        Map&lt;/span&gt;&amp;lt;String, String&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt; additionalHeaders) throws AuthFailureError {    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;switch&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; (request.getMethod()) {        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Method.DEPRECATED_GET_OR_POST: {            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; This is the deprecated way that needs to be handled for backwards compatibility.            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; If the request&apos;s post body is null, then the assumption is that the request is            &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; GET.  Otherwise, it is assumed that the request is a POST.&lt;/span&gt;            &lt;span style=&quot;color: #0000ff;&quot;&gt;byte&lt;/span&gt;[] postBody =&lt;span style=&quot;color: #000000;&quot;&gt; request.getPostBody();            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt; (postBody != &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) {                HttpPost postRequest &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HttpPost(request.getUrl());                postRequest.addHeader(HEADER_CONTENT_TYPE, request.getPostBodyContentType());                HttpEntity entity;                entity &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; ByteArrayEntity(postBody);                postRequest.setEntity(entity);                &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; postRequest;            } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {                &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HttpGet(request.getUrl());            }        }        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Method.GET:            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HttpGet(request.getUrl());        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Method.DELETE:            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HttpDelete(request.getUrl());        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Method.POST: {            HttpPost postRequest &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HttpPost(request.getUrl());            postRequest.addHeader(HEADER_CONTENT_TYPE, request.getBodyContentType());            setEntityIfNonEmptyBody(postRequest, request);            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; postRequest;        }        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Method.PUT: {            HttpPut putRequest &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HttpPut(request.getUrl());            putRequest.addHeader(HEADER_CONTENT_TYPE, request.getBodyContentType());            setEntityIfNonEmptyBody(putRequest, request);            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; putRequest;        }        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Method.HEAD:            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HttpHead(request.getUrl());        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Method.OPTIONS:            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HttpOptions(request.getUrl());        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Method.TRACE:            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HttpTrace(request.getUrl());        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;case&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Method.PATCH: {            HttpPatch patchRequest &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; HttpPatch(request.getUrl());            patchRequest.addHeader(HEADER_CONTENT_TYPE, request.getBodyContentType());            setEntityIfNonEmptyBody(patchRequest, request);            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; patchRequest;        }        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;default&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;:            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;throw&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; IllegalStateException(&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;Unknown request method.&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);    }}</code></pre><p>}</p></span></pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>&nbsp;</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/Volley.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_body&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 五 ) xUtils --- Android 里的 ORM IOC聚合型框架</title>
    <link href="https://freefuncode.github.io/2018/07/30/Android%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E4%BA%94xUtils-Android%E9%87%8C%E7%9A%84ORM-IOC%E8%81%9A%E5%90%88%E5%9E%8B%E6%A1%86%E6%9E%B6/"/>
    <id>https://freefuncode.github.io/2018/07/30/Android开源框架五xUtils-Android里的ORM-IOC聚合型框架/</id>
    <published>2018-07-30T15:55:54.000Z</published>
    <updated>2019-09-06T13:20:05.764Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/Xutils.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <p>　　xUtils同Afinal一样属于聚合型框架, 大而全，但是越容易牵一发而动全身。所以不推荐使用,只做了解即可.应付手头临时项目.</p><p>　　<a id="post_title_link_9392534" href="https://www.cnblogs.com/bugzone/p/afinal.html" target="_blank">Android 开源框架 ( 四 ) Afinal --- Android 里的 ORM IOC聚合型框架</a></p><h2>一.Xutils 介绍</h2><p>　　Xutils是基于afinal开发的，但是比afinal稳定性提高了不少.xUtils 最初源于Afinal框架，进行了大量重构，使得xUtils支持大文件上传，更全面的http请求协议支持(10种谓词)，拥有更加灵活的ORM，更多的事件注解支持且不受混淆影响...<br>　　xUitls最低兼容android 2.2.</p><h3>　　XUtils四大模块:&nbsp;</h3><div class="cnblogs_Highlighter sh-gutter"><div><div id="highlighter_80610" class="syntaxhighlighter  csharp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">DbManager&nbsp; 数据库访问接口&lt;br&gt;　　　　android中的orm框架，一行代码就可以进行增删改查；</code></div><div class="line number2 index1 alt1"><code class="csharp plain">　　　　支持事务，默认关闭；</code></div><div class="line number3 index2 alt2"><code class="csharp plain">　　　　可通过注解自定义表名，列名，外键，唯一性约束，NOT NULL约束，CHECK约束等（需要混淆的时候请注解表名和列名）；</code></div><div class="line number4 index3 alt1"><code class="csharp plain">　　　　支持绑定外键，保存实体时外键关联实体自动保存或更新；</code></div><div class="line number5 index4 alt2"><code class="csharp plain">　　　　自动加载外键关联实体，支持延时加载；</code></div><div class="line number6 index5 alt1"><code class="csharp plain">　　　　支持链式表达查询，更直观的查询语义，参考下面的介绍或sample中的例子。　</code></div></div></td></tr></tbody></table></div></div></div><div class="cnblogs_Highlighter sh-gutter"><div><div id="highlighter_496238" class="syntaxhighlighter  csharp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">ViewInjector view注入接口</code></div><div class="line number2 index1 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">android中的ioc框架，完全注解方式就可以进行UI，资源和事件绑定；</code></div><div class="line number3 index2 alt2"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">新的事件绑定方式，使用混淆工具混淆后仍可正常工作；</code></div><div class="line number4 index3 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">目前支持常用的20种事件绑定，参见ViewCommonEventListener类和包com.lidroid.xutils.view.annotation.</code><code class="csharp keyword">event</code><code class="csharp plain">。</code></div></div></td></tr></tbody></table></div></div></div><div class="cnblogs_Highlighter sh-gutter"><div><div id="highlighter_858832" class="syntaxhighlighter  csharp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div><div class="line number6 index5 alt1">6</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">HttpManager http请求接口</code></div><div class="line number2 index1 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">　　支持同步，异步方式的请求；</code></div><div class="line number3 index2 alt2"><code class="csharp plain">　　　　支持大文件上传，上传大文件不会oom；</code></div><div class="line number4 index3 alt1"><code class="csharp plain">　　　　支持GET，POST，PUT，MOVE，COPY，DELETE，HEAD，OPTIONS，TRACE，CONNECT请求；</code></div><div class="line number5 index4 alt2"><code class="csharp plain">　　　　下载支持301/302重定向，支持设置是否根据Content-Disposition重命名下载的文件；</code></div><div class="line number6 index5 alt1"><code class="csharp plain">　　　　返回文本内容的请求(默认只启用了GET请求)支持缓存，可设置默认过期时间和针对当前请求的过期时间。&nbsp;&nbsp;&nbsp; </code></div></div></td></tr></tbody></table></div></div></div><div class="cnblogs_Highlighter sh-gutter"><div><div id="highlighter_93637" class="syntaxhighlighter  csharp"><div class="toolbar"><span><a href="#" class="toolbar_item command_help help">?</a></span></div><table border="0" cellpadding="0" cellspacing="0"><tbody><tr><td class="gutter"><div class="line number1 index0 alt2">1</div><div class="line number2 index1 alt1">2</div><div class="line number3 index2 alt2">3</div><div class="line number4 index3 alt1">4</div><div class="line number5 index4 alt2">5</div></td><td class="code"><div class="container"><div class="line number1 index0 alt2"><code class="csharp plain">ImageManager 图片绑定接口</code></div><div class="line number2 index1 alt1"><code class="csharp spaces">&nbsp;&nbsp;&nbsp;&nbsp;</code><code class="csharp plain">　　加载bitmap的时候无需考虑bitmap加载过程中出现的oom和android容器快速滑动时候出现的图片错位等现象；</code></div><div class="line number3 index2 alt2"><code class="csharp plain">　　　　支持加载网络图片和本地图片；</code></div><div class="line number4 index3 alt1"><code class="csharp plain">　　　　内存管理使用lru算法，更好的管理bitmap内存；</code></div><div class="line number5 index4 alt2"><code class="csharp plain">　　　　可配置线程加载线程数量，缓存大小，缓存路径，加载显示动画等...</code></div></div></td></tr></tbody></table></div></div></div><h3>　　混淆配置:</h3><p> 　　　　1. 添加Android默认混淆配置${sdk.dir}/tools/proguard/proguard-android.txt<br>    　　　　2. 不要混淆xUtils中的注解类型，添加混淆配置：-keep class * extends java.lang.annotation.Annotation { *; }<br>    　　　　3. 对使用DbUtils模块持久化的实体类不要混淆，或者注解所有表和列名称@Table(name="xxx")，@Id(column="xxx")，@Column(column="xxx"),@Foreign(column="xxx",foreign="xxx")；</p><h2>二.Xutils 使用</h2><h4>1.引入示例module</h4><p>　　　　<img src="https://images2018.cnblogs.com/blog/612293/201807/612293-20180730233934163-175096619.png" alt></p><h4>2.记得授权</h4><div class="cnblogs_code"><pre>&lt;uses-permission android:name=<span style="color: #800000;">"</span><span style="color: #800000;">android.permission.INTERNET</span><span style="color: #800000;">"</span> /&gt;&lt;uses-permission android:name=<span style="color: #800000;">"</span><span style="color: #800000;">android.permission.WRITE_EXTERNAL_STORAGE</span><span style="color: #800000;">"</span> /&gt;</pre></div><h4>3.Application里初始化</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">class</span><span style="color: #000000;"> MyApplication extends Application {<pre><code>@Override&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; onCreate() {    super.onCreate();    x.Ext.init(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);    x.Ext.setDebug(BuildConfig.DEBUG); &lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt;//&lt;/span&gt;&lt;span style=&quot;color: #008000;&quot;&gt; 开启debug会影响性能&lt;/span&gt;</code></pre><p><span style="color: #000000;">    }<br>}</span></p></span></pre><p></p><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><h4>4.DbManager操作数据库</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>DbManager.DaoConfig daoConfig = <span style="color: #0000ff;">new</span><span style="color: #000000;"> DbManager.DaoConfig()            .setDbName(</span><span style="color: #800000;">"</span><span style="color: #800000;">test.db</span><span style="color: #800000;">"</span><span style="color: #000000;">)            </span><span style="color: #008000;">//</span><span style="color: #008000;"> 不设置dbDir时, 默认存储在app的私有目录.</span>            .setDbDir(<span style="color: #0000ff;">new</span> File(<span style="color: #800000;">"</span><span style="color: #800000;">/sdcard</span><span style="color: #800000;">"</span>)) <span style="color: #008000;">//</span><span style="color: #008000;"> "sdcard"的写法并非最佳实践, 这里为了简单, 先这样写了.</span>            .setDbVersion(<span style="color: #800080;">2</span><span style="color: #000000;">)            .setDbOpenListener(</span><span style="color: #0000ff;">new</span><span style="color: #000000;"> DbManager.DbOpenListener() {                @Override                </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onDbOpened(DbManager db) {                    </span><span style="color: #008000;">//</span><span style="color: #008000;"> 开启WAL, 对写入加速提升巨大</span><span style="color: #000000;">                    db.getDatabase().enableWriteAheadLogging();                }            })            .setDbUpgradeListener(</span><span style="color: #0000ff;">new</span><span style="color: #000000;"> DbManager.DbUpgradeListener() {                @Override                </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span> onUpgrade(DbManager db, <span style="color: #0000ff;">int</span> oldVersion, <span style="color: #0000ff;">int</span><span style="color: #000000;"> newVersion) {                    </span><span style="color: #008000;">//</span><span style="color: #008000;"> TODO: ...                    </span><span style="color: #008000;">//</span><span style="color: #008000;"> db.addColumn(...);                    </span><span style="color: #008000;">//</span><span style="color: #008000;"> db.dropTable(...);                    </span><span style="color: #008000;">//</span><span style="color: #008000;"> ...                    </span><span style="color: #008000;">//</span><span style="color: #008000;"> or                    </span><span style="color: #008000;">//</span><span style="color: #008000;"> db.dropDb();</span><span style="color: #000000;">                }            });</span></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><div class="cnblogs_code"><pre> DbManager db = x.getDb(daoConfig);        </pre></div><p>最终都是调用xutils lib里的<span style="font-family: Courier New; font-size: small;">db包里的</span>DbModelSelector类转换为sql语句操作sqlLite数据库</p><p>　　　　　　　　<img src="https://images2018.cnblogs.com/blog/612293/201807/612293-20180730233915251-1868064577.png" alt></p><h4>5.HttpManager请求，ImageManager加载图片</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> loadImgList(String url) {        </span><span style="color: #008000;">//</span><span style="color: #008000;">HttpManager异步GET请求</span>        x.http().<span style="color: #0000ff;">get</span>(<span style="color: #0000ff;">new</span> RequestParams(url), <span style="color: #0000ff;">new</span> Callback.CommonCallback&lt;String&gt;<span style="color: #000000;">() {            @Override            </span><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> onSuccess(String result) {                imageListAdapter.addSrc(getImgSrcList(result));                imageListAdapter.notifyDataSetChanged();</span><span style="color: #008000;">//</span><span style="color: #008000;">通知listview更新数据</span><span style="color: #000000;">            }<pre><code>        @Override        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; onError(Throwable ex, boolean isOnCallback) {        }        @Override        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; onCancelled(CancelledException cex) {        }        @Override        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; onFinished() {        }    });}&lt;/span&gt;&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #000000;">ImageOptions imageOptions;    imageOptions </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> ImageOptions.Builder()                .setSize(DensityUtil.dip2px(</span><span style="color: #800080;">120</span>), DensityUtil.dip2px(<span style="color: #800080;">120</span><span style="color: #000000;">))                .setRadius(DensityUtil.dip2px(</span><span style="color: #800080;">5</span><span style="color: #000000;">))                </span><span style="color: #008000;">//</span><span style="color: #008000;"> 如果ImageView的大小不是定义为wrap_content, 不要crop.</span>                .setCrop(<span style="color: #0000ff;">true</span>) <span style="color: #008000;">//</span><span style="color: #008000;"> 很多时候设置了合适的scaleType也不需要它.                </span><span style="color: #008000;">//</span><span style="color: #008000;"> 加载中或错误图片的ScaleType                </span><span style="color: #008000;">//</span><span style="color: #008000;">.setPlaceholderScaleType(ImageView.ScaleType.MATRIX)</span><span style="color: #000000;">                .setImageScaleType(ImageView.ScaleType.CENTER_CROP)                .setLoadingDrawableId(R.mipmap.ic_launcher)                .setFailureDrawableId(R.mipmap.ic_launcher)                .build();</span></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><div class="cnblogs_code"><pre>x.image().bind(iv_big_img, getIntent().getStringExtra(<span style="color: #800000;">"</span><span style="color: #800000;">url</span><span style="color: #800000;">"</span>), imageOptions);</pre></div><p>&nbsp;</p><p>&nbsp;</p><p> <br><br>    </p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/Xutils.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_body&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Android 开源框架 ( 四 ) Afinal --- Android 里的 ORM IOC聚合型框架</title>
    <link href="https://freefuncode.github.io/2018/07/30/Android%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6%E5%9B%9BAfinal-Android%E9%87%8C%E7%9A%84ORM-IOC%E8%81%9A%E5%90%88%E5%9E%8B%E6%A1%86%E6%9E%B6/"/>
    <id>https://freefuncode.github.io/2018/07/30/Android开源框架四Afinal-Android里的ORM-IOC聚合型框架/</id>
    <published>2018-07-30T15:07:12.000Z</published>
    <updated>2019-09-06T13:20:05.795Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://www.cnblogs.com/bugzone/p/afinal.html" target="_blank" rel="noopener">点击查看原文</a></p><div id="cnblogs_post_body" class="blogpost-body ">    <p>Afinal&nbsp;是一个android的sqlite的 orm 和 ioc 框架.是一种聚合型框架, 大而全。所以不推荐使用,只做了解即可.应付手头临时项目.</p><p>推荐阅读,<a href="https://www.jianshu.com/p/f3227c7008d4" target="_blank">这么多开源框架，该用哪个好</a>？:</p><h2>一.引言</h2><p>　　Afinal是一个开源的android的orm和ioc应用开发框架.在android应用开发中，FinalActivity模块通过Afinal的ioc框架，诸如ui绑定，事件绑定，通过注解可以自动绑定。Afinal的orm框架，很轻松的就可以对android的sqlite数据库进行增删改查操作,Afinal内嵌了finalHttp等简单易用的工具，可以轻松的对http进行请求操作</p><h2>二.注解介绍</h2><p>　　说道注解首先接触最多的是@Override: 表示该方法是重写父类中的方法，编译的时候会检查该方法，如果这个方法不是父类中存在的将会报错.</p><p>　　java.lang.annotation 中包含所有定义自定义注解所需用到的原注解和接口。接口java.lang.annotation.Annotation 是所有注解继承的接口,并且是自动继承，不需要定义时指定，类似于所有类都自动继承Object。所以很多java.lang.annotation种的注册我们可以直接使用.</p><h3>　　注解三种保留方式: 　　</h3><p>　　@Retention: 定义注解的保留策略</p><p> 　　@Retention(RetentionPolicy.SOURCE)//注解仅存在于源码中，在class字节码文件中不包含<br>    　　@Retention(RetentionPolicy.CLASS)// 默认的保留策略，注解会在class字节码文件中存在，但运行时无法得<br>    　　@Retention(RetentionPolicy.RUNTIME)// 注解会在class字节码文件中存在，在运行时可以通过反射获取到</p><p>    　　1.SOURCE:只保留在源码中，不保留在class中，同时也不加载到虚拟机中. <br>    　　2.CLASS:保留在源码中，同时也保留到class中，但是不加载到虚拟机中.在程序编译时根据注解进行一些额外的操作，大名鼎鼎的<strong>ButterKnife</strong>运用的就是编译时注解,ButterKnife在我们编译时，就根据注解，自动生成了一些辅助类。 <br>    　　3.RUNING:保留到源码中，同时也保留到class中，最后加载到虚拟机中.在运行时环境下运用反射，动态获取对象、属性、方法等，一般的IOC框架就是这样，可能会牺牲一点效率。 <strong>EventBus</strong>是使用运行时注解，主要的作用是在运行的时候会去查找所有被注解的方法，然后再去解析注解。运行时注解会影响程序的性能，毕竟在运行的时候有一个查找的过程，所以运行时注解的作用一般是标记一个作用区。</p><h2>三.Afinal 介绍<em id="__mceDel"><br></em></h2><h3><em id="__mceDel">　　Afinal的四大模块：</em></h3><p>    　　　　FinalDB模块：android中的orm框架，一行代码就可以进行增删改查。支持一对多，多对一等查询。</p><p>    　　　　FinalActivity模块：android中的ioc框架，完全注解方式就可以进行UI绑定和事件绑定。无需findViewById和setClickListener等。</p><p>    　　　　FinalHttp模块：通过httpclient进行封装http数据请求，支持ajax方式加载。</p><p>    　　　　FinalBitmap模块：通过FinalBitmap，imageview加载bitmap的时候无需考虑bitmap加载过程中出现的oom和android容器快速滑动时候出现的图片错位等现象。FinalBitmap可以配置线程加载线程数量，缓存大小，缓存路径，加载显示动画等。FinalBitmap的内存管理使用lru算法，没有使用弱引用（android2.3以后google已经不建议使用弱引用，android2.3后强行回收软引用和弱引用，详情查看android官方文档），更好的管理bitmap内存。FinalBitmap可以自定义下载器，用来扩展其他协议显示网络图片，比如ftp等。同时可以自定义bitmap显示器，在imageview显示图片的时候播放动画等（默认是渐变动画显示）。</p><h2>&nbsp;四.Afinal 使用</h2><h4>&nbsp;　&nbsp; 1.引入jar包</h4><h4>    　　2.授权</h4><div class="cnblogs_code"><pre>&lt;uses-permission android:name=<span style="color: #800000;">"</span><span style="color: #800000;">android.permission.INTERNET</span><span style="color: #800000;">"</span> /&gt;&lt;uses-permission android:name=<span style="color: #800000;">"</span><span style="color: #800000;">android.permission.WRITE_EXTERNAL_STORAGE</span><span style="color: #800000;">"</span> /&gt;</pre></div><h4>　　3.FinalDB使用</h4><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>FinalDb db = FinalDb.create(<span style="color: #0000ff;">this</span><span style="color: #000000;">);User user </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> User();user.setEmail(</span><span style="color: #800000;">"1@</span><span style="color: #800000;">qq.com</span><span style="color: #800000;">"</span><span style="color: #000000;">);user.setId(</span><span style="color: #800080;">1</span><span style="color: #000000;">);user.setName(</span><span style="color: #800000;">"</span><span style="color: #800000;">oreo</span><span style="color: #800000;">"</span><span style="color: #000000;">); db.save(user);</span></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></div><p>　　查看下源码：（最后还是转成sql执行）</p><div class="cnblogs_code"><pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> save(Object entity) {        </span><span style="color: #0000ff;">this</span><span style="color: #000000;">.checkTableExist(entity.getClass());        </span><span style="color: #0000ff;">this</span><span style="color: #000000;">.exeSqlInfo(SqlBuilder.buildInsertSql(entity));    }</span></pre></div><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #0000ff;">public</span> <span style="color: #0000ff;">static</span><span style="color: #000000;"> SqlInfo buildInsertSql(Object entity) {        List</span>&lt;KeyValue&gt; keyValueList =<span style="color: #000000;"> getSaveKeyValueListByEntity(entity);        StringBuffer strSQL </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> StringBuffer();        SqlInfo sqlInfo </span>= <span style="color: #0000ff;">null</span><span style="color: #000000;">;        </span><span style="color: #0000ff;">if</span>(keyValueList != <span style="color: #0000ff;">null</span> &amp;&amp; keyValueList.size() &gt; <span style="color: #800080;">0</span><span style="color: #000000;">) {            sqlInfo </span>= <span style="color: #0000ff;">new</span><span style="color: #000000;"> SqlInfo();            strSQL.append(</span><span style="color: #800000;">"</span><span style="color: #800000;">INSERT INTO </span><span style="color: #800000;">"</span><span style="color: #000000;">);            strSQL.append(TableInfo.</span><span style="color: #0000ff;">get</span><span style="color: #000000;">(entity.getClass()).getTableName());            strSQL.append(</span><span style="color: #800000;">"</span><span style="color: #800000;"> (</span><span style="color: #800000;">"</span><span style="color: #000000;">);            Iterator var5 </span>=<span style="color: #000000;"> keyValueList.iterator();<pre><code>        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;while&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;(var5.hasNext()) {            KeyValue kv &lt;/span&gt;=&lt;span style=&quot;color: #000000;&quot;&gt; (KeyValue)var5.next();            strSQL.append(kv.getKey()).append(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;,&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);            sqlInfo.addValue(kv.getValue());        }        strSQL.deleteCharAt(strSQL.length() &lt;/span&gt;- &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);        strSQL.append(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;) VALUES ( &lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; length =&lt;span style=&quot;color: #000000;&quot;&gt; keyValueList.size();        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;for&lt;/span&gt;(&lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt; i = &lt;span style=&quot;color: #800080;&quot;&gt;0&lt;/span&gt;; i &amp;lt; length; ++&lt;span style=&quot;color: #000000;&quot;&gt;i) {            strSQL.append(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;?,&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);        }        strSQL.deleteCharAt(strSQL.length() &lt;/span&gt;- &lt;span style=&quot;color: #800080;&quot;&gt;1&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);        strSQL.append(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;)&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);        sqlInfo.setSql(strSQL.toString());    }    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;return&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; sqlInfo;}&lt;/span&gt;&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><h2>　　4.FinalBitmap使用</h2><div class="cnblogs_code"><pre><span style="color: #008000;">//</span><span style="color: #008000;"> 开始加载图片</span>finalBitmap.display(iv_afinal,<span style="color: #800000;">"</span><span style="color: #800000;">https://images2018.cnblogs.com/blog/612293/201807/612293-20180722160006222-1427704878.jpg</span><span style="color: #800000;">"</span>);</pre></div><p>　　查看下源码:</p><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre><span style="color: #0000ff;">private</span> <span style="color: #0000ff;">void</span><span style="color: #000000;"> doDisplay(View imageView, String uri, BitmapDisplayConfig displayConfig) {        </span><span style="color: #0000ff;">if</span>(!<span style="color: #0000ff;">this</span><span style="color: #000000;">.mInit) {            </span><span style="color: #0000ff;">this</span><span style="color: #000000;">.init();        }<pre><code>    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;(!TextUtils.isEmpty(uri) &amp;amp;&amp;amp; imageView != &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) {        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;(displayConfig == &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) {            displayConfig &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.mConfig.defaultDisplayConfig;        }        Bitmap bitmap &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;;        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;(&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;.mImageCache != &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) {&lt;br&gt;　　　　　　　　　　//优先缓存获取&lt;br&gt;                bitmap &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.mImageCache.getBitmapFromMemoryCache(uri);        }        &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;(bitmap != &lt;span style=&quot;color: #0000ff;&quot;&gt;null&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;) {            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;(imageView instanceof ImageView) {                ((ImageView)imageView).setImageBitmap(bitmap);            } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {                imageView.setBackgroundDrawable(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; BitmapDrawable(bitmap));            }        } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;(checkImageTask(uri, imageView)) {&lt;br&gt;　　　　　　　　　//FinalBitmap模块 加载图片            FinalBitmap.BitmapLoadAndDisplayTask task &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; FinalBitmap.BitmapLoadAndDisplayTask(imageView, displayConfig);            FinalBitmap.AsyncDrawable asyncDrawable &lt;/span&gt;= &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; FinalBitmap.AsyncDrawable(&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;.mContext.getResources(), displayConfig.getLoadingBitmap(), task);            &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;if&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;(imageView instanceof ImageView) {                ((ImageView)imageView).setImageDrawable(asyncDrawable);            } &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;else&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; {                imageView.setBackgroundDrawable(asyncDrawable);            }            task.executeOnExecutor(&lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;this&lt;/span&gt;.bitmapLoadAndDisplayExecutor, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; Object[]{uri});        }    }}&lt;/span&gt;&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><h2>　　5.FinalHttp下载文件</h2><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>FinalHttp finalHttp = <span style="color: #0000ff;">new</span><span style="color: #000000;"> FinalHttp();        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 请求网络资源的地址</span>        String url = <span style="color: #800000;">""</span><span style="color: #000000;">;        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 存放视频文件到本地位置</span>        String target = getFilesDir()+<span style="color: #800000;">"</span><span style="color: #800000;">/testAfinal.mp4</span><span style="color: #800000;">"</span><span style="color: #000000;">;<pre><code>finalHttp.download(url, target, &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; AjaxCallBack&amp;lt;File&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;() {    @Override    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; onSuccess(File file) {        tv_afinal_result.setText(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;下载文件成功&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);        super.onSuccess(file);    }    @Override    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; onFailure(Throwable t, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; errorNo, String strMsg) {        tv_afinal_result.setText(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;下载文件失败&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);        super.onFailure(t, errorNo, strMsg);    }    @Override    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; onStart() {        tv_afinal_result.setText(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;开始下载&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);        super.onStart();    }});&lt;/span&gt;&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><h2>　　6.FinalHttp上传文件</h2><div class="cnblogs_code"><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div><pre>FinalHttp finalHttp = <span style="color: #0000ff;">new</span><span style="color: #000000;"> FinalHttp();        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 文件上传到服务器的位置</span>        String url  = <span style="color: #800000;">""</span><span style="color: #000000;">;        AjaxParams </span><span style="color: #0000ff;">params</span> = <span style="color: #0000ff;">new</span><span style="color: #000000;"> AjaxParams();        </span><span style="color: #008000;">//</span><span style="color: #008000;"> 获取要上传的本地资源</span>        <span style="color: #0000ff;">try</span><span style="color: #000000;"> {            </span><span style="color: #0000ff;">params</span>.put(<span style="color: #800000;">"</span><span style="color: #800000;">File</span><span style="color: #800000;">"</span>,<span style="color: #0000ff;">new</span> File(getFilesDir()+<span style="color: #800000;">"</span><span style="color: #800000;">/testAfinal.mp4</span><span style="color: #800000;">"</span><span style="color: #000000;">));        } </span><span style="color: #0000ff;">catch</span><span style="color: #000000;"> (FileNotFoundException e) {            e.printStackTrace();        }<pre><code>finalHttp.post(url, &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;params&lt;/span&gt;, &lt;span style=&quot;color: #0000ff;&quot;&gt;new&lt;/span&gt; AjaxCallBack&amp;lt;Object&amp;gt;&lt;span style=&quot;color: #000000;&quot;&gt;() {    @Override    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; onStart() {        tv_afinal_result.setText(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;开始上传&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);        super.onStart();    }    @Override    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; onSuccess(Object o) {        tv_afinal_result.setText(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;上传成功&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);        super.onSuccess(o);    }    @Override    &lt;/span&gt;&lt;span style=&quot;color: #0000ff;&quot;&gt;public&lt;/span&gt; &lt;span style=&quot;color: #0000ff;&quot;&gt;void&lt;/span&gt; onFailure(Throwable t, &lt;span style=&quot;color: #0000ff;&quot;&gt;int&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt; errorNo, String strMsg) {        tv_afinal_result.setText(&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;上传失败&lt;/span&gt;&lt;span style=&quot;color: #800000;&quot;&gt;&quot;&lt;/span&gt;&lt;span style=&quot;color: #000000;&quot;&gt;);        super.onFailure(t, errorNo, strMsg);    }});&lt;/span&gt;&lt;/pre&gt;</code></pre><div class="cnblogs_code_toolbar"><span class="cnblogs_code_copy"><a href="javascript:void(0);" onclick="copyCnblogsCode(this)" title="复制代码" target="_blank" rel="noopener"><img src="//common.cnblogs.com/images/copycode.gif" alt="复制代码"></a></span></div></span></pre></div><p>&nbsp;</p></div>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://www.cnblogs.com/bugzone/p/afinal.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;点击查看原文&lt;/a&gt;&lt;/p&gt;
&lt;div id=&quot;cnblogs_post_body&quot; class=&quot;
      
    
    </summary>
    
    
      <category term="Android" scheme="https://freefuncode.github.io/categories/Android/"/>
    
      <category term="开源框架" scheme="https://freefuncode.github.io/categories/Android/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
    
      <category term="开源框架" scheme="https://freefuncode.github.io/tags/%E5%BC%80%E6%BA%90%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
</feed>
